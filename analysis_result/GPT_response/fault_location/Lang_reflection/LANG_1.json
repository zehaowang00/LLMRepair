{
    "file_name": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
    "if_has_bug": "Yes",
    "method_level": "public static Number createNumber(final String str) throws NumberFormatException {",
    "block_level": "final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\nint pfxLen = 0;\nfor(final String pfx : hex_prefixes) {\n    if (str.startsWith(pfx)) {\n        pfxLen += pfx.length();\n        break;\n    }\n}\nif (pfxLen > 0) { // we have a hex number\n    final int hexDigits = str.length() - pfxLen;\n    if (hexDigits > 16) { // too many for Long\n        return createBigInteger(str);\n    }\n    if (hexDigits > 8) { // too many for an int\n        return createLong(str);\n    }\n    return createInteger(str);\n}\nfinal char lastChar = str.charAt(str.length() - 1);\nString mant;\nString dec;\nString exp;\nfinal int decPos = str.indexOf('.');\nfinal int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present\n// if both e and E are present, this is caught by the checks on expPos (which prevent IOOBE)\n// and the parsing which will detect if e or E appear in a number due to using the wrong offset\n\nint numDecimals = 0; // Check required precision (LANG-693)\nif (decPos > -1) { // there is a decimal point\n\n    if (expPos > -1) { // there is an exponent\n        if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        dec = str.substring(decPos + 1, expPos);\n    } else {\n        dec = str.substring(decPos + 1);\n    }\n    mant = str.substring(0, decPos);\n    numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.\n} else {\n    if (expPos > -1) {\n        if (expPos > str.length()) { // prevents double exponent causing IOOBE\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n        mant = str.substring(0, expPos);\n    } else {\n        mant = str;\n    }\n    dec = null;\n}\nif (!Character.isDigit(lastChar) && lastChar != '.') {\n    if (expPos > -1 && expPos < str.length() - 1) {\n        exp = str.substring(expPos + 1, str.length() - 1);\n    } else {\n        exp = null;\n    }\n    //Requesting a specific type..\n    final String numeric = str.substring(0, str.length() - 1);\n    final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n    switch (lastChar) {\n        case 'l' :\n        case 'L' :\n            if (dec == null\n                && exp == null\n                && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                try {\n                    return createLong(numeric);\n                } catch (final NumberFormatException nfe) { // NOPMD\n                    // Too big for a long\n                }\n                return createBigInteger(numeric);\n\n            }\n            throw new NumberFormatException(str + \" is not a valid number.\");\n        case 'f' :\n        case 'F' :\n            try {\n                final Float f = NumberUtils.createFloat(numeric);\n                if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                    //If it's too big for a float or the float value = 0 and the string\n                    //has non-zeros in it, then float does not have the precision we want\n                    return f;\n                }\n\n            } catch (final NumberFormatException nfe) { // NOPMD\n                // ignore the bad number\n            }\n            //$FALL-THROUGH$\n        case 'd' :\n        case 'D' :\n            try {\n                final Double d = NumberUtils.createDouble(numeric);\n                if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                    return d;\n                }\n            } catch (final NumberFormatException nfe) { // NOPMD\n                // ignore the bad number\n            }\n            try {\n                return createBigDecimal(numeric);\n            } catch (final NumberFormatException e) { // NOPMD\n                // ignore the bad number\n            }\n            //$FALL-THROUGH$\n        default :\n            throw new NumberFormatException(str + \" is not a valid number.\");\n\n    }\n}\n//User doesn't have a preference on the return type, so let's start\n//small and go from there...\nif (expPos > -1 && expPos < str.length() - 1) {\n    exp = str.substring(expPos + 1, str.length());\n} else {\n    exp = null;\n}\nif (dec == null && exp == null) { // no decimal point and no exponent\n//Must be an Integer, Long, Biginteger\ntry {\n    return createInteger(str);\n} catch (final NumberFormatException nfe) { // NOPMD\n    // ignore the bad number\n}\ntry {\n    return createLong(str);\n} catch (final NumberFormatException nfe) { // NOPMD\n    // ignore the bad number\n}\nreturn createBigInteger(str);\n}\n//Must be a Float, Double, BigDecimal\nfinal boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\ntry {\n    if(numDecimals <= 7){// If number has 7 or fewer digits past the decimal point then make it a float\n        final Float f = createFloat(str);\n        if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n            return f;\n        }\n    }\n} catch (final NumberFormatException nfe) { // NOPMD\n    // ignore the bad number\n}\ntry {\n    if(numDecimals <= 16){// If number has between 8 and 16 digits past the decimal point then make it a double\n        final Double d = createDouble(str);\n        if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n            return d;\n        }\n    }\n} catch (final NumberFormatException nfe) { // NOPMD\n    // ignore the bad number\n}\nreturn createBigDecimal(str);"
}