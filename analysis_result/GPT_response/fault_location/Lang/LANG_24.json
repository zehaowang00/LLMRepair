{
    "result": [
        {
            "file_name": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
            "if_has_bug": "Yes",
            "method_level": "public static boolean isNumber(String str)",
            "block_level": "if (chars[i] == 'l'\n                || chars[i] == 'L') {\n                // not allowing L with an exponent\n                return foundDigit && !hasExp;\n            }\n\n            to:\n\n            if (chars[i] == 'l'\n                || chars[i] == 'L') {\n                // not allowing L with an exponent\n                return foundDigit && !hasExp && !hasDecPoint;\n            }"
        },
        {
            "file_name": "src/main/java/org/apache/commons/lang3/Pair.java",
            "if_has_bug": "Yes",
            "method_level": "public Pair(L left, R right) {",
            "block_level": "if (chars[i] == 'l'\n                || chars[i] == 'L') {\n                // not allowing L with an exponent\n                return foundDigit && !hasExp && !hasDecPoint;\n            }"
        },
        {
            "file_name": "src/main/java/org/apache/commons/lang3/BooleanUtils.java",
            "if_has_bug": "Yes",
            "method_level": "public static boolean xor(boolean... array) {",
            "block_level": "if (element) {\n                if (trueCount < 1) {\n                    trueCount++;\n                } else {\n                    return false;\n                }\n            }"
        }
    ]
}