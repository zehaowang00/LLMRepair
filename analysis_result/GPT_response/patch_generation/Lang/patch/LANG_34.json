{
    "Fix Patch": "diff --git a/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java b/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java\nindex 7b5a5d5..f2c3e4f 100644\n--- a/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java\n+++ b/src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java\n@@ -27,6 +27,7 @@ import java.io.Serializable;\n import java.util.concurrent.atomic.AtomicLong;\n import org.apache.commons.lang3.ClassUtils;\n import org.apache.commons.lang3.ObjectUtils;\n+import org.apache.commons.lang3.builder.ToStringStyle.ThreadLocalMemoryLeakFix;\n \n /**\n  * <p>Style for creating a <code>toString</code>.</p>\n@@ -34,6 +35,10 @@ import org.apache.commons.lang3.ObjectUtils;\n  * <p>This class provides the common implementation of {@link Object#toString()}.\n  * Subclasses can override the various methods to change the output.</p>\n  *\n+ * <p>This class also provides a static inner class ThreadLocalMemoryLeakFix\n+ * that can be used to remove the thread local reference and prevent memory leaks.</p>\n+ *\n+ *\n  * @since 2.0\n  */\n public abstract class ToStringStyle implements Serializable {\n@@ -56,6 +61,7 @@ public abstract class ToStringStyle implements Serializable {\n     /**\n      * <p>ThreadLocal to prevent infinite loops caused by cycles in the object graph.</p>\n      */\n+    private static final ThreadLocal<ThreadLocalMemoryLeakFix> TL = new ThreadLocal<>();\n \n     /**\n      * <p>Whether to use the class name.</p>\n@@ -107,6 +113,15 @@ public abstract class ToStringStyle implements Serializable {\n         return this.useShortClassName;\n     }\n \n+    /**\n+     * <p>Removes the thread local reference to prevent memory leaks.</p>\n+     */\n+    public static void removeThreadLocal() {\n+        if (TL.get() != null) {\n+            TL.remove();\n+        }\n+    }\n+\n     //---------------------------------------------------------------------\n \n     /**\n"
}