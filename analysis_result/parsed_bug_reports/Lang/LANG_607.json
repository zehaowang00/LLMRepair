[
    {
        "title": "[LANG-607] StringUtils methods do not handle Unicode 2.0+ supplementary characters correctly.",
        "description": "<p>StringUtils.containsAny methods incorrectly matches Unicode 2.0+ supplementary characters.</p>\n\n<p>For example, define a test fixture to be the Unicode character U+20000 where U+20000 is written in Java source as \"\\uD840\\uDC00\"</p>\n\n<p>\tprivate static final String CharU20000 = \"\\uD840\\uDC00\";<br/>\n\tprivate static final String CharU20001 = \"\\uD840\\uDC01\";</p>\n\n<p>You can see Unicode supplementary characters correctly implemented in the JRE call:</p>\n\n<p>\tassertEquals(-1, CharU20000.indexOf(CharU20001));</p>\n\n<p>But this is broken:</p>\n\n<p>\tassertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));<br/>\n\tassertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));</p>\n\n<p>This is fine:</p>\n\n<p>\tassertEquals(true, StringUtils.contains(CharU20000 + CharU20001, CharU20000));<br/>\n\tassertEquals(true, StringUtils.contains(CharU20000 + CharU20001, CharU20001));<br/>\n\tassertEquals(true, StringUtils.contains(CharU20000, CharU20000));<br/>\n\tassertEquals(false, StringUtils.contains(CharU20000, CharU20001));</p>\n\n<p>because the method calls the JRE to perform the match.</p>\n\n<p>More than you want to know:</p>\n<ul class=\"alternate\" type=\"square\">\n\t<li><a href=\"http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\" class=\"external-link\" target=\"_blank\" rel=\"nofollow noopener\">http://java.sun.com/developer/technicalArticles/Intl/Supplementary/</a></li>\n</ul>\n"
    }
]