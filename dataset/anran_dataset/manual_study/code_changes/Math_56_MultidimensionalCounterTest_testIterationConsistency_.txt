commit e06fe05e2dd68936e770ba67caa7b9924568170d
Author: Gilles Sadowski <erans@apache.org>
Date:   Fri Apr 1 06:10:18 2011

    MATH-552
    Fixed bug in "MultidimensionalCounter". Thanks to James Bence.
    
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1087637 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java b/src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java
--- a/src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java
+++ b/src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java
@@ -123,47 +123,59 @@
     public void testIterationConsistency() {
-        final MultidimensionalCounter c = new MultidimensionalCounter(2, 3, 2);
+        final MultidimensionalCounter c = new MultidimensionalCounter(2, 3, 4);
         final int[][] expected = new int[][] {
             { 0, 0, 0 },
             { 0, 0, 1 },
+            { 0, 0, 2 },
+            { 0, 0, 3 },
             { 0, 1, 0 },
             { 0, 1, 1 },
+            { 0, 1, 2 },
+            { 0, 1, 3 },
             { 0, 2, 0 },
             { 0, 2, 1 },
+            { 0, 2, 2 },
+            { 0, 2, 3 },
             { 1, 0, 0 },
             { 1, 0, 1 },
+            { 1, 0, 2 },
+            { 1, 0, 3 },
             { 1, 1, 0 },
             { 1, 1, 1 },
+            { 1, 1, 2 },
+            { 1, 1, 3 },
             { 1, 2, 0 },
-            { 1, 2, 1 }
+            { 1, 2, 1 },
+            { 1, 2, 2 },
+            { 1, 2, 3 }
         };
 
         final int totalSize = c.getSize();
         final int nDim = c.getDimension();
         final MultidimensionalCounter.Iterator iter = c.iterator();
         for (int i = 0; i < totalSize; i++) {
             if (!iter.hasNext()) {
                 Assert.fail("Too short");
             }
             final int uniDimIndex = iter.next();
             Assert.assertEquals("Wrong iteration at " + i, i, uniDimIndex);
 
             for (int dimIndex = 0; dimIndex < nDim; dimIndex++) {
                 Assert.assertEquals("Wrong multidimensional index for [" + i + "][" + dimIndex + "]",
                                     expected[i][dimIndex], iter.getCount(dimIndex));
             }
 
             Assert.assertEquals("Wrong unidimensional index for [" + i + "]",
                                 c.getCount(expected[i]), uniDimIndex);
 
             final int[] indices = c.getCounts(uniDimIndex);
             for (int dimIndex = 0; dimIndex < nDim; dimIndex++) {
                 Assert.assertEquals("Wrong multidimensional index for [" + i + "][" + dimIndex + "]",
                                     expected[i][dimIndex], indices[dimIndex]);
             }
         }
 
         if (iter.hasNext()) {
             Assert.fail("Too long");
         }
     }
 }

commit 512526d572d8abe9379d98be50aa1d2e7d128217
Author: Gilles Sadowski <erans@apache.org>
Date:   Mon Jun 28 08:09:02 2010

    MATH-379
    
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@958552 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java b/src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java
--- /dev/null
+++ b/src/test/java/org/apache/commons/math/util/MultidimensionalCounterTest.java
@@ -0,0 +123,47 @@
+    public void testIterationConsistency() {
+        final MultidimensionalCounter c = new MultidimensionalCounter(2, 3, 2);
+        final int[][] expected = new int[][] {
+            { 0, 0, 0 },
+            { 0, 0, 1 },
+            { 0, 1, 0 },
+            { 0, 1, 1 },
+            { 0, 2, 0 },
+            { 0, 2, 1 },
+            { 1, 0, 0 },
+            { 1, 0, 1 },
+            { 1, 1, 0 },
+            { 1, 1, 1 },
+            { 1, 2, 0 },
+            { 1, 2, 1 }
+        };
+
+        final int totalSize = c.getSize();
+        final int nDim = c.getDimension();
+        final MultidimensionalCounter.Iterator iter = c.iterator();
+        for (int i = 0; i < totalSize; i++) {
+            if (!iter.hasNext()) {
+                Assert.fail("Too short");
+            }
+            final int uniDimIndex = iter.next();
+            Assert.assertEquals("Wrong iteration at " + i, i, uniDimIndex);
+
+            for (int dimIndex = 0; dimIndex < nDim; dimIndex++) {
+                Assert.assertEquals("Wrong multidimensional index for [" + i + "][" + dimIndex + "]",
+                                    expected[i][dimIndex], iter.getCount(dimIndex));
+            }
+
+            Assert.assertEquals("Wrong unidimensional index for [" + i + "]",
+                                c.getCount(expected[i]), uniDimIndex);
+
+            final int[] indices = c.getCounts(uniDimIndex);
+            for (int dimIndex = 0; dimIndex < nDim; dimIndex++) {
+                Assert.assertEquals("Wrong multidimensional index for [" + i + "][" + dimIndex + "]",
+                                    expected[i][dimIndex], indices[dimIndex]);
+            }
+        }
+
+        if (iter.hasNext()) {
+            Assert.fail("Too long");
+        }
+    }
+}
