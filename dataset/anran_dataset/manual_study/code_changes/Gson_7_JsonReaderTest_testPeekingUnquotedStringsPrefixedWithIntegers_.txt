commit 0669ff7fd16c26521b924a58c7dd64ab2dc1a46d
Author: Scott Brown <sgbrown@users.noreply.github.com>
Date:   Sat Mar 12 13:52:13 2016

    allow unquoted long and integer keys

diff --git a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java
--- a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java
+++ b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java
@@ -496,13 +496,13 @@
   public void testPeekingUnquotedStringsPrefixedWithIntegers() throws IOException {
     JsonReader reader = new JsonReader(reader("[12.34e5x]"));
     reader.setLenient(true);
     reader.beginArray();
     assertEquals(STRING, reader.peek());
     try {
       reader.nextInt();
       fail();
-    } catch (IllegalStateException expected) {
+    } catch (NumberFormatException expected) {
     }
     assertEquals("12.34e5x", reader.nextString());
   }
 

commit 46b73632b0f7591ef1328ee7ddd1e883916fec1e
Author: Jesse Wilson <jesse@swank.ca>
Date:   Mon Aug 27 21:48:25 2012

    Fix a bug where we weren't reading enough characters when a BOM was encountered.

diff --git a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java
--- a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java
+++ b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java
@@ -404,13 +404,13 @@
   public void testPeekingUnquotedStringsPrefixedWithIntegers() throws IOException {
-    JsonReader reader = new JsonReader(new StringReader("[12.34e5x]"));
+    JsonReader reader = new JsonReader(reader("[12.34e5x]"));
     reader.setLenient(true);
     reader.beginArray();
     assertEquals(STRING, reader.peek());
     try {
       reader.nextInt();
       fail();
     } catch (IllegalStateException expected) {
     }
     assertEquals("12.34e5x", reader.nextString());
   }
 

commit b96d2d983793ee6c70f059936cf95f325519ca7a
Author: Jesse Wilson <jesse@swank.ca>
Date:   Sun Aug 26 15:31:06 2012

    Support non-execute prefixes.

diff --git a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java
--- a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java
+++ b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java
@@ -411,13 +416,13 @@
   public void testPeekingUnquotedStringsPrefixedWithIntegers() throws IOException {
     JsonReader reader = new JsonReader(new StringReader("[12.34e5x]"));
     reader.setLenient(true);
     reader.beginArray();
-    assertEquals(JsonToken.STRING, reader.peek());
+    assertEquals(STRING, reader.peek());
     try {
       reader.nextInt();
       fail();
     } catch (IllegalStateException expected) {
     }
     assertEquals("12.34e5x", reader.nextString());
   }
 

commit c5c65ba62601524ab09d7aa317689117676f2d4d
Author: Jesse Wilson <jesse@swank.ca>
Date:   Sat Aug 25 00:31:56 2012

    Add an experimental rewrite of JsonReader.
    
    The motivating difference is that JsonReaderV2 tries to read each character at most once. This means that when it reads literals, it also attempts to decode them to a keyword (true/false/null) or a number.
    
    This change also _doesn't_ read strings until demanded to do so. This should permit streaming access to strings down the road.
    
    This code is not yet complete, nor is has it been properly optimized. And the implementation is also quite a mess! It is a work in progress.

diff --git a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java
--- a/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java
+++ b/gson/src/test/java/com/google/gson/stream/JsonReaderTest.java
@@ -369,0 +407,13 @@
+  public void testPeekingUnquotedStringsPrefixedWithIntegers() throws IOException {
+    JsonReader reader = new JsonReader(new StringReader("[12.34e5x]"));
+    reader.setLenient(true);
+    reader.beginArray();
+    assertEquals(JsonToken.STRING, reader.peek());
+    try {
+      reader.nextInt();
+      fail();
+    } catch (IllegalStateException expected) {
+    }
+    assertEquals("12.34e5x", reader.nextString());
+  }
+
