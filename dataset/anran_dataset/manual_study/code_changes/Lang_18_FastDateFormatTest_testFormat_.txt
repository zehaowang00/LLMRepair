commit 2aa9dca994b006ccbfcb528de5ff0da6a5578411
Author: Joerg Schaible <joehni@apache.org>
Date:   Wed Jul 13 13:01:37 2011

    Adjust FastDateFormat for Java 7 behavior regarding format of the year pattern (LANG-719).
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1146138 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java b/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java
--- a/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java
+++ b/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java
@@ -173,57 +173,58 @@
     public void testFormat() {
         Locale realDefaultLocale = Locale.getDefault();
         TimeZone realDefaultZone = TimeZone.getDefault();
         try {
             Locale.setDefault(Locale.US);
             TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
 
             GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
             GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
             Date date1 = cal1.getTime();
             Date date2 = cal2.getTime();
             long millis1 = date1.getTime();
             long millis2 = date2.getTime();
 
             FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
             SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
             assertEquals(sdf.format(date1), fdf.format(date1));
             assertEquals("2003-01-10T15:33:20", fdf.format(date1));
             assertEquals("2003-01-10T15:33:20", fdf.format(cal1));
             assertEquals("2003-01-10T15:33:20", fdf.format(millis1));
             assertEquals("2003-07-10T09:00:00", fdf.format(date2));
             assertEquals("2003-07-10T09:00:00", fdf.format(cal2));
             assertEquals("2003-07-10T09:00:00", fdf.format(millis2));
 
             fdf = FastDateFormat.getInstance("Z");
             assertEquals("-0500", fdf.format(date1));
             assertEquals("-0500", fdf.format(cal1));
             assertEquals("-0500", fdf.format(millis1));
 
             assertEquals("-0400", fdf.format(date2));
             assertEquals("-0400", fdf.format(cal2));
             assertEquals("-0400", fdf.format(millis2));
 
             fdf = FastDateFormat.getInstance("ZZ");
             assertEquals("-05:00", fdf.format(date1));
             assertEquals("-05:00", fdf.format(cal1));
             assertEquals("-05:00", fdf.format(millis1));
 
             assertEquals("-04:00", fdf.format(date2));
             assertEquals("-04:00", fdf.format(cal2));
             assertEquals("-04:00", fdf.format(millis2));
 
             String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                 " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
             fdf = FastDateFormat.getInstance(pattern);
             sdf = new SimpleDateFormat(pattern);
-            assertEquals(sdf.format(date1), fdf.format(date1));
-            assertEquals(sdf.format(date2), fdf.format(date2));
+            // SDF bug fix starting with Java 7
+            assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));
+            assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));
         } finally {
             Locale.setDefault(realDefaultLocale);
             TimeZone.setDefault(realDefaultZone);
         }
     }
 
     /**
      * Test case for {@link FastDateFormat#getDateInstance(int, java.util.Locale)}.
      */

commit b1aa85b7480af1bbce9b651930a5fec8beca7973
Author: Oliver Heger <oheger@apache.org>
Date:   Sun May 1 16:27:16 2011

    Fixed a test failure which occurred under certain circumstances (Java 1.5 with default locale GERMAN).
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1098403 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java b/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java
--- a/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java
+++ b/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java
@@ -173,57 +173,57 @@
     public void testFormat() {
         Locale realDefaultLocale = Locale.getDefault();
         TimeZone realDefaultZone = TimeZone.getDefault();
         try {
             Locale.setDefault(Locale.US);
             TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
 
             GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
             GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
             Date date1 = cal1.getTime();
             Date date2 = cal2.getTime();
             long millis1 = date1.getTime();
             long millis2 = date2.getTime();
 
             FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
             SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
             assertEquals(sdf.format(date1), fdf.format(date1));
             assertEquals("2003-01-10T15:33:20", fdf.format(date1));
             assertEquals("2003-01-10T15:33:20", fdf.format(cal1));
             assertEquals("2003-01-10T15:33:20", fdf.format(millis1));
             assertEquals("2003-07-10T09:00:00", fdf.format(date2));
             assertEquals("2003-07-10T09:00:00", fdf.format(cal2));
             assertEquals("2003-07-10T09:00:00", fdf.format(millis2));
 
             fdf = FastDateFormat.getInstance("Z");
             assertEquals("-0500", fdf.format(date1));
             assertEquals("-0500", fdf.format(cal1));
             assertEquals("-0500", fdf.format(millis1));
 
             assertEquals("-0400", fdf.format(date2));
             assertEquals("-0400", fdf.format(cal2));
             assertEquals("-0400", fdf.format(millis2));
 
             fdf = FastDateFormat.getInstance("ZZ");
             assertEquals("-05:00", fdf.format(date1));
             assertEquals("-05:00", fdf.format(cal1));
             assertEquals("-05:00", fdf.format(millis1));
 
             assertEquals("-04:00", fdf.format(date2));
             assertEquals("-04:00", fdf.format(cal2));
             assertEquals("-04:00", fdf.format(millis2));
 
             String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                 " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
             fdf = FastDateFormat.getInstance(pattern);
             sdf = new SimpleDateFormat(pattern);
             assertEquals(sdf.format(date1), fdf.format(date1));
-            assertEquals(sdf.format(date2), fdf.format(date2));            
+            assertEquals(sdf.format(date2), fdf.format(date2));
         } finally {
             Locale.setDefault(realDefaultLocale);
             TimeZone.setDefault(realDefaultZone);
         }
     }
-    
+
     /**
      * Test case for {@link FastDateFormat#getDateInstance(int, java.util.Locale)}.
      */

commit 47ee02b66475081d691d6e9bd6ec7a60378f8ac0
Author: Henri Yandell <bayard@apache.org>
Date:   Wed Apr 20 02:51:16 2011

    Refactoring FastDateFormat per LANG-462 to use the FormatCache class created for an upcoming DateParser functionality. I've kept FormatCache package-private for now.
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1095299 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java b/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java
--- a/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java
+++ b/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java
@@ -180,62 +173,57 @@
     public void testFormat() {
         Locale realDefaultLocale = Locale.getDefault();
         TimeZone realDefaultZone = TimeZone.getDefault();
         try {
             Locale.setDefault(Locale.US);
             TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
-            FastDateFormat fdf = null;
-            SimpleDateFormat sdf = null;
 
             GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
             GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
             Date date1 = cal1.getTime();
             Date date2 = cal2.getTime();
             long millis1 = date1.getTime();
             long millis2 = date2.getTime();
 
-            fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
-            sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
+            FastDateFormat fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
+            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
             assertEquals(sdf.format(date1), fdf.format(date1));
             assertEquals("2003-01-10T15:33:20", fdf.format(date1));
             assertEquals("2003-01-10T15:33:20", fdf.format(cal1));
             assertEquals("2003-01-10T15:33:20", fdf.format(millis1));
             assertEquals("2003-07-10T09:00:00", fdf.format(date2));
             assertEquals("2003-07-10T09:00:00", fdf.format(cal2));
             assertEquals("2003-07-10T09:00:00", fdf.format(millis2));
 
             fdf = FastDateFormat.getInstance("Z");
             assertEquals("-0500", fdf.format(date1));
             assertEquals("-0500", fdf.format(cal1));
             assertEquals("-0500", fdf.format(millis1));
 
-            fdf = FastDateFormat.getInstance("Z");
             assertEquals("-0400", fdf.format(date2));
             assertEquals("-0400", fdf.format(cal2));
             assertEquals("-0400", fdf.format(millis2));
 
             fdf = FastDateFormat.getInstance("ZZ");
             assertEquals("-05:00", fdf.format(date1));
             assertEquals("-05:00", fdf.format(cal1));
             assertEquals("-05:00", fdf.format(millis1));
 
-            fdf = FastDateFormat.getInstance("ZZ");
             assertEquals("-04:00", fdf.format(date2));
             assertEquals("-04:00", fdf.format(cal2));
             assertEquals("-04:00", fdf.format(millis2));
 
             String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                 " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
             fdf = FastDateFormat.getInstance(pattern);
             sdf = new SimpleDateFormat(pattern);
             assertEquals(sdf.format(date1), fdf.format(date1));
-            assertEquals(sdf.format(date2), fdf.format(date2));
-
+            assertEquals(sdf.format(date2), fdf.format(date2));            
         } finally {
             Locale.setDefault(realDefaultLocale);
             TimeZone.setDefault(realDefaultZone);
         }
     }
-
+    
     /**
      * Test case for {@link FastDateFormat#getDateInstance(int, java.util.Locale)}.
      */

commit c2003e4aa91120db3b91cdc659aded992bc68f58
Author: Stephen Colebourne <scolebourne@apache.org>
Date:   Mon Jul 5 18:37:40 2004

    Add format(long) and format(long, StringBuffer)
    bug 29794
    
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137871 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/lang/time/FastDateFormatTest.java b/src/test/org/apache/commons/lang/time/FastDateFormatTest.java
--- a/src/test/org/apache/commons/lang/time/FastDateFormatTest.java
+++ b/src/test/org/apache/commons/lang/time/FastDateFormatTest.java
@@ -162,54 +162,62 @@
     public void testFormat() {
         Locale realDefaultLocale = Locale.getDefault();
         TimeZone realDefaultZone = TimeZone.getDefault();
         try {
             Locale.setDefault(Locale.US);
             TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
             FastDateFormat fdf = null;
             SimpleDateFormat sdf = null;
 
             GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
             GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
             Date date1 = cal1.getTime();
             Date date2 = cal2.getTime();
+            long millis1 = date1.getTime();
+            long millis2 = date2.getTime();
 
             fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
             sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
             assertEquals(sdf.format(date1), fdf.format(date1));
             assertEquals("2003-01-10T15:33:20", fdf.format(date1));
             assertEquals("2003-01-10T15:33:20", fdf.format(cal1));
+            assertEquals("2003-01-10T15:33:20", fdf.format(millis1));
             assertEquals("2003-07-10T09:00:00", fdf.format(date2));
             assertEquals("2003-07-10T09:00:00", fdf.format(cal2));
+            assertEquals("2003-07-10T09:00:00", fdf.format(millis2));
 
             fdf = FastDateFormat.getInstance("Z");
             assertEquals("-0500", fdf.format(date1));
             assertEquals("-0500", fdf.format(cal1));
+            assertEquals("-0500", fdf.format(millis1));
 
             fdf = FastDateFormat.getInstance("Z");
             assertEquals("-0400", fdf.format(date2));
             assertEquals("-0400", fdf.format(cal2));
+            assertEquals("-0400", fdf.format(millis2));
 
             fdf = FastDateFormat.getInstance("ZZ");
             assertEquals("-05:00", fdf.format(date1));
             assertEquals("-05:00", fdf.format(cal1));
+            assertEquals("-05:00", fdf.format(millis1));
 
             fdf = FastDateFormat.getInstance("ZZ");
             assertEquals("-04:00", fdf.format(date2));
             assertEquals("-04:00", fdf.format(cal2));
+            assertEquals("-04:00", fdf.format(millis2));
 
             String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                 " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
             fdf = FastDateFormat.getInstance(pattern);
             sdf = new SimpleDateFormat(pattern);
             assertEquals(sdf.format(date1), fdf.format(date1));
             assertEquals(sdf.format(date2), fdf.format(date2));
 
         } finally {
             Locale.setDefault(realDefaultLocale);
             TimeZone.setDefault(realDefaultZone);
         }
     }
 
     /**
      * Test case for {@link FastDateFormat#getDateInstance(int, java.util.Locale)}.
      */

commit 0f1efc3016187bcf24224bf1ed7199bce290fbaa
Author: Fredrik Westermarck <fredrik@apache.org>
Date:   Wed Feb 4 13:49:10 2004

    Added test case for getDateInstance(int, Locale).
    Removed whitespaces from lines that was supposed to be empty.
    
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137771 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/lang/time/FastDateFormatTest.java b/src/test/org/apache/commons/lang/time/FastDateFormatTest.java
--- a/src/test/org/apache/commons/lang/time/FastDateFormatTest.java
+++ b/src/test/org/apache/commons/lang/time/FastDateFormatTest.java
@@ -198,51 +200,54 @@
     public void testFormat() {
         Locale realDefaultLocale = Locale.getDefault();
         TimeZone realDefaultZone = TimeZone.getDefault();
         try {
             Locale.setDefault(Locale.US);
             TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
             FastDateFormat fdf = null;
             SimpleDateFormat sdf = null;
-    
+
             GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
             GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
             Date date1 = cal1.getTime();
             Date date2 = cal2.getTime();
-            
+
             fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
             sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
             assertEquals(sdf.format(date1), fdf.format(date1));
             assertEquals("2003-01-10T15:33:20", fdf.format(date1));
             assertEquals("2003-01-10T15:33:20", fdf.format(cal1));
             assertEquals("2003-07-10T09:00:00", fdf.format(date2));
             assertEquals("2003-07-10T09:00:00", fdf.format(cal2));
-            
+
             fdf = FastDateFormat.getInstance("Z");
             assertEquals("-0500", fdf.format(date1));
             assertEquals("-0500", fdf.format(cal1));
-            
+
             fdf = FastDateFormat.getInstance("Z");
             assertEquals("-0400", fdf.format(date2));
             assertEquals("-0400", fdf.format(cal2));
-            
+
             fdf = FastDateFormat.getInstance("ZZ");
             assertEquals("-05:00", fdf.format(date1));
             assertEquals("-05:00", fdf.format(cal1));
 
             fdf = FastDateFormat.getInstance("ZZ");
             assertEquals("-04:00", fdf.format(date2));
             assertEquals("-04:00", fdf.format(cal2));
-            
+
             String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
                 " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
             fdf = FastDateFormat.getInstance(pattern);
             sdf = new SimpleDateFormat(pattern);
             assertEquals(sdf.format(date1), fdf.format(date1));
             assertEquals(sdf.format(date2), fdf.format(date2));
 
         } finally {
             Locale.setDefault(realDefaultLocale);
             TimeZone.setDefault(realDefaultZone);
         }
     }
-    
+
+    /**
+     * Test case for {@link FastDateFormat#getDateInstance(int, java.util.Locale)}.
+     */

commit 9839566cf0eb6d299a61d6354522d6f65ab83af3
Author: Stephen Colebourne <scolebourne@apache.org>
Date:   Sun Jun 8 19:14:23 2003

    Rework time package in preparation for 2.0 release
    DateUtils split to DateFormatUtils and DurationFormatUtils
    CalendarUtils renamed to DateUtils
    StopWatch time format method moved to DurationFormatUtils
    Tests updated and pass
    
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/lang/time/FastDateFormatTest.java b/src/test/org/apache/commons/lang/time/FastDateFormatTest.java
--- a/src/test/org/apache/commons/lang/time/FastDateFormatTest.java
+++ b/src/test/org/apache/commons/lang/time/FastDateFormatTest.java
@@ -182,0 +199,51 @@
+    public void testFormat() {
+        Locale realDefaultLocale = Locale.getDefault();
+        TimeZone realDefaultZone = TimeZone.getDefault();
+        try {
+            Locale.setDefault(Locale.US);
+            TimeZone.setDefault(TimeZone.getTimeZone("America/New_York"));
+            FastDateFormat fdf = null;
+            SimpleDateFormat sdf = null;
+    
+            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);
+            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);
+            Date date1 = cal1.getTime();
+            Date date2 = cal2.getTime();
+            
+            fdf = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
+            sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
+            assertEquals(sdf.format(date1), fdf.format(date1));
+            assertEquals("2003-01-10T15:33:20", fdf.format(date1));
+            assertEquals("2003-01-10T15:33:20", fdf.format(cal1));
+            assertEquals("2003-07-10T09:00:00", fdf.format(date2));
+            assertEquals("2003-07-10T09:00:00", fdf.format(cal2));
+            
+            fdf = FastDateFormat.getInstance("Z");
+            assertEquals("-0500", fdf.format(date1));
+            assertEquals("-0500", fdf.format(cal1));
+            
+            fdf = FastDateFormat.getInstance("Z");
+            assertEquals("-0400", fdf.format(date2));
+            assertEquals("-0400", fdf.format(cal2));
+            
+            fdf = FastDateFormat.getInstance("ZZ");
+            assertEquals("-05:00", fdf.format(date1));
+            assertEquals("-05:00", fdf.format(cal1));
+
+            fdf = FastDateFormat.getInstance("ZZ");
+            assertEquals("-04:00", fdf.format(date2));
+            assertEquals("-04:00", fdf.format(cal2));
+            
+            String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" +
+                " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z";
+            fdf = FastDateFormat.getInstance(pattern);
+            sdf = new SimpleDateFormat(pattern);
+            assertEquals(sdf.format(date1), fdf.format(date1));
+            assertEquals(sdf.format(date2), fdf.format(date2));
+
+        } finally {
+            Locale.setDefault(realDefaultLocale);
+            TimeZone.setDefault(realDefaultZone);
+        }
+    }
+    
