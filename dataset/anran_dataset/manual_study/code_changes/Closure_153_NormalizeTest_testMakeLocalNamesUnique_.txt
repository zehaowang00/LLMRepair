commit 86caf52b53f53d8b83e9c1092f4b15ddeb6ca5bb
Author: nicksantos@google.com <nicksantos@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Thu Dec 9 15:58:52 2010

    If a variable is doubly declared in externs and sources,
    we should keep around both VAR keywords.
    Fixes issue 290
    
    R=johnlenz
    DELTA=93  (45 added, 19 deleted, 29 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=107
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@614 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/NormalizeTest.java b/test/com/google/javascript/jscomp/NormalizeTest.java
--- a/test/com/google/javascript/jscomp/NormalizeTest.java
+++ b/test/com/google/javascript/jscomp/NormalizeTest.java
@@ -225,41 +225,45 @@
   public void testMakeLocalNamesUnique() {
     if (!Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
       return;
     }
 
     // Verify global names are untouched.
     testSame("var a;");
 
     // Verify global names are untouched.
     testSame("a;");
 
     // Local names are made unique.
     test("var a;function foo(a){var b;a}",
          "var a;function foo(a$$1){var b;a$$1}");
     test("var a;function foo(){var b;a}function boo(){var b;a}",
          "var a;function foo(){var b;a}function boo(){var b$$1;a}");
     test("function foo(a){var b}" +
          "function boo(a){var b}",
          "function foo(a){var b}" +
          "function boo(a$$1){var b$$1}");
 
     // Verify function expressions are renamed.
     test("var a = function foo(){foo()};var b = function foo(){foo()};",
          "var a = function foo(){foo()};var b = function foo$$1(){foo$$1()};");
 
     // Verify catch exceptions names are made unique
     test("try { } catch(e) {e;}",
          "try { } catch(e) {e;}");
     test("try { } catch(e) {e;}; try { } catch(e) {e;}",
          "try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}");
     test("try { } catch(e) {e; try { } catch(e) {e;}};",
          "try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; ");
 
-    // Verify global redefinition of extern definition is removed.
-    test("/** @suppress {duplicate} */\nvar window;", "");
+    // Verify the 1st global redefinition of extern definition is not removed.
+    test("/** @suppress {duplicate} */\nvar window;", "var window;");
+
+    // Verify the 2nd global redefinition of extern definition is removed.
+    test("/** @suppress {duplicate} */\nvar window;" +
+         "/** @suppress {duplicate} */\nvar window;", "var window;");
 
     // Verify local masking extern made unique.
     test("function f() {var window}",
          "function f() {var window$$1}");
   }
 

commit b9bc1534921f1e98da5a373e39ea2d71a4a39175
Author: nicksantos@google.com <nicksantos@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Wed Sep 1 10:18:54 2010

    fix a nasty edge case in how we handle references in externs when
    aliasExternals is on.
    
    R=acleung
    DELTA=86  (69 added, 0 deleted, 17 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=206076
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@401 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/NormalizeTest.java b/test/com/google/javascript/jscomp/NormalizeTest.java
--- a/test/com/google/javascript/jscomp/NormalizeTest.java
+++ b/test/com/google/javascript/jscomp/NormalizeTest.java
@@ -195,41 +201,41 @@
   public void testMakeLocalNamesUnique() {
     if (!Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
       return;
     }
 
     // Verify global names are untouched.
     testSame("var a;");
 
     // Verify global names are untouched.
     testSame("a;");
 
     // Local names are made unique.
     test("var a;function foo(a){var b;a}",
          "var a;function foo(a$$1){var b;a$$1}");
     test("var a;function foo(){var b;a}function boo(){var b;a}",
          "var a;function foo(){var b;a}function boo(){var b$$1;a}");
     test("function foo(a){var b}" +
          "function boo(a){var b}",
          "function foo(a){var b}" +
          "function boo(a$$1){var b$$1}");
 
     // Verify function expressions are renamed.
     test("var a = function foo(){foo()};var b = function foo(){foo()};",
          "var a = function foo(){foo()};var b = function foo$$1(){foo$$1()};");
 
     // Verify catch exceptions names are made unique
     test("try { } catch(e) {e;}",
          "try { } catch(e) {e;}");
     test("try { } catch(e) {e;}; try { } catch(e) {e;}",
          "try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}");
     test("try { } catch(e) {e; try { } catch(e) {e;}};",
          "try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; ");
 
-    // Verify global redefinition of extern definition is left alone.
-    testSame("/** @suppress {duplicate} */\nvar window;");
+    // Verify global redefinition of extern definition is removed.
+    test("/** @suppress {duplicate} */\nvar window;", "");
 
     // Verify local masking extern made unique.
     test("function f() {var window}",
          "function f() {var window$$1}");
   }
 

commit ebb59a97610015bc41bda7f458dd1428a3a3e335
Author: Nicholas.J.Santos <Nicholas.J.Santos@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Fri Apr 23 14:31:48 2010

    Change on 2010/04/22 by nick
    
            fix the extern definition of Window.prototype.stop
    
            R=siggy
            DELTA=1  (0 added, 0 deleted, 1 changed)
    
    Change on 2010/04/22 by john
    
            "Anonymous function" is a confusing term for functions with names.
            Properly we are usually distinguishing between functions statements
            (function declarations) and function expressions.
    
            R=alan
            DELTA=172  (7 added, 14 deleted, 151 changed)
    
    Change on 2010/04/22 by john
    
            Standardize the definition of setTimeout/setInterval.
            Fix for Issue 137
    
            R=nick
            DELTA=6  (2 added, 2 deleted, 2 changed)
    
    Change on 2010/04/22 by mark
    
            Various delegate fixes.
    
            Give the delegate proxy a name unique from the delegate base so that
            InstanceObjectType#equals distinguishes them. This is necessary for
            AmbiguateProperties to work.
    
            Fix the prototype of the delegate proxy. This makes
            DisambiguateProperties continue to work.
    
            Add superclass methods of the delegate base to the delegate proxy.
    
    
            R=andrew,nada
            DELTA=526  (383 added, 104 deleted, 39 changed)
    
    Change on 2010/04/23 by john
    
            Allow variable inlining of function statements. For simplicity  limited to functions defined before first use.
    
            R=nick
            DELTA=79  (49 added, 3 deleted, 27 changed)
    
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=hakjvx
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@197 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/NormalizeTest.java b/test/com/google/javascript/jscomp/NormalizeTest.java
--- a/test/com/google/javascript/jscomp/NormalizeTest.java
+++ b/test/com/google/javascript/jscomp/NormalizeTest.java
@@ -194,41 +194,41 @@
   public void testMakeLocalNamesUnique() {
     if (!Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
       return;
     }
 
     // Verify global names are untouched.
     testSame("var a;");
 
     // Verify global names are untouched.
     testSame("a;");
 
     // Local names are made unique.
     test("var a;function foo(a){var b;a}",
          "var a;function foo(a$$1){var b;a$$1}");
     test("var a;function foo(){var b;a}function boo(){var b;a}",
          "var a;function foo(){var b;a}function boo(){var b$$1;a}");
     test("function foo(a){var b}" +
          "function boo(a){var b}",
          "function foo(a){var b}" +
          "function boo(a$$1){var b$$1}");
 
-    // Verify anonymous functions are renamed.
+    // Verify function expressions are renamed.
     test("var a = function foo(){foo()};var b = function foo(){foo()};",
          "var a = function foo(){foo()};var b = function foo$$1(){foo$$1()};");
 
     // Verify catch exceptions names are made unique
     test("try { } catch(e) {e;}",
          "try { } catch(e) {e;}");
     test("try { } catch(e) {e;}; try { } catch(e) {e;}",
          "try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}");
     test("try { } catch(e) {e; try { } catch(e) {e;}};",
          "try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; ");
 
     // Verify global redefinition of extern definition is left alone.
     testSame("/** @suppress {duplicate} */\nvar window;");
 
     // Verify local masking extern made unique.
     test("function f() {var window}",
          "function f() {var window$$1}");
   }
 

commit 14ddcfdc0b8d1cece3c79221b1870b84f055d419
Author: nicholas.j.santos@gmail.com <nicholas.j.santos@gmail.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Thu Dec 17 19:20:09 2009

    Change the internal representation of constant variables.
    
    Run inline-variables before smart-name-removal.
    
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@37 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/NormalizeTest.java b/test/com/google/javascript/jscomp/NormalizeTest.java
--- a/test/com/google/javascript/jscomp/NormalizeTest.java
+++ b/test/com/google/javascript/jscomp/NormalizeTest.java
@@ -147,41 +147,41 @@
   public void testMakeLocalNamesUnique() {
     if (!Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
       return;
     }
 
     // Verify global names are untouched.
     testSame("var a;");
 
     // Verify global names are untouched.
     testSame("a;");
 
     // Local names are made unique.
     test("var a;function foo(a){var b;a}",
          "var a;function foo(a$$1){var b;a$$1}");
     test("var a;function foo(){var b;a}function boo(){var b;a}",
          "var a;function foo(){var b;a}function boo(){var b$$1;a}");
     test("function foo(a){var b}" +
          "function boo(a){var b}",
          "function foo(a){var b}" +
          "function boo(a$$1){var b$$1}");
 
     // Verify anonymous functions are renamed.
     test("var a = function foo(){foo()};var b = function foo(){foo()};",
          "var a = function foo(){foo()};var b = function foo$$1(){foo$$1()};");
 
     // Verify catch exceptions names are made unique
     test("try { } catch(e) {e;}",
          "try { } catch(e) {e;}");
     test("try { } catch(e) {e;}; try { } catch(e) {e;}",
          "try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}");
     test("try { } catch(e) {e; try { } catch(e) {e;}};",
          "try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; ");
 
     // Verify global redefinition of extern definition is left alone.
-    testSame("var window");
+    testSame("/** @suppress {duplicate} */\nvar window;");
 
     // Verify local masking extern made unique.
     test("function f() {var window}",
          "function f() {var window$$1}");
   }
 

commit 168bc14ff5e9e664863c3b1146f2a5b7a30ffb42
Author: nicholas.j.santos@gmail.com <nicholas.j.santos@gmail.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Fri Dec 11 18:29:29 2009

    Add a pass for collecting symbols exported like window['x'] = ...
    
    Fix for issue #70.
    
    Assorted minor bug fixes.
    
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@31 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/NormalizeTest.java b/test/com/google/javascript/jscomp/NormalizeTest.java
--- a/test/com/google/javascript/jscomp/NormalizeTest.java
+++ b/test/com/google/javascript/jscomp/NormalizeTest.java
@@ -140,34 +147,41 @@
   public void testMakeLocalNamesUnique() {
     if (!Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
       return;
     }
 
     // Verify global names are untouched.
     testSame("var a;");
 
     // Verify global names are untouched.
     testSame("a;");
 
     // Local names are made unique.
     test("var a;function foo(a){var b;a}",
          "var a;function foo(a$$1){var b;a$$1}");
     test("var a;function foo(){var b;a}function boo(){var b;a}",
          "var a;function foo(){var b;a}function boo(){var b$$1;a}");
     test("function foo(a){var b}" +
          "function boo(a){var b}",
          "function foo(a){var b}" +
          "function boo(a$$1){var b$$1}");
 
     // Verify anonymous functions are renamed.
     test("var a = function foo(){foo()};var b = function foo(){foo()};",
          "var a = function foo(){foo()};var b = function foo$$1(){foo$$1()};");
 
     // Verify catch exceptions names are made unique
     test("try { } catch(e) {e;}",
          "try { } catch(e) {e;}");
     test("try { } catch(e) {e;}; try { } catch(e) {e;}",
          "try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}");
     test("try { } catch(e) {e; try { } catch(e) {e;}};",
          "try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; ");
+
+    // Verify global redefinition of extern definition is left alone.
+    testSame("var window");
+
+    // Verify local masking extern made unique.
+    test("function f() {var window}",
+         "function f() {var window$$1}");
   }
 

commit 6b49cfd9022fe111bdad745c78ea877fbc2f7ba3
Author: nicholas.j.santos@gmail.com <nicholas.j.santos@gmail.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Tue Nov 3 18:51:57 2009

    Initial commit.
    
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/NormalizeTest.java b/test/com/google/javascript/jscomp/NormalizeTest.java
--- /dev/null
+++ b/test/com/google/javascript/jscomp/NormalizeTest.java
@@ -0,0 +130,34 @@
+  public void testMakeLocalNamesUnique() {
+    if (!Normalize.MAKE_LOCAL_NAMES_UNIQUE) {
+      return;
+    }
+
+    // Verify global names are untouched.
+    testSame("var a;");
+
+    // Verify global names are untouched.
+    testSame("a;");
+
+    // Local names are made unique.
+    test("var a;function foo(a){var b;a}",
+         "var a;function foo(a$$1){var b;a$$1}");
+    test("var a;function foo(){var b;a}function boo(){var b;a}",
+         "var a;function foo(){var b;a}function boo(){var b$$1;a}");
+    test("function foo(a){var b}" +
+         "function boo(a){var b}",
+         "function foo(a){var b}" +
+         "function boo(a$$1){var b$$1}");
+
+    // Verify anonymous functions are renamed.
+    test("var a = function foo(){foo()};var b = function foo(){foo()};",
+         "var a = function foo(){foo()};var b = function foo$$1(){foo$$1()};");
+
+    // Verify catch exceptions names are made unique
+    test("try { } catch(e) {e;}",
+         "try { } catch(e) {e;}");
+    test("try { } catch(e) {e;}; try { } catch(e) {e;}",
+         "try { } catch(e) {e;}; try { } catch(e$$1) {e$$1;}");
+    test("try { } catch(e) {e; try { } catch(e) {e;}};",
+         "try { } catch(e) {e; try { } catch(e$$1) {e$$1;} }; ");
+  }
+
