commit f052908ec90e12bdc6b67915ef2290aa9eefa48b
Author: fabse <fab@fabiankoehler.de>
Date:   Tue Apr 30 03:27:01 2013

    Make http charset detection code more robust
    
    Fixes #321

diff --git a/src/test/java/org/jsoup/helper/DataUtilTest.java b/src/test/java/org/jsoup/helper/DataUtilTest.java
index a810ac75..3db6d2a3 100644
--- a/src/test/java/org/jsoup/helper/DataUtilTest.java
+++ b/src/test/java/org/jsoup/helper/DataUtilTest.java
@@ -1,7 +1,5 @@
 package org.jsoup.helper;
 
-import static org.junit.Assert.assertEquals;
-
 import org.jsoup.nodes.Document;
 import org.jsoup.parser.Parser;
 import org.junit.Test;
@@ -9,6 +7,8 @@
 import java.nio.ByteBuffer;
 import java.nio.charset.Charset;
 
+import static org.junit.Assert.assertEquals;
+
 public class DataUtilTest {
     @Test
     public void testCharset() {
@@ -25,12 +25,35 @@ public void testCharset() {
         assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html;charset=\"UTF-8\""));
         assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=\"ISO-8859-1\""));
         assertEquals(null, DataUtil.getCharsetFromContentType("text/html; charset=\"Unsupported\""));
+        assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html; charset='UTF-8'"));
     }
-    
+
     @Test public void discardsSpuriousByteOrderMark() {
         String html = "\uFEFF<html><head><title>One</title></head><body>Two</body></html>";
         ByteBuffer buffer = Charset.forName("UTF-8").encode(html);
         Document doc = DataUtil.parseByteData(buffer, "UTF-8", "http://foo.com/", Parser.htmlParser());
         assertEquals("One", doc.head().text());
     }
+
+    @Test
+    public void shouldNotThrowExceptionOnEmptyCharset() {
+        assertEquals(null, DataUtil.getCharsetFromContentType("text/html; charset="));
+        assertEquals(null, DataUtil.getCharsetFromContentType("text/html; charset=;"));
+    }
+
+    @Test
+    public void shouldSelectFirstCharsetOnWeirdMultileCharsetsInMetaTags() {
+        assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=ISO-8859-1, charset=1251"));
+    }
+
+    @Test
+    public void shouldCorrectCharsetForDuplicateCharsetString() {
+        assertEquals("iso-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=charset=iso-8859-1"));
+    }
+
+    @Test
+    public void shouldReturnNullForIllegalCharsetNames() {
+        assertEquals(null, DataUtil.getCharsetFromContentType("text/html; charset=$HJKDFÂ§$/("));
+    }
+
 }
