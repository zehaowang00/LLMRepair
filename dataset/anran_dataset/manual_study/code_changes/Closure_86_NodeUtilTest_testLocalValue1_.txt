commit 0907b6618a60b2de23c8f7ec2217a37dc5e9a091
Author: nicksantos@google.com <nicksantos@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Fri Dec 17 19:47:28 2010

    Fix improper analysis of NEW, the bad way:
    by assuming NEW always returns a non-local result.
    Fixes issue 303.
    
    R=johnlenz
    DELTA=68  (56 added, 0 deleted, 12 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=161
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@647 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/NodeUtilTest.java b/test/com/google/javascript/jscomp/NodeUtilTest.java
--- a/test/com/google/javascript/jscomp/NodeUtilTest.java
+++ b/test/com/google/javascript/jscomp/NodeUtilTest.java
@@ -1014,96 +1014,97 @@
   public void testLocalValue1() throws Exception {
     // Names are not known to be local.
     assertFalse(testLocalValue("x"));
     assertFalse(testLocalValue("x()"));
     assertFalse(testLocalValue("this"));
     assertFalse(testLocalValue("arguments"));
 
-    // new objects are local
-    assertTrue(testLocalValue("new x()"));
+    // We can't know if new objects are local unless we know
+    // that they don't alias themselves.
+    assertFalse(testLocalValue("new x()"));
 
     // property references are assume to be non-local
     assertFalse(testLocalValue("(new x()).y"));
     assertFalse(testLocalValue("(new x())['y']"));
 
     // Primitive values are local
     assertTrue(testLocalValue("null"));
     assertTrue(testLocalValue("undefined"));
     assertTrue(testLocalValue("Infinity"));
     assertTrue(testLocalValue("NaN"));
     assertTrue(testLocalValue("1"));
     assertTrue(testLocalValue("'a'"));
     assertTrue(testLocalValue("true"));
     assertTrue(testLocalValue("false"));
     assertTrue(testLocalValue("[]"));
     assertTrue(testLocalValue("{}"));
 
     // The contents of arrays and objects don't matter
     assertTrue(testLocalValue("[x]"));
     assertTrue(testLocalValue("{'a':x}"));
 
     // Pre-increment results in primitive number
     assertTrue(testLocalValue("++x"));
     assertTrue(testLocalValue("--x"));
 
     // Post-increment, the previous value matters.
     assertFalse(testLocalValue("x++"));
     assertFalse(testLocalValue("x--"));
 
     // The left side of an only assign matters if it is an alias or mutable.
     assertTrue(testLocalValue("x=1"));
     assertFalse(testLocalValue("x=[]"));
     assertFalse(testLocalValue("x=y"));
     // The right hand side of assignment opts don't matter, as they force
     // a local result.
     assertTrue(testLocalValue("x+=y"));
     assertTrue(testLocalValue("x*=y"));
     // Comparisons always result in locals, as they force a local boolean
     // result.
     assertTrue(testLocalValue("x==y"));
     assertTrue(testLocalValue("x!=y"));
     assertTrue(testLocalValue("x>y"));
     // Only the right side of a comma matters
     assertTrue(testLocalValue("(1,2)"));
     assertTrue(testLocalValue("(x,1)"));
     assertFalse(testLocalValue("(x,y)"));
 
     // Both the operands of OR matter
     assertTrue(testLocalValue("1||2"));
     assertFalse(testLocalValue("x||1"));
     assertFalse(testLocalValue("x||y"));
     assertFalse(testLocalValue("1||y"));
 
     // Both the operands of AND matter
     assertTrue(testLocalValue("1&&2"));
     assertFalse(testLocalValue("x&&1"));
     assertFalse(testLocalValue("x&&y"));
     assertFalse(testLocalValue("1&&y"));
 
     // Only the results of HOOK matter
     assertTrue(testLocalValue("x?1:2"));
     assertFalse(testLocalValue("x?x:2"));
     assertFalse(testLocalValue("x?1:x"));
     assertFalse(testLocalValue("x?x:y"));
 
     // Results of ops are local values
     assertTrue(testLocalValue("!y"));
     assertTrue(testLocalValue("~y"));
     assertTrue(testLocalValue("y + 1"));
     assertTrue(testLocalValue("y + z"));
     assertTrue(testLocalValue("y * z"));
 
     assertTrue(testLocalValue("'a' in x"));
     assertTrue(testLocalValue("typeof x"));
     assertTrue(testLocalValue("x instanceof y"));
 
     assertTrue(testLocalValue("void x"));
     assertTrue(testLocalValue("void 0"));
 
     assertFalse(testLocalValue("{}.x"));
 
     assertTrue(testLocalValue("{}.toString()"));
     assertTrue(testLocalValue("o.toString()"));
 
     assertFalse(testLocalValue("o.valueOf()"));
   }
 

commit ef332935817a940ca10d1ce431d8a2037fe59ac9
Author: johnlenz@google.com <johnlenz@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Mon Nov 29 16:42:47 2010

    Assume "toString" and "valueOf" are side-effect free and "toString"
    returns a string.
    
    R=nicksantos
    DELTA=39  (36 added, 0 deleted, 3 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=17
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@571 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/NodeUtilTest.java b/test/com/google/javascript/jscomp/NodeUtilTest.java
--- a/test/com/google/javascript/jscomp/NodeUtilTest.java
+++ b/test/com/google/javascript/jscomp/NodeUtilTest.java
@@ -968,91 +977,96 @@
   public void testLocalValue1() throws Exception {
     // Names are not known to be local.
     assertFalse(testLocalValue("x"));
     assertFalse(testLocalValue("x()"));
     assertFalse(testLocalValue("this"));
     assertFalse(testLocalValue("arguments"));
 
     // new objects are local
     assertTrue(testLocalValue("new x()"));
 
     // property references are assume to be non-local
     assertFalse(testLocalValue("(new x()).y"));
     assertFalse(testLocalValue("(new x())['y']"));
 
     // Primitive values are local
     assertTrue(testLocalValue("null"));
     assertTrue(testLocalValue("undefined"));
     assertTrue(testLocalValue("Infinity"));
     assertTrue(testLocalValue("NaN"));
     assertTrue(testLocalValue("1"));
     assertTrue(testLocalValue("'a'"));
     assertTrue(testLocalValue("true"));
     assertTrue(testLocalValue("false"));
     assertTrue(testLocalValue("[]"));
     assertTrue(testLocalValue("{}"));
 
     // The contents of arrays and objects don't matter
     assertTrue(testLocalValue("[x]"));
     assertTrue(testLocalValue("{'a':x}"));
 
     // Pre-increment results in primitive number
     assertTrue(testLocalValue("++x"));
     assertTrue(testLocalValue("--x"));
 
     // Post-increment, the previous value matters.
     assertFalse(testLocalValue("x++"));
     assertFalse(testLocalValue("x--"));
 
     // The left side of an only assign matters if it is an alias or mutable.
     assertTrue(testLocalValue("x=1"));
     assertFalse(testLocalValue("x=[]"));
     assertFalse(testLocalValue("x=y"));
     // The right hand side of assignment opts don't matter, as they force
     // a local result.
     assertTrue(testLocalValue("x+=y"));
     assertTrue(testLocalValue("x*=y"));
     // Comparisons always result in locals, as they force a local boolean
     // result.
     assertTrue(testLocalValue("x==y"));
     assertTrue(testLocalValue("x!=y"));
     assertTrue(testLocalValue("x>y"));
     // Only the right side of a comma matters
     assertTrue(testLocalValue("(1,2)"));
     assertTrue(testLocalValue("(x,1)"));
     assertFalse(testLocalValue("(x,y)"));
 
     // Both the operands of OR matter
     assertTrue(testLocalValue("1||2"));
     assertFalse(testLocalValue("x||1"));
     assertFalse(testLocalValue("x||y"));
     assertFalse(testLocalValue("1||y"));
 
     // Both the operands of AND matter
     assertTrue(testLocalValue("1&&2"));
     assertFalse(testLocalValue("x&&1"));
     assertFalse(testLocalValue("x&&y"));
     assertFalse(testLocalValue("1&&y"));
 
     // Only the results of HOOK matter
     assertTrue(testLocalValue("x?1:2"));
     assertFalse(testLocalValue("x?x:2"));
     assertFalse(testLocalValue("x?1:x"));
     assertFalse(testLocalValue("x?x:y"));
 
     // Results of ops are local values
     assertTrue(testLocalValue("!y"));
     assertTrue(testLocalValue("~y"));
     assertTrue(testLocalValue("y + 1"));
     assertTrue(testLocalValue("y + z"));
     assertTrue(testLocalValue("y * z"));
 
     assertTrue(testLocalValue("'a' in x"));
     assertTrue(testLocalValue("typeof x"));
     assertTrue(testLocalValue("x instanceof y"));
 
     assertTrue(testLocalValue("void x"));
     assertTrue(testLocalValue("void 0"));
-    
+
     assertFalse(testLocalValue("{}.x"));
+
+    assertTrue(testLocalValue("{}.toString()"));
+    assertTrue(testLocalValue("o.toString()"));
+
+    assertFalse(testLocalValue("o.valueOf()"));
   }
 

commit 6a2378d43d1f06344f6418388d45c66fe3466a07
Author: johnlenz@google.com <johnlenz@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Mon Sep 27 19:16:58 2010

    Take advantage of the finer grain side-effect information when
    determining side-effects.
    The bulk of the changes here are the move of the "isKnownLocalValue"
    function and its tests from to NodeUtil/NodeUtilTest.
    
    R=nicksantos
    DELTA=664  (419 added, 201 deleted, 44 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=260873
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@466 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/NodeUtilTest.java b/test/com/google/javascript/jscomp/NodeUtilTest.java
--- a/test/com/google/javascript/jscomp/NodeUtilTest.java
+++ b/test/com/google/javascript/jscomp/NodeUtilTest.java
@@ -961,0 +967,91 @@
+  public void testLocalValue1() throws Exception {
+    // Names are not known to be local.
+    assertFalse(testLocalValue("x"));
+    assertFalse(testLocalValue("x()"));
+    assertFalse(testLocalValue("this"));
+    assertFalse(testLocalValue("arguments"));
+
+    // new objects are local
+    assertTrue(testLocalValue("new x()"));
+
+    // property references are assume to be non-local
+    assertFalse(testLocalValue("(new x()).y"));
+    assertFalse(testLocalValue("(new x())['y']"));
+
+    // Primitive values are local
+    assertTrue(testLocalValue("null"));
+    assertTrue(testLocalValue("undefined"));
+    assertTrue(testLocalValue("Infinity"));
+    assertTrue(testLocalValue("NaN"));
+    assertTrue(testLocalValue("1"));
+    assertTrue(testLocalValue("'a'"));
+    assertTrue(testLocalValue("true"));
+    assertTrue(testLocalValue("false"));
+    assertTrue(testLocalValue("[]"));
+    assertTrue(testLocalValue("{}"));
+
+    // The contents of arrays and objects don't matter
+    assertTrue(testLocalValue("[x]"));
+    assertTrue(testLocalValue("{'a':x}"));
+
+    // Pre-increment results in primitive number
+    assertTrue(testLocalValue("++x"));
+    assertTrue(testLocalValue("--x"));
+
+    // Post-increment, the previous value matters.
+    assertFalse(testLocalValue("x++"));
+    assertFalse(testLocalValue("x--"));
+
+    // The left side of an only assign matters if it is an alias or mutable.
+    assertTrue(testLocalValue("x=1"));
+    assertFalse(testLocalValue("x=[]"));
+    assertFalse(testLocalValue("x=y"));
+    // The right hand side of assignment opts don't matter, as they force
+    // a local result.
+    assertTrue(testLocalValue("x+=y"));
+    assertTrue(testLocalValue("x*=y"));
+    // Comparisons always result in locals, as they force a local boolean
+    // result.
+    assertTrue(testLocalValue("x==y"));
+    assertTrue(testLocalValue("x!=y"));
+    assertTrue(testLocalValue("x>y"));
+    // Only the right side of a comma matters
+    assertTrue(testLocalValue("(1,2)"));
+    assertTrue(testLocalValue("(x,1)"));
+    assertFalse(testLocalValue("(x,y)"));
+
+    // Both the operands of OR matter
+    assertTrue(testLocalValue("1||2"));
+    assertFalse(testLocalValue("x||1"));
+    assertFalse(testLocalValue("x||y"));
+    assertFalse(testLocalValue("1||y"));
+
+    // Both the operands of AND matter
+    assertTrue(testLocalValue("1&&2"));
+    assertFalse(testLocalValue("x&&1"));
+    assertFalse(testLocalValue("x&&y"));
+    assertFalse(testLocalValue("1&&y"));
+
+    // Only the results of HOOK matter
+    assertTrue(testLocalValue("x?1:2"));
+    assertFalse(testLocalValue("x?x:2"));
+    assertFalse(testLocalValue("x?1:x"));
+    assertFalse(testLocalValue("x?x:y"));
+
+    // Results of ops are local values
+    assertTrue(testLocalValue("!y"));
+    assertTrue(testLocalValue("~y"));
+    assertTrue(testLocalValue("y + 1"));
+    assertTrue(testLocalValue("y + z"));
+    assertTrue(testLocalValue("y * z"));
+
+    assertTrue(testLocalValue("'a' in x"));
+    assertTrue(testLocalValue("typeof x"));
+    assertTrue(testLocalValue("x instanceof y"));
+
+    assertTrue(testLocalValue("void x"));
+    assertTrue(testLocalValue("void 0"));
+    
+    assertFalse(testLocalValue("{}.x"));
+  }
+
