commit 3c2c9610b6c76e2b348eb057d0a8268681d573a6
Author: Tatu Saloranta <tatu.saloranta@iki.fi>
Date:   Tue Mar 8 02:01:17 2016

    Fix #255

diff --git a/src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java b/src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java
--- a/src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java
+++ b/src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java
@@ -9,85 +9,85 @@
     public void testAllocations() throws Exception
     {
         IOContext ctxt = new IOContext(new BufferRecycler(), "N/A", true);
 
         /* I/O Read buffer */
 
         // First succeeds:
         assertNotNull(ctxt.allocReadIOBuffer());
         // second fails
         try {
             ctxt.allocReadIOBuffer();
         } catch (IllegalStateException e) {
             verifyException(e, "second time");
         }
         // Also: can't succeed with different buffer
         try {
             ctxt.releaseReadIOBuffer(new byte[1]);
         } catch (IllegalArgumentException e) {
-            verifyException(e, "not owned");
+            verifyException(e, "smaller than original");
         }
         // but call with null is a NOP for convenience
         ctxt.releaseReadIOBuffer(null);
 
         /* I/O Write buffer */
 
         assertNotNull(ctxt.allocWriteEncodingBuffer());
         try {
             ctxt.allocWriteEncodingBuffer();
         } catch (IllegalStateException e) {
             verifyException(e, "second time");
         }
         try {
             ctxt.releaseWriteEncodingBuffer(new byte[1]);
         } catch (IllegalArgumentException e) {
-            verifyException(e, "not owned");
+            verifyException(e, "smaller than original");
         }
         ctxt.releaseWriteEncodingBuffer(null);
 
         /* Token (read) buffer */
 
         assertNotNull(ctxt.allocTokenBuffer());
         try {
             ctxt.allocTokenBuffer();
         } catch (IllegalStateException e) {
             verifyException(e, "second time");
         }
         try {
             ctxt.releaseTokenBuffer(new char[1]);
         } catch (IllegalArgumentException e) {
-            verifyException(e, "not owned");
+            verifyException(e, "smaller than original");
         }
         ctxt.releaseTokenBuffer(null);
 
         /* Concat (write?) buffer */
 
         assertNotNull(ctxt.allocConcatBuffer());
         try {
             ctxt.allocConcatBuffer();
         } catch (IllegalStateException e) {
             verifyException(e, "second time");
         }
         try {
             ctxt.releaseConcatBuffer(new char[1]);
         } catch (IllegalArgumentException e) {
-            verifyException(e, "not owned");
+            verifyException(e, "smaller than original");
         }
         ctxt.releaseConcatBuffer(null);
 
         /* NameCopy (write?) buffer */
 
         assertNotNull(ctxt.allocNameCopyBuffer(100));
         try {
             ctxt.allocNameCopyBuffer(100);
         } catch (IllegalStateException e) {
             verifyException(e, "second time");
         }
         try {
             ctxt.releaseNameCopyBuffer(new char[1]);
         } catch (IllegalArgumentException e) {
-            verifyException(e, "not owned");
+            verifyException(e, "smaller than original");
         }
         ctxt.releaseNameCopyBuffer(null);
     }
 }
 

commit 5ff8a2d9a72f0741f9465bf7f04584a3c3e8c28f
Author: Tatu Saloranta <tsaloranta@gmail.com>
Date:   Sat Dec 24 00:52:24 2011

    Add unit tests from 1.x, all but 2 passing

diff --git a/src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java b/src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java
--- /dev/null
+++ b/src/test/java/com/fasterxml/jackson/core/io/TestIOContext.java
@@ -0,0 +9,85 @@
+    public void testAllocations() throws Exception
+    {
+        IOContext ctxt = new IOContext(new BufferRecycler(), "N/A", true);
+
+        /* I/O Read buffer */
+
+        // First succeeds:
+        assertNotNull(ctxt.allocReadIOBuffer());
+        // second fails
+        try {
+            ctxt.allocReadIOBuffer();
+        } catch (IllegalStateException e) {
+            verifyException(e, "second time");
+        }
+        // Also: can't succeed with different buffer
+        try {
+            ctxt.releaseReadIOBuffer(new byte[1]);
+        } catch (IllegalArgumentException e) {
+            verifyException(e, "not owned");
+        }
+        // but call with null is a NOP for convenience
+        ctxt.releaseReadIOBuffer(null);
+
+        /* I/O Write buffer */
+
+        assertNotNull(ctxt.allocWriteEncodingBuffer());
+        try {
+            ctxt.allocWriteEncodingBuffer();
+        } catch (IllegalStateException e) {
+            verifyException(e, "second time");
+        }
+        try {
+            ctxt.releaseWriteEncodingBuffer(new byte[1]);
+        } catch (IllegalArgumentException e) {
+            verifyException(e, "not owned");
+        }
+        ctxt.releaseWriteEncodingBuffer(null);
+
+        /* Token (read) buffer */
+
+        assertNotNull(ctxt.allocTokenBuffer());
+        try {
+            ctxt.allocTokenBuffer();
+        } catch (IllegalStateException e) {
+            verifyException(e, "second time");
+        }
+        try {
+            ctxt.releaseTokenBuffer(new char[1]);
+        } catch (IllegalArgumentException e) {
+            verifyException(e, "not owned");
+        }
+        ctxt.releaseTokenBuffer(null);
+
+        /* Concat (write?) buffer */
+
+        assertNotNull(ctxt.allocConcatBuffer());
+        try {
+            ctxt.allocConcatBuffer();
+        } catch (IllegalStateException e) {
+            verifyException(e, "second time");
+        }
+        try {
+            ctxt.releaseConcatBuffer(new char[1]);
+        } catch (IllegalArgumentException e) {
+            verifyException(e, "not owned");
+        }
+        ctxt.releaseConcatBuffer(null);
+
+        /* NameCopy (write?) buffer */
+
+        assertNotNull(ctxt.allocNameCopyBuffer(100));
+        try {
+            ctxt.allocNameCopyBuffer(100);
+        } catch (IllegalStateException e) {
+            verifyException(e, "second time");
+        }
+        try {
+            ctxt.releaseNameCopyBuffer(new char[1]);
+        } catch (IllegalArgumentException e) {
+            verifyException(e, "not owned");
+        }
+        ctxt.releaseNameCopyBuffer(null);
+    }
+}
+
