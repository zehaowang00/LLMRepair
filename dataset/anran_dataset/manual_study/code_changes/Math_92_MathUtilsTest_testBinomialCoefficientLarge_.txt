commit 85a8ab2dcfc26e83be1514acdb11d3feaac3e73d
Author: Phil Steitz <psteitz@apache.org>
Date:   Mon Jan 19 18:52:02 2009

    Fixed error in binomial coefficient computation
    JIRA: MATH-241
    Reported and patched by Christian Semrau
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@735879 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/util/MathUtilsTest.java b/src/test/org/apache/commons/math/util/MathUtilsTest.java
--- a/src/test/org/apache/commons/math/util/MathUtilsTest.java
+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java
@@ -144,8 +176,51 @@
-        /*
-         * Takes a long time for recursion to unwind, but succeeds and yields
-         * exact value = 2,333,606,220
-         * assertEquals(MathUtils.binomialCoefficient(34,17),
-         * binomialCoefficient(34,17));
-         */
+    public void testBinomialCoefficientLarge() throws Exception {
+        // This tests all legal and illegal values for n <= 200.
+        for (int n = 0; n <= 200; n++) {
+            for (int k = 0; k <= n; k++) {
+                long ourResult = -1;
+                long exactResult = -1;
+                boolean shouldThrow = false;
+                boolean didThrow = false;
+                try {
+                    ourResult = MathUtils.binomialCoefficient(n, k);
+                } catch (ArithmeticException ex) {
+                    didThrow = true;
+                }
+                try {
+                    exactResult = binomialCoefficient(n, k);
+                } catch (ArithmeticException ex) {
+                    shouldThrow = true;
+                }
+                assertEquals(n+","+k, shouldThrow, didThrow);
+                assertEquals(n+","+k, exactResult, ourResult);
+                assertTrue(n+","+k, (n > 66 || !didThrow));
+            }
+        }
+
+        long ourResult = MathUtils.binomialCoefficient(300, 3);
+        long exactResult = binomialCoefficient(300, 3);
+        assertEquals(exactResult, ourResult);
+
+        ourResult = MathUtils.binomialCoefficient(700, 697);
+        exactResult = binomialCoefficient(700, 697);
+        assertEquals(exactResult, ourResult);
+
+        // This one should throw
+        try {
+            MathUtils.binomialCoefficient(700, 300);
+            fail("Expecting ArithmeticException");
+        } catch (ArithmeticException ex) {
+            // Expected
+        }
+
+        // Larger values cannot be computed directly by our
+        // test implementation because of stack limitations,
+        // so we make little jumps to fill the cache.
+        for (int i = 2000; i <= 10000; i += 2000) {
+            ourResult = MathUtils.binomialCoefficient(i, 3);
+            exactResult = binomialCoefficient(i, 3);
+            assertEquals(exactResult, ourResult);
+        }
+
     }
 

commit 430f487ebc550a07ed2f06a758cd2dd480669fc9
Author: Brent Worden <brentworden@apache.org>
Date:   Wed Oct 31 03:23:01 2007

    MATH-154. Added addAndCheck, mulAndCheck, and subAndCheck MathUtils methods for long integer arguments.
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@590577 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/util/MathUtilsTest.java b/src/test/org/apache/commons/math/util/MathUtilsTest.java
--- a/src/test/org/apache/commons/math/util/MathUtilsTest.java
+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java
@@ -119,17 +143,8 @@
-      
-      /* 
-       * Takes a long time for recursion to unwind, but succeeds 
-       * and yields exact value = 2,333,606,220
-        
-        assertEquals(MathUtils.binomialCoefficient(34,17),
-            binomialCoefficient(34,17));
-       */
-    }
-    
-    /** Verify that b(0,0) = 1 */
-    public void test0Choose0() {
-        assertEquals(MathUtils.binomialCoefficientDouble(0, 0), 1d, 0);
-        assertEquals(MathUtils.binomialCoefficientLog(0, 0), 0d, 0);
-        assertEquals(MathUtils.binomialCoefficient(0, 0), 1);
+        /*
+         * Takes a long time for recursion to unwind, but succeeds and yields
+         * exact value = 2,333,606,220
+         * assertEquals(MathUtils.binomialCoefficient(34,17),
+         * binomialCoefficient(34,17));
+         */
     }
-    
+

commit b71d09ea4a1af895b965a703b5048d3cadba53d9
Author: Phil Steitz <psteitz@apache.org>
Date:   Sun May 9 00:36:09 2004

    Changed binomial coeffient computations to allow n = k = 0,
    returning 1 in this case.  This is standard and also required
    for degenerate hypergeometric distribution computations.
    
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141217 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/util/MathUtilsTest.java b/src/test/org/apache/commons/math/util/MathUtilsTest.java
--- a/src/test/org/apache/commons/math/util/MathUtilsTest.java
+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java
@@ -68,10 +66,17 @@
       
       /* 
        * Takes a long time for recursion to unwind, but succeeds 
        * and yields exact value = 2,333,606,220
         
         assertEquals(MathUtils.binomialCoefficient(34,17),
             binomialCoefficient(34,17));
        */
     }
     
+    /** Verify that b(0,0) = 1 */
+    public void test0Choose0() {
+        assertEquals(MathUtils.binomialCoefficientDouble(0, 0), 1d, 0);
+        assertEquals(MathUtils.binomialCoefficientLog(0, 0), 0d, 0);
+        assertEquals(MathUtils.binomialCoefficient(0, 0), 1);
+    }
+    

commit 0a904461932f2c0455611e77ec6a8d8aced2980b
Author: Mark R. Diggory <mdiggory@apache.org>
Date:   Fri Nov 14 17:25:28 2003

    Attempting to recover last revision.
    
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141013 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/util/MathUtilsTest.java b/src/test/org/apache/commons/math/util/MathUtilsTest.java
--- /dev/null
+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java
@@ -0,0 +104,10 @@
+      
+      /* 
+       * Takes a long time for recursion to unwind, but succeeds 
+       * and yields exact value = 2,333,606,220
+        
+        assertEquals(MathUtils.binomialCoefficient(34,17),
+            binomialCoefficient(34,17));
+       */
+    }
+    
