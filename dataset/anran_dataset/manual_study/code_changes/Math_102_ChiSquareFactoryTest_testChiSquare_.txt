commit a1bac127067c912b4a9f7a2957c427853a36c730
Author: Phil Steitz <psteitz@apache.org>
Date:   Wed Jan 9 00:16:00 2008

    Added check and rescaling of expected counts to sum to sum of expected
    counts if necessary in ChiSquare test.
    JIRA: MATH-175
    Reported and patched by Carl Anderson.
    
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@610274 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java b/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java
--- a/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java
+++ b/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java
@@ -46,66 +46,66 @@
     public void testChiSquare() throws Exception {
  
         // Target values computed using R version 1.8.1 
         // Some assembly required ;-)  
         //      Use sum((obs - exp)^2/exp) for the chi-square statistic and
         //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value
         
         long[] observed = {10, 9, 11};
         double[] expected = {10, 10, 10};
         assertEquals("chi-square statistic", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);
         assertEquals("chi-square p-value", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);
         
         long[] observed1 = { 500, 623, 72, 70, 31 };
         double[] expected1 = { 485, 541, 82, 61, 37 };
-        assertEquals( "chi-square test statistic", 16.4131070362, testStatistic.chiSquare(expected1, observed1), 1E-10);
-        assertEquals("chi-square p-value", 0.002512096, testStatistic.chiSquareTest(expected1, observed1), 1E-9);
-        assertTrue("chi-square test reject", testStatistic.chiSquareTest(expected1, observed1, 0.003));
-        assertTrue("chi-square test accept", !testStatistic.chiSquareTest(expected1, observed1, 0.002));
+        assertEquals( "chi-square test statistic", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);
+        assertEquals("chi-square p-value", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);
+        assertTrue("chi-square test reject", testStatistic.chiSquareTest(expected1, observed1, 0.08));
+        assertTrue("chi-square test accept", !testStatistic.chiSquareTest(expected1, observed1, 0.05));
 
         try {
             testStatistic.chiSquareTest(expected1, observed1, 95);
             fail("alpha out of range, IllegalArgumentException expected");
         } catch (IllegalArgumentException ex) {
             // expected
         }  
         
         long[] tooShortObs = { 0 };
         double[] tooShortEx = { 1 };
         try {
             testStatistic.chiSquare(tooShortEx, tooShortObs);
             fail("arguments too short, IllegalArgumentException expected");
         } catch (IllegalArgumentException ex) {
             // expected
         }
 
         // unmatched arrays
         long[] unMatchedObs = { 0, 1, 2, 3 };
         double[] unMatchedEx = { 1, 1, 2 };
         try {
             testStatistic.chiSquare(unMatchedEx, unMatchedObs);
             fail("arrays have different lengths, IllegalArgumentException expected");
         } catch (IllegalArgumentException ex) {
             // expected
         }
         
         // 0 expected count
         expected[0] = 0;
         try {
             testStatistic.chiSquareTest(expected, observed, .01);
             fail("bad expected count, IllegalArgumentException expected");
         } catch (IllegalArgumentException ex) {
             // expected
         } 
         
         // negative observed count
         expected[0] = 1;
         observed[0] = -1;
         try {
             testStatistic.chiSquareTest(expected, observed, .01);
             fail("bad expected count, IllegalArgumentException expected");
         } catch (IllegalArgumentException ex) {
             // expected
         } 
         
     }
 

commit 152880ce8f296e126b439425e349dbc1df1ae646
Author: Phil Steitz <psteitz@apache.org>
Date:   Fri Dec 10 00:18:16 2004

    Increased precision of target values used in tests.
    
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141519 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java b/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java
--- a/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java
+++ b/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java
@@ -45,66 +45,66 @@
     public void testChiSquare() throws Exception {
  
         // Target values computed using R version 1.8.1 
         // Some assembly required ;-)  
         //      Use sum((obs - exp)^2/exp) for the chi-square statistic and
-        //      1 - pchisq(sum((obs - exp)^2/exp), obs.length - 1) for the p-value
+        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value
         
         long[] observed = {10, 9, 11};
         double[] expected = {10, 10, 10};
         assertEquals("chi-square statistic", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);
-        assertEquals("chi-square p-value", 0.9048374, testStatistic.chiSquareTest(expected, observed), 1E-7);
+        assertEquals("chi-square p-value", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);
         
         long[] observed1 = { 500, 623, 72, 70, 31 };
         double[] expected1 = { 485, 541, 82, 61, 37 };
-        assertEquals( "chi-square test statistic", 16.41311, testStatistic.chiSquare(expected1, observed1), 1E-5);
+        assertEquals( "chi-square test statistic", 16.4131070362, testStatistic.chiSquare(expected1, observed1), 1E-10);
         assertEquals("chi-square p-value", 0.002512096, testStatistic.chiSquareTest(expected1, observed1), 1E-9);
         assertTrue("chi-square test reject", testStatistic.chiSquareTest(expected1, observed1, 0.003));
         assertTrue("chi-square test accept", !testStatistic.chiSquareTest(expected1, observed1, 0.002));
 
         try {
             testStatistic.chiSquareTest(expected1, observed1, 95);
             fail("alpha out of range, IllegalArgumentException expected");
         } catch (IllegalArgumentException ex) {
             // expected
         }  
         
         long[] tooShortObs = { 0 };
         double[] tooShortEx = { 1 };
         try {
             testStatistic.chiSquare(tooShortEx, tooShortObs);
             fail("arguments too short, IllegalArgumentException expected");
         } catch (IllegalArgumentException ex) {
             // expected
         }
 
         // unmatched arrays
         long[] unMatchedObs = { 0, 1, 2, 3 };
         double[] unMatchedEx = { 1, 1, 2 };
         try {
             testStatistic.chiSquare(unMatchedEx, unMatchedObs);
             fail("arrays have different lengths, IllegalArgumentException expected");
         } catch (IllegalArgumentException ex) {
             // expected
         }
         
         // 0 expected count
         expected[0] = 0;
         try {
             testStatistic.chiSquareTest(expected, observed, .01);
             fail("bad expected count, IllegalArgumentException expected");
         } catch (IllegalArgumentException ex) {
             // expected
         } 
         
         // negative observed count
         expected[0] = 1;
         observed[0] = -1;
         try {
             testStatistic.chiSquareTest(expected, observed, .01);
             fail("bad expected count, IllegalArgumentException expected");
         } catch (IllegalArgumentException ex) {
             // expected
         } 
         
     }
 

commit 2b5f2d1ef1023fe83e9054d24b576d040d31ff32
Author: Phil Steitz <psteitz@apache.org>
Date:   Sat Jun 26 18:09:07 2004

    Added more tests for bad input data.
    
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141335 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java b/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java
--- a/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java
+++ b/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java
@@ -45,52 +45,66 @@
     public void testChiSquare() throws Exception {
  
         // Target values computed using R version 1.8.1 
         // Some assembly required ;-)  
         //      Use sum((obs - exp)^2/exp) for the chi-square statistic and
         //      1 - pchisq(sum((obs - exp)^2/exp), obs.length - 1) for the p-value
         
         long[] observed = {10, 9, 11};
         double[] expected = {10, 10, 10};
         assertEquals("chi-square statistic", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);
         assertEquals("chi-square p-value", 0.9048374, testStatistic.chiSquareTest(expected, observed), 1E-7);
         
         long[] observed1 = { 500, 623, 72, 70, 31 };
         double[] expected1 = { 485, 541, 82, 61, 37 };
         assertEquals( "chi-square test statistic", 16.41311, testStatistic.chiSquare(expected1, observed1), 1E-5);
         assertEquals("chi-square p-value", 0.002512096, testStatistic.chiSquareTest(expected1, observed1), 1E-9);
         assertTrue("chi-square test reject", testStatistic.chiSquareTest(expected1, observed1, 0.003));
         assertTrue("chi-square test accept", !testStatistic.chiSquareTest(expected1, observed1, 0.002));
 
         try {
             testStatistic.chiSquareTest(expected1, observed1, 95);
             fail("alpha out of range, IllegalArgumentException expected");
         } catch (IllegalArgumentException ex) {
             // expected
-        }   
+        }  
         
         long[] tooShortObs = { 0 };
         double[] tooShortEx = { 1 };
         try {
             testStatistic.chiSquare(tooShortEx, tooShortObs);
             fail("arguments too short, IllegalArgumentException expected");
         } catch (IllegalArgumentException ex) {
             // expected
         }
 
+        // unmatched arrays
         long[] unMatchedObs = { 0, 1, 2, 3 };
         double[] unMatchedEx = { 1, 1, 2 };
         try {
             testStatistic.chiSquare(unMatchedEx, unMatchedObs);
             fail("arrays have different lengths, IllegalArgumentException expected");
         } catch (IllegalArgumentException ex) {
             // expected
         }
+        
+        // 0 expected count
         expected[0] = 0;
         try {
             testStatistic.chiSquareTest(expected, observed, .01);
             fail("bad expected count, IllegalArgumentException expected");
         } catch (IllegalArgumentException ex) {
             // expected
-        }  
+        } 
+        
+        // negative observed count
+        expected[0] = 1;
+        observed[0] = -1;
+        try {
+            testStatistic.chiSquareTest(expected, observed, .01);
+            fail("bad expected count, IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            // expected
+        } 
+        
     }
 

commit e7d299124f59c1cb6aa61274e24c47544ead40ef
Author: Phil Steitz <psteitz@apache.org>
Date:   Sun May 2 23:04:54 2004

    Initial commit of tests replacing TestStatisticTest.
    
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141208 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java b/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java
--- /dev/null
+++ b/src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java
@@ -0,0 +45,52 @@
+    public void testChiSquare() throws Exception {
+ 
+        // Target values computed using R version 1.8.1 
+        // Some assembly required ;-)  
+        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and
+        //      1 - pchisq(sum((obs - exp)^2/exp), obs.length - 1) for the p-value
+        
+        long[] observed = {10, 9, 11};
+        double[] expected = {10, 10, 10};
+        assertEquals("chi-square statistic", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);
+        assertEquals("chi-square p-value", 0.9048374, testStatistic.chiSquareTest(expected, observed), 1E-7);
+        
+        long[] observed1 = { 500, 623, 72, 70, 31 };
+        double[] expected1 = { 485, 541, 82, 61, 37 };
+        assertEquals( "chi-square test statistic", 16.41311, testStatistic.chiSquare(expected1, observed1), 1E-5);
+        assertEquals("chi-square p-value", 0.002512096, testStatistic.chiSquareTest(expected1, observed1), 1E-9);
+        assertTrue("chi-square test reject", testStatistic.chiSquareTest(expected1, observed1, 0.003));
+        assertTrue("chi-square test accept", !testStatistic.chiSquareTest(expected1, observed1, 0.002));
+
+        try {
+            testStatistic.chiSquareTest(expected1, observed1, 95);
+            fail("alpha out of range, IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }   
+        
+        long[] tooShortObs = { 0 };
+        double[] tooShortEx = { 1 };
+        try {
+            testStatistic.chiSquare(tooShortEx, tooShortObs);
+            fail("arguments too short, IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+
+        long[] unMatchedObs = { 0, 1, 2, 3 };
+        double[] unMatchedEx = { 1, 1, 2 };
+        try {
+            testStatistic.chiSquare(unMatchedEx, unMatchedObs);
+            fail("arrays have different lengths, IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }
+        expected[0] = 0;
+        try {
+            testStatistic.chiSquareTest(expected, observed, .01);
+            fail("bad expected count, IllegalArgumentException expected");
+        } catch (IllegalArgumentException ex) {
+            // expected
+        }  
+    }
+
