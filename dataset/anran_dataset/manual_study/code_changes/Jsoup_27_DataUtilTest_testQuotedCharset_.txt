commit 8e432a5f5fde4694834ce23c5ac1503ce8d381bc
Author: Jonathan Hedley <jonathan@hedley.net>
Date:   Thu Mar 5 13:09:53 2020

    Java8 and JUnit5 (#1335)
    
    * Migration to java8.
    
    * Tests ported to JUnit 5.
    
    * Surefire plugin added.
    
    * Assertions and Rules ported to JUnit 5.
    
    * JUnit 4 dependency removed.
    
    * MultiLocale annotation renamed and changed to include the @ParameterizedTest;
    multi locale tests need only a single annotation now.

diff --git a/src/test/java/org/jsoup/helper/DataUtilTest.java b/src/test/java/org/jsoup/helper/DataUtilTest.java
index 32ecd5fa..f585bb26 100644
--- a/src/test/java/org/jsoup/helper/DataUtilTest.java
+++ b/src/test/java/org/jsoup/helper/DataUtilTest.java
@@ -3,20 +3,13 @@
 import org.jsoup.Jsoup;
 import org.jsoup.nodes.Document;
 import org.jsoup.parser.Parser;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import java.io.ByteArrayInputStream;
-import java.io.File;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.UnsupportedEncodingException;
+import java.io.*;
 import java.nio.charset.StandardCharsets;
 
 import static org.jsoup.integration.ParseTest.getFile;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotSame;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
+import static org.junit.jupiter.api.Assertions.*;
 
 public class DataUtilTest {
     @Test
@@ -24,16 +17,17 @@ public void testCharset() {
         assertEquals("utf-8", DataUtil.getCharsetFromContentType("text/html;charset=utf-8 "));
         assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html; charset=UTF-8"));
         assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=ISO-8859-1"));
-        assertEquals(null, DataUtil.getCharsetFromContentType("text/html"));
-        assertEquals(null, DataUtil.getCharsetFromContentType(null));
-        assertEquals(null, DataUtil.getCharsetFromContentType("text/html;charset=Unknown"));
+        assertNull(DataUtil.getCharsetFromContentType("text/html"));
+        assertNull(DataUtil.getCharsetFromContentType(null));
+        assertNull(DataUtil.getCharsetFromContentType("text/html;charset=Unknown"));
     }
 
-    @Test public void testQuotedCharset() {
+    @Test
+    public void testQuotedCharset() {
         assertEquals("utf-8", DataUtil.getCharsetFromContentType("text/html; charset=\"utf-8\""));
         assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html;charset=\"UTF-8\""));
         assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=\"ISO-8859-1\""));
-        assertEquals(null, DataUtil.getCharsetFromContentType("text/html; charset=\"Unsupported\""));
+        assertNull(DataUtil.getCharsetFromContentType("text/html; charset=\"Unsupported\""));
         assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html; charset='UTF-8'"));
     }
 
@@ -50,13 +44,15 @@ private InputStream stream(String data, String charset) {
         return null;
     }
 
-    @Test public void discardsSpuriousByteOrderMark() throws IOException {
+    @Test
+    public void discardsSpuriousByteOrderMark() throws IOException {
         String html = "\uFEFF<html><head><title>One</title></head><body>Two</body></html>";
         Document doc = DataUtil.parseInputStream(stream(html), "UTF-8", "http://foo.com/", Parser.htmlParser());
         assertEquals("One", doc.head().text());
     }
 
-    @Test public void discardsSpuriousByteOrderMarkWhenNoCharsetSet() throws IOException {
+    @Test
+    public void discardsSpuriousByteOrderMarkWhenNoCharsetSet() throws IOException {
         String html = "\uFEFF<html><head><title>One</title></head><body>Two</body></html>";
         Document doc = DataUtil.parseInputStream(stream(html), null, "http://foo.com/", Parser.htmlParser());
         assertEquals("One", doc.head().text());
@@ -65,8 +61,8 @@ private InputStream stream(String data, String charset) {
 
     @Test
     public void shouldNotThrowExceptionOnEmptyCharset() {
-        assertEquals(null, DataUtil.getCharsetFromContentType("text/html; charset="));
-        assertEquals(null, DataUtil.getCharsetFromContentType("text/html; charset=;"));
+        assertNull(DataUtil.getCharsetFromContentType("text/html; charset="));
+        assertNull(DataUtil.getCharsetFromContentType("text/html; charset=;"));
     }
 
     @Test
@@ -81,7 +77,7 @@ public void shouldCorrectCharsetForDuplicateCharsetString() {
 
     @Test
     public void shouldReturnNullForIllegalCharsetNames() {
-        assertEquals(null, DataUtil.getCharsetFromContentType("text/html; charset=$HJKDFÂ§$/("));
+        assertNull(DataUtil.getCharsetFromContentType("text/html; charset=$HJKDFÂ§$/("));
     }
 
     @Test
@@ -93,7 +89,7 @@ public void generatesMimeBoundaries() {
         assertEquals(DataUtil.boundaryLength, m2.length());
         assertNotSame(m1, m2);
     }
-    
+
     @Test
     public void wrongMetaCharsetFallback() throws IOException {
         String html = "<html><head><meta charset=iso-8></head><body></body></html>";
@@ -101,11 +97,11 @@ public void wrongMetaCharsetFallback() throws IOException {
         Document doc = DataUtil.parseInputStream(stream(html), null, "http://example.com", Parser.htmlParser());
 
         final String expected = "<html>\n" +
-            " <head>\n" +
-            "  <meta charset=\"iso-8\">\n" +
-            " </head>\n" +
-            " <body></body>\n" +
-            "</html>";
+                " <head>\n" +
+                "  <meta charset=\"iso-8\">\n" +
+                " </head>\n" +
+                " <body></body>\n" +
+                "</html>";
 
         assertEquals(expected, doc.toString());
     }
@@ -177,9 +173,9 @@ public void supportsZippedUTF8BOM() throws IOException {
     public void supportsXmlCharsetDeclaration() throws IOException {
         String encoding = "iso-8859-1";
         InputStream soup = new ByteArrayInputStream((
-            "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>" +
-                "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">" +
-                "<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\">HellÃ¶ WÃ¶rld!</html>"
+                "<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>" +
+                        "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">" +
+                        "<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\">HellÃ¶ WÃ¶rld!</html>"
         ).getBytes(encoding));
 
         Document doc = Jsoup.parse(soup, null, "");
@@ -187,14 +183,16 @@ public void supportsXmlCharsetDeclaration() throws IOException {
     }
 
 
-    @Test public void lLoadsGzipFile() throws IOException {
+    @Test
+    public void lLoadsGzipFile() throws IOException {
         File in = getFile("/htmltests/gzip.html.gz");
         Document doc = Jsoup.parse(in, null);
         assertEquals("Gzip test", doc.title());
         assertEquals("This is a gzipped HTML file.", doc.selectFirst("p").text());
     }
 
-    @Test public void loadsZGzipFile() throws IOException {
+    @Test
+    public void loadsZGzipFile() throws IOException {
         // compressed on win, with z suffix
         File in = getFile("/htmltests/gzip.html.z");
         Document doc = Jsoup.parse(in, null);
@@ -202,7 +200,8 @@ public void supportsXmlCharsetDeclaration() throws IOException {
         assertEquals("This is a gzipped HTML file.", doc.selectFirst("p").text());
     }
 
-    @Test public void handlesFakeGzipFile () throws IOException {
+    @Test
+    public void handlesFakeGzipFile() throws IOException {
         File in = getFile("/htmltests/fake-gzip.html.gz");
         Document doc = Jsoup.parse(in, null);
         assertEquals("This is not gzipped", doc.title());

commit cacbbfb9604fc5ce565b3547f4a7de77c037013f
Author: Jonathan Hedley <jonathan@hedley.net>
Date:   Fri Oct 29 21:38:36 2010

    Fixed issue in jsoup.connect when extracting character set from content-type header; now supports quoted
    charset declaration.

diff --git a/src/test/java/org/jsoup/helper/DataUtilTest.java b/src/test/java/org/jsoup/helper/DataUtilTest.java
index 96a191af..fd681c0b 100644
--- a/src/test/java/org/jsoup/helper/DataUtilTest.java
+++ b/src/test/java/org/jsoup/helper/DataUtilTest.java
@@ -12,4 +12,10 @@ public void testCharset() {
         assertEquals(null, DataUtil.getCharsetFromContentType("text/html"));
         assertEquals(null, DataUtil.getCharsetFromContentType(null));
     }
+
+    @Test public void testQuotedCharset() {
+        assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html; charset=\"utf-8\""));
+        assertEquals("UTF-8", DataUtil.getCharsetFromContentType("text/html;charset=\"utf-8\""));
+        assertEquals("ISO-8859-1", DataUtil.getCharsetFromContentType("text/html; charset=\"ISO-8859-1\""));
+    }
 }
