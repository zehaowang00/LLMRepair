commit ba8d7c43eb43293756e5f633a81dc73c9f85ad04
Author: Julius Davies <julius@apache.org>
Date:   Tue Jan 8 16:46:10 2013

    COMPRESS-211 - handle zip extra field 0x7875.  I improved code coverage a little for the unit tests.
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1430557 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java b/src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java
--- a/src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java
@@ -136,53 +140,57 @@
     public void testParseReparse() throws ZipException {
 
+        // Version=1, Len=0, Len=0.
+        final byte[] ZERO_LEN = {1, 0, 0};
+
         // Version=1, Len=1, zero, Len=1, zero.
         final byte[] ZERO_UID_GID = {1, 1, 0, 1, 0};
 
         // Version=1, Len=1, one, Len=1, one
         final byte[] ONE_UID_GID = {1, 1, 1, 1, 1};
 
         // Version=1, Len=2, one thousand, Len=2, one thousand
         final byte[] ONE_THOUSAND_UID_GID = {1, 2, -24, 3, 2, -24, 3};
 
         // (2^32 - 2).   I guess they avoid (2^32 - 1) since it's identical to -1 in
         // two's complement, and -1 often has a special meaning.
         final byte[] UNIX_MAX_UID_GID = {1, 4, -2, -1, -1, -1, 4, -2, -1, -1, -1};
 
         // Version=1, Len=5, 2^32, Len=5, 2^32 + 1
         // Esoteric test:  can we handle 40 bit numbers?
         final byte[] LENGTH_5 = {1, 5, 0, 0, 0, 0, 1, 5, 1, 0, 0, 0, 1};
 
         // Version=1, Len=8, 2^63 - 2, Len=8, 2^63 - 1
         // Esoteric test:  can we handle 64 bit numbers?
         final byte[] LENGTH_8 = {1, 8, -2, -1, -1, -1, -1, -1, -1, 127, 8, -1, -1, -1, -1, -1, -1, -1, 127};
 
         final long TWO_TO_32 = 0x100000000L;
         final long MAX = TWO_TO_32 - 2;
 
+        parseReparse(0, 0, ZERO_LEN, 0, 0);
         parseReparse(0, 0, ZERO_UID_GID, 0, 0);
         parseReparse(1, 1, ONE_UID_GID, 1, 1);
         parseReparse(1000, 1000, ONE_THOUSAND_UID_GID, 1000, 1000);
         parseReparse(MAX, MAX, UNIX_MAX_UID_GID, MAX, MAX);
         parseReparse(-2, -2, UNIX_MAX_UID_GID, MAX, MAX);
         parseReparse(TWO_TO_32, TWO_TO_32 + 1, LENGTH_5, TWO_TO_32, TWO_TO_32 + 1);
         parseReparse(Long.MAX_VALUE - 1, Long.MAX_VALUE, LENGTH_8, Long.MAX_VALUE - 1, Long.MAX_VALUE);
 
         // We never emit this, but we should be able to parse it:
         final byte[] SPURIOUS_ZEROES_1 = {1, 4, -1, 0, 0, 0, 4, -128, 0, 0, 0};
         final byte[] EXPECTED_1 = {1, 1, -1, 1, -128};
         xf.parseFromLocalFileData(SPURIOUS_ZEROES_1, 0, SPURIOUS_ZEROES_1.length);
 
         assertEquals(255, xf.getUID());
         assertEquals(128, xf.getGID());
         assertTrue(Arrays.equals(EXPECTED_1, xf.getLocalFileDataData()));
 
         final byte[] SPURIOUS_ZEROES_2 = {1, 4, -1, -1, 0, 0, 4, 1, 2, 0, 0};
         final byte[] EXPECTED_2 = {1, 2, -1, -1, 2, 1, 2};
         xf.parseFromLocalFileData(SPURIOUS_ZEROES_2, 0, SPURIOUS_ZEROES_2.length);
 
         assertEquals(65535, xf.getUID());
         assertEquals(513, xf.getGID());
         assertTrue(Arrays.equals(EXPECTED_2, xf.getLocalFileDataData()));
     }
 
 

commit 2245d7ade5283dcf8bf01c2aed1016188771779b
Author: Julius Davies <julius@apache.org>
Date:   Mon Jan 7 19:13:18 2013

    COMPRESS-211 - handle zip extra field 0x7875 - Info Zip New Unix Extra Field
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1430102 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java b/src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java
--- /dev/null
+++ b/src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java
@@ -0,0 +136,53 @@
+    public void testParseReparse() throws ZipException {
+
+        // Version=1, Len=1, zero, Len=1, zero.
+        final byte[] ZERO_UID_GID = {1, 1, 0, 1, 0};
+
+        // Version=1, Len=1, one, Len=1, one
+        final byte[] ONE_UID_GID = {1, 1, 1, 1, 1};
+
+        // Version=1, Len=2, one thousand, Len=2, one thousand
+        final byte[] ONE_THOUSAND_UID_GID = {1, 2, -24, 3, 2, -24, 3};
+
+        // (2^32 - 2).   I guess they avoid (2^32 - 1) since it's identical to -1 in
+        // two's complement, and -1 often has a special meaning.
+        final byte[] UNIX_MAX_UID_GID = {1, 4, -2, -1, -1, -1, 4, -2, -1, -1, -1};
+
+        // Version=1, Len=5, 2^32, Len=5, 2^32 + 1
+        // Esoteric test:  can we handle 40 bit numbers?
+        final byte[] LENGTH_5 = {1, 5, 0, 0, 0, 0, 1, 5, 1, 0, 0, 0, 1};
+
+        // Version=1, Len=8, 2^63 - 2, Len=8, 2^63 - 1
+        // Esoteric test:  can we handle 64 bit numbers?
+        final byte[] LENGTH_8 = {1, 8, -2, -1, -1, -1, -1, -1, -1, 127, 8, -1, -1, -1, -1, -1, -1, -1, 127};
+
+        final long TWO_TO_32 = 0x100000000L;
+        final long MAX = TWO_TO_32 - 2;
+
+        parseReparse(0, 0, ZERO_UID_GID, 0, 0);
+        parseReparse(1, 1, ONE_UID_GID, 1, 1);
+        parseReparse(1000, 1000, ONE_THOUSAND_UID_GID, 1000, 1000);
+        parseReparse(MAX, MAX, UNIX_MAX_UID_GID, MAX, MAX);
+        parseReparse(-2, -2, UNIX_MAX_UID_GID, MAX, MAX);
+        parseReparse(TWO_TO_32, TWO_TO_32 + 1, LENGTH_5, TWO_TO_32, TWO_TO_32 + 1);
+        parseReparse(Long.MAX_VALUE - 1, Long.MAX_VALUE, LENGTH_8, Long.MAX_VALUE - 1, Long.MAX_VALUE);
+
+        // We never emit this, but we should be able to parse it:
+        final byte[] SPURIOUS_ZEROES_1 = {1, 4, -1, 0, 0, 0, 4, -128, 0, 0, 0};
+        final byte[] EXPECTED_1 = {1, 1, -1, 1, -128};
+        xf.parseFromLocalFileData(SPURIOUS_ZEROES_1, 0, SPURIOUS_ZEROES_1.length);
+
+        assertEquals(255, xf.getUID());
+        assertEquals(128, xf.getGID());
+        assertTrue(Arrays.equals(EXPECTED_1, xf.getLocalFileDataData()));
+
+        final byte[] SPURIOUS_ZEROES_2 = {1, 4, -1, -1, 0, 0, 4, 1, 2, 0, 0};
+        final byte[] EXPECTED_2 = {1, 2, -1, -1, 2, 1, 2};
+        xf.parseFromLocalFileData(SPURIOUS_ZEROES_2, 0, SPURIOUS_ZEROES_2.length);
+
+        assertEquals(65535, xf.getUID());
+        assertEquals(513, xf.getGID());
+        assertTrue(Arrays.equals(EXPECTED_2, xf.getLocalFileDataData()));
+    }
+
+
