commit 038da2119223818ee1c56eaf600a583f755f9b30
Author: Ben Lickly <blickly@google.com>
Date:   Mon Nov 4 13:58:43 2013

    Automated g4 rollback of changelist 53524738.
    
    *** Reason for rollback ***
    
    reworked to use the parameter checking logic used for block inlining when doing
    expression inlining.
    
    *** Original change description ***
    
    Automated g4 rollback of changelist 53511956.
    
    *** Reason for rollback ***
    
    Breakages
    
    *** Original change description ***
    
    Nerf direct function inlining when the function be inlined has side-effects and the call arguments can be effected.
    Fixes issue 1101
    
    ***
    -------------
    Created by MOE: http://code.google.com/p/moe-java
    MOE_MIGRATED_REVID=55952788

diff --git a/test/com/google/javascript/jscomp/FunctionInjectorTest.java b/test/com/google/javascript/jscomp/FunctionInjectorTest.java
--- a/test/com/google/javascript/jscomp/FunctionInjectorTest.java
+++ b/test/com/google/javascript/jscomp/FunctionInjectorTest.java
@@ -1345,11 +1351,17 @@
+  public void testIssue1101b() {
+    helperCanInlineReferenceToFunction(CanInlineResult.NO,
+        "function foo(a){return (x.prop = 2),a;} foo(x.prop);", "foo",
+        INLINE_DIRECT);
+  }
+
   /**
    * Test case
    *
    * var a = {}, b = {}
    * a.test = "a", b.test = "b"
    * c = a;
    * foo() { c=b; return "a" }
    * c.teste
    *
    */
 

commit 6b49cfd9022fe111bdad745c78ea877fbc2f7ba3
Author: nicholas.j.santos@gmail.com <nicholas.j.santos@gmail.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Tue Nov 3 18:51:57 2009

    Initial commit.
    
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/FunctionInjectorTest.java b/test/com/google/javascript/jscomp/FunctionInjectorTest.java
--- /dev/null
+++ b/test/com/google/javascript/jscomp/FunctionInjectorTest.java
@@ -0,0 +1135,11 @@
+  /**
+   * Test case
+   *
+   * var a = {}, b = {}
+   * a.test = "a", b.test = "b"
+   * c = a;
+   * foo() { c=b; return "a" }
+   * c.teste
+   *
+   */
+
