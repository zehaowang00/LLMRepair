commit c4dd84e4d505baa90d8d1675c1f60f8d6ce90db8
Author: Tatu Saloranta <tatu.saloranta@iki.fi>
Date:   Wed Jan 16 23:42:31 2019

    Fix #508

diff --git a/src/test/java/com/fasterxml/jackson/core/json/async/AsyncNumberCoercionTest.java b/src/test/java/com/fasterxml/jackson/core/json/async/AsyncNumberCoercionTest.java
--- a/src/test/java/com/fasterxml/jackson/core/json/async/AsyncNumberCoercionTest.java
+++ b/src/test/java/com/fasterxml/jackson/core/json/async/AsyncNumberCoercionTest.java
@@ -63,68 +63,80 @@
     public void testToIntFailing() throws Exception
     {
         AsyncReaderWrapper p;
 
         // long -> error
         long big = 1L + Integer.MAX_VALUE;
         p = createParser(String.valueOf(big));
         assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
         assertEquals(big, p.getLongValue());
         try {
             p.getIntValue();
             fail("Should not pass");
-        } catch (JsonParseException e) {
+        } catch (InputCoercionException e) {
             verifyException(e, "out of range of int");
+            assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
+            assertEquals(Integer.TYPE, e.getTargetType());
         }
         long small = -1L + Integer.MIN_VALUE;
         p = createParser(String.valueOf(small));
         assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
         assertEquals(Long.valueOf(small), p.getNumberValue());
         assertEquals(small, p.getLongValue());
         try {
             p.getIntValue();
             fail("Should not pass");
-        } catch (JsonParseException e) {
+        } catch (InputCoercionException e) {
             verifyException(e, "out of range of int");
+            assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
+            assertEquals(Integer.TYPE, e.getTargetType());
         }
 
         // double -> error
         p = createParser(String.valueOf(big)+".0");
         assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());
         assertEquals((double) big, p.getDoubleValue());
         try {
             p.getIntValue();
             fail("Should not pass");
-        } catch (JsonParseException e) {
+        } catch (InputCoercionException e) {
             verifyException(e, "out of range of int");
+            assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
+            assertEquals(Integer.TYPE, e.getTargetType());
         }
         p = createParser(String.valueOf(small)+".0");
         assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());
         assertEquals((double) small, p.getDoubleValue());
         try {
             p.getIntValue();
             fail("Should not pass");
-        } catch (JsonParseException e) {
+        } catch (InputCoercionException e) {
             verifyException(e, "out of range of int");
+            assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
+            assertEquals(Integer.TYPE, e.getTargetType());
         }
 
         // BigInteger -> error
         p = createParser(String.valueOf(big));
         assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
         assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());
         try {
             p.getIntValue();
             fail("Should not pass");
-        } catch (JsonParseException e) {
+        } catch (InputCoercionException e) {
             verifyException(e, "out of range of int");
+            assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
+            assertEquals(Integer.TYPE, e.getTargetType());
         }
         p = createParser(String.valueOf(small));
         assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
         assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());
         try {
             p.getIntValue();
             fail("Should not pass");
-        } catch (JsonParseException e) {
+        } catch (InputCoercionException e) {
             verifyException(e, "out of range of int");
+            assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
+            assertEquals(Integer.TYPE, e.getTargetType());
         }
     }
 

commit 89986a820dcc9ee491a826833e0cc158d01453c8
Author: Tatu Saloranta <tatu.saloranta@iki.fi>
Date:   Thu Jun 1 03:01:38 2017

    More testing for non-blocking parser

diff --git a/src/test/java/com/fasterxml/jackson/core/async/AsyncNumberCoercionTest.java b/src/test/java/com/fasterxml/jackson/core/async/AsyncNumberCoercionTest.java
--- /dev/null
+++ b/src/test/java/com/fasterxml/jackson/core/async/AsyncNumberCoercionTest.java
@@ -0,0 +56,68 @@
+    public void testToIntFailing() throws Exception
+    {
+        AsyncReaderWrapper p;
+
+        // long -> error
+        long big = 1L + Integer.MAX_VALUE;
+        p = createParser(String.valueOf(big));
+        assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
+        assertEquals(big, p.getLongValue());
+        try {
+            p.getIntValue();
+            fail("Should not pass");
+        } catch (JsonParseException e) {
+            verifyException(e, "out of range of int");
+        }
+        long small = -1L + Integer.MIN_VALUE;
+        p = createParser(String.valueOf(small));
+        assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
+        assertEquals(Long.valueOf(small), p.getNumberValue());
+        assertEquals(small, p.getLongValue());
+        try {
+            p.getIntValue();
+            fail("Should not pass");
+        } catch (JsonParseException e) {
+            verifyException(e, "out of range of int");
+        }
+
+        // double -> error
+        p = createParser(String.valueOf(big)+".0");
+        assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());
+        assertEquals((double) big, p.getDoubleValue());
+        try {
+            p.getIntValue();
+            fail("Should not pass");
+        } catch (JsonParseException e) {
+            verifyException(e, "out of range of int");
+        }
+        p = createParser(String.valueOf(small)+".0");
+        assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());
+        assertEquals((double) small, p.getDoubleValue());
+        try {
+            p.getIntValue();
+            fail("Should not pass");
+        } catch (JsonParseException e) {
+            verifyException(e, "out of range of int");
+        }
+
+        // BigInteger -> error
+        p = createParser(String.valueOf(big));
+        assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
+        assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());
+        try {
+            p.getIntValue();
+            fail("Should not pass");
+        } catch (JsonParseException e) {
+            verifyException(e, "out of range of int");
+        }
+        p = createParser(String.valueOf(small));
+        assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
+        assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());
+        try {
+            p.getIntValue();
+            fail("Should not pass");
+        } catch (JsonParseException e) {
+            verifyException(e, "out of range of int");
+        }
+    }
+
