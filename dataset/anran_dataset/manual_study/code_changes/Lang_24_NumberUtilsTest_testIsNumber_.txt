commit 81903abbb25ff92597d5f1e3acc648d12bdee444
Author: Henri Yandell <bayard@apache.org>
Date:   Sat Jan 1 01:56:59 2011

    Fixing NumberUtils.isNumber so that 1.1L is not considered a number. LANG-664
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1054202 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
@@ -1005,139 +1005,143 @@
     public void testIsNumber() {
         String val = "12345";
         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));
         val = "1234.5";
         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));
         val = ".12345";
         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));
         val = "1234E5";
         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));
         val = "1234E+5";
         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));
         val = "1234E-5";
         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));
         val = "123.4E5";
         assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));
         val = "-1234";
         assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));
         val = "-1234.5";
         assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));
         val = "-.12345";
         assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));
         val = "-1234E5";
         assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));
         val = "0";
         assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));
         val = "-0";
         assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));
         val = "01234";
         assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));
         val = "-01234";
         assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));
         val = "0xABC123";
         assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));
         val = "0x0";
         assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));
         val = "123.4E21D";
         assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));
         val = "-221.23F";
         assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));
         val = "22338L";
         assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));
         val = null;
         assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));
         val = "";
         assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));
         val = "--2.3";
         assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));
         val = ".12.3";
         assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));
         val = "-123E";
         assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));
         val = "-123E+-212";
         assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));
         val = "-123E2.12";
         assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));
         val = "0xGF";
         assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));
         val = "0xFAE-1";
         assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));
         val = ".";
         assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));
         val = "-0ABC123";
         assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));
         val = "123.4E-D";
         assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));
         val = "123.4ED";
         assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));
         val = "1234E5l";
         assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));
         val = "11a";
         assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); 
         val = "1a";
         assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); 
         val = "a";
         assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); 
         val = "11g";
         assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); 
         val = "11z";
         assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); 
         val = "11def";
         assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); 
         val = "11d11";
         assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); 
         val = "11 11";
         assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));
         val = " 1111";
         assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));
         val = "1111 ";
         assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));
 
         // LANG-521
         val = "2.";
         assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));
+
+        // LANG-664
+        val = "1.1L";
+        assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val));
     }
 

commit da0612b348fcfa7679b92a5e9b8e1603e8e2da3a
Author: Henri Yandell <bayard@apache.org>
Date:   Tue Dec 22 01:52:42 2009

    isNumber(String) and createNumber(String) both modified to support "2.". LANG-521
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@893088 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/lang3/math/NumberUtilsTest.java b/src/test/org/apache/commons/lang3/math/NumberUtilsTest.java
--- a/src/test/org/apache/commons/lang3/math/NumberUtilsTest.java
+++ b/src/test/org/apache/commons/lang3/math/NumberUtilsTest.java
@@ -999,136 +1002,139 @@
     public void testIsNumber() {
         String val = "12345";
         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));
         val = "1234.5";
         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));
         val = ".12345";
         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));
         val = "1234E5";
         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));
         val = "1234E+5";
         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));
         val = "1234E-5";
         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));
         val = "123.4E5";
         assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));
         val = "-1234";
         assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));
         val = "-1234.5";
         assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));
         val = "-.12345";
         assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));
         val = "-1234E5";
         assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));
         val = "0";
         assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));
         val = "-0";
         assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));
         val = "01234";
         assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));
         val = "-01234";
         assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));
         val = "0xABC123";
         assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));
         val = "0x0";
         assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));
         val = "123.4E21D";
         assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));
         val = "-221.23F";
         assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));
         val = "22338L";
         assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));
         val = null;
         assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));
         val = "";
         assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));
         val = "--2.3";
         assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));
         val = ".12.3";
         assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));
         val = "-123E";
         assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));
         val = "-123E+-212";
         assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));
         val = "-123E2.12";
         assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));
         val = "0xGF";
         assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));
         val = "0xFAE-1";
         assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));
         val = ".";
         assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));
         val = "-0ABC123";
         assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));
         val = "123.4E-D";
         assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));
         val = "123.4ED";
         assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));
         val = "1234E5l";
         assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));
         val = "11a";
         assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); 
         val = "1a";
         assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); 
         val = "a";
         assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); 
         val = "11g";
         assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); 
         val = "11z";
         assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); 
         val = "11def";
         assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); 
         val = "11d11";
         assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); 
         val = "11 11";
         assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));
         val = " 1111";
         assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));
         val = "1111 ";
         assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));
 
+        // LANG-521
+        val = "2.";
+        assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));
     }
 

commit af2f23ee1deb9e05244ca604cd0248dd21227a12
Author: Stephen Colebourne <scolebourne@apache.org>
Date:   Sun Jul 20 12:03:21 2003

    Update null handling behaviour and documentation
    bug 21734, from Phil Steiz
    
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137476 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/lang/math/NumberUtilsTest.java b/src/test/org/apache/commons/lang/math/NumberUtilsTest.java
--- a/src/test/org/apache/commons/lang/math/NumberUtilsTest.java
+++ b/src/test/org/apache/commons/lang/math/NumberUtilsTest.java
@@ -734,127 +779,136 @@
     public void testIsNumber() {
         String val = "12345";
         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));
         val = "1234.5";
         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));
         val = ".12345";
         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));
         val = "1234E5";
         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));
         val = "1234E+5";
         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));
         val = "1234E-5";
         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));
         val = "123.4E5";
         assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));
         val = "-1234";
         assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));
         val = "-1234.5";
         assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));
         val = "-.12345";
         assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));
         val = "-1234E5";
         assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));
         val = "0";
         assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));
         val = "-0";
         assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));
         val = "01234";
         assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));
         val = "-01234";
         assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));
         val = "0xABC123";
         assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));
         val = "0x0";
         assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));
         val = "123.4E21D";
         assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));
         val = "-221.23F";
         assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));
         val = "22338L";
         assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));
         val = null;
         assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));
         val = "";
         assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));
         val = "--2.3";
         assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));
         val = ".12.3";
         assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));
         val = "-123E";
         assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));
         val = "-123E+-212";
         assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));
         val = "-123E2.12";
         assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));
         val = "0xGF";
         assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));
         val = "0xFAE-1";
         assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));
         val = ".";
         assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));
         val = "-0ABC123";
         assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));
         val = "123.4E-D";
         assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));
         val = "123.4ED";
         assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));
         val = "1234E5l";
         assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));
         val = "11a";
         assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); 
         val = "1a";
         assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); 
         val = "a";
         assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); 
         val = "11g";
         assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); 
         val = "11z";
         assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); 
         val = "11def";
         assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); 
         val = "11d11";
         assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));
         assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); 
+        val = "11 11";
+        assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));
+        val = " 1111";
+        assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));
+        val = "1111 ";
+        assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));
 
     }
 

commit 61f0f1640387a5e07a4904aa6adec9363ec5e2fc
Author: Stephen Colebourne <scolebourne@apache.org>
Date:   Tue Jun 24 17:14:51 2003

    NumberUtils moved to math subpackage
    
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137379 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/lang/math/NumberUtilsTest.java b/src/test/org/apache/commons/lang/math/NumberUtilsTest.java
--- /dev/null
+++ b/src/test/org/apache/commons/lang/math/NumberUtilsTest.java
@@ -0,0 +434,127 @@
+    public void testIsNumber() {
+        String val = "12345";
+        assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));
+        val = "1234.5";
+        assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));
+        val = ".12345";
+        assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));
+        val = "1234E5";
+        assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));
+        val = "1234E+5";
+        assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));
+        val = "1234E-5";
+        assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));
+        val = "123.4E5";
+        assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));
+        val = "-1234";
+        assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));
+        val = "-1234.5";
+        assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));
+        val = "-.12345";
+        assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));
+        val = "-1234E5";
+        assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));
+        val = "0";
+        assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));
+        val = "-0";
+        assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));
+        val = "01234";
+        assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));
+        val = "-01234";
+        assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));
+        val = "0xABC123";
+        assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));
+        val = "0x0";
+        assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));
+        val = "123.4E21D";
+        assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));
+        val = "-221.23F";
+        assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));
+        val = "22338L";
+        assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));
+        val = null;
+        assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));
+        val = "";
+        assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));
+        val = "--2.3";
+        assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));
+        val = ".12.3";
+        assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));
+        val = "-123E";
+        assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));
+        val = "-123E+-212";
+        assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));
+        val = "-123E2.12";
+        assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));
+        val = "0xGF";
+        assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));
+        val = "0xFAE-1";
+        assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));
+        val = ".";
+        assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));
+        val = "-0ABC123";
+        assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));
+        val = "123.4E-D";
+        assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));
+        val = "123.4ED";
+        assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));
+        val = "1234E5l";
+        assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));
+        val = "11a";
+        assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); 
+        val = "1a";
+        assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); 
+        val = "a";
+        assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); 
+        val = "11g";
+        assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); 
+        val = "11z";
+        assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); 
+        val = "11def";
+        assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); 
+        val = "11d11";
+        assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));
+        assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); 
+
+    }
+
