commit cc19d3029ab0db137da0e95cc55c20b131241cf1
Author: Jonathan Hedley <jonathan@hedley.net>
Date:   Tue Apr 5 15:54:42 2016

    Reverted Node.equals() and Node.hashCode()
    
    Back to identity (object) comparisons, as deep content inspection had
    negative performance impacts and hashkey stability problems.
    Functionality replaced with Node.hasSameContent().
    
    Fixes #688

diff --git a/src/test/java/org/jsoup/nodes/ElementTest.java b/src/test/java/org/jsoup/nodes/ElementTest.java
index ec223ab4..73e4db77 100644
--- a/src/test/java/org/jsoup/nodes/ElementTest.java
+++ b/src/test/java/org/jsoup/nodes/ElementTest.java
@@ -798,7 +798,9 @@ public void testClassNames() {
     }
 
     @Test
-    public void testHashAndEquals() {
+    public void testHashAndEqualsAndValue() {
+        // .equals and hashcode are identity. value is content.
+
         String doc1 = "<div id=1><p class=one>One</p><p class=one>One</p><p class=one>Two</p><p class=two>One</p></div>" +
                 "<div id=2><p class=one>One</p><p class=one>One</p><p class=one>Two</p><p class=two>One</p></div>";
 
@@ -829,17 +831,17 @@ public void testHashAndEquals() {
         Element e6 = els.get(6);
         Element e7 = els.get(7);
 
-        assertEquals(e0, e1);
-        assertEquals(e0, e4);
-        assertEquals(e0, e5);
+        assertEquals(e0, e0);
+        assertTrue(e0.hasSameValue(e1));
+        assertTrue(e0.hasSameValue(e4));
+        assertTrue(e0.hasSameValue(e5));
         assertFalse(e0.equals(e2));
-        assertFalse(e0.equals(e3));
-        assertFalse(e0.equals(e6));
-        assertFalse(e0.equals(e7));
+        assertFalse(e0.hasSameValue(e2));
+        assertFalse(e0.hasSameValue(e3));
+        assertFalse(e0.hasSameValue(e6));
+        assertFalse(e0.hasSameValue(e7));
 
-        assertEquals(e0.hashCode(), e1.hashCode());
-        assertEquals(e0.hashCode(), e4.hashCode());
-        assertEquals(e0.hashCode(), e5.hashCode());
+        assertEquals(e0.hashCode(), e0.hashCode());
         assertFalse(e0.hashCode() == (e2.hashCode()));
         assertFalse(e0.hashCode() == (e3).hashCode());
         assertFalse(e0.hashCode() == (e6).hashCode());
@@ -876,6 +878,17 @@ public void appendMustCorrectlyMoveChildrenInsideOneParentElement() {
 
         String result = doc.toString().replaceAll("\\s+", "");
         assertEquals("<body><div3>Check</div3><div4></div4><div1></div1><div2></div2></body>", result);
+    }
+
+    @Test
+    public void testHashcodeIsStableWithContentChanges() {
+        Element root = new Element(Tag.valueOf("root"), "");
+
+        HashSet<Element> set = new HashSet<Element>();
+        // Add root node:
+        set.add(root);
 
+        root.appendChild(new Element(Tag.valueOf("a"), ""));
+        assertTrue(set.contains(root));
     }
 }

commit 8391b7231a2519557d41209d728acc4f422af381
Author: Jonathan Hedley <jonathan@hedley.net>
Date:   Sun Mar 29 21:10:57 2015

    Improved hashcode and equals for Node
    
    Fixes #537

diff --git a/src/test/java/org/jsoup/nodes/ElementTest.java b/src/test/java/org/jsoup/nodes/ElementTest.java
index d74f6608..69dc6ad8 100644
--- a/src/test/java/org/jsoup/nodes/ElementTest.java
+++ b/src/test/java/org/jsoup/nodes/ElementTest.java
@@ -394,7 +394,7 @@
         assertEquals("<div><div class=\"head\"><p>Hello</p></div><p>There</p></div>", TextUtil.stripNewlines(doc.body().html()));
 
         Element ret = p.wrap("<div><div class=foo></div><p>What?</p></div>");
-        assertEquals("<div><div class=\"head\"><div><div class=\"foo\"><p>Hello</p></div><p>What?</p></div></div><p>There</p></div>", 
+        assertEquals("<div><div class=\"head\"><div><div class=\"foo\"><p>Hello</p></div><p>What?</p></div></div><p>There</p></div>",
                 TextUtil.stripNewlines(doc.body().html()));
 
         assertEquals(ret, p);
@@ -749,4 +749,53 @@ public void testClassNames() {
         assertEquals("c2", arr2[1]);
         assertEquals("c3", arr2[2]);
     }
+
+    @Test
+    public void testHashAndEquals() {
+        String doc1 = "<div id=1><p class=one>One</p><p class=one>One</p><p class=one>Two</p><p class=two>One</p></div>" +
+                "<div id=2><p class=one>One</p><p class=one>One</p><p class=one>Two</p><p class=two>One</p></div>";
+
+        Document doc = Jsoup.parse(doc1);
+        Elements els = doc.select("p");
+
+        /*
+        for (Element el : els) {
+            System.out.println(el.hashCode() + " - " + el.outerHtml());
+        }
+
+        0 1534787905 - <p class="one">One</p>
+        1 1534787905 - <p class="one">One</p>
+        2 1539683239 - <p class="one">Two</p>
+        3 1535455211 - <p class="two">One</p>
+        4 1534787905 - <p class="one">One</p>
+        5 1534787905 - <p class="one">One</p>
+        6 1539683239 - <p class="one">Two</p>
+        7 1535455211 - <p class="two">One</p>
+        */
+        assertEquals(8, els.size());
+        Element e0 = els.get(0);
+        Element e1 = els.get(1);
+        Element e2 = els.get(2);
+        Element e3 = els.get(3);
+        Element e4 = els.get(4);
+        Element e5 = els.get(5);
+        Element e6 = els.get(6);
+        Element e7 = els.get(7);
+
+        assertEquals(e0, e1);
+        assertEquals(e0, e4);
+        assertEquals(e0, e5);
+        assertFalse(e0.equals(e2));
+        assertFalse(e0.equals(e3));
+        assertFalse(e0.equals(e6));
+        assertFalse(e0.equals(e7));
+
+        assertEquals(e0.hashCode(), e1.hashCode());
+        assertEquals(e0.hashCode(), e4.hashCode());
+        assertEquals(e0.hashCode(), e5.hashCode());
+        assertFalse(e0.hashCode() == (e2.hashCode()));
+        assertFalse(e0.hashCode() == (e3).hashCode());
+        assertFalse(e0.hashCode() == (e6).hashCode());
+        assertFalse(e0.hashCode() == (e7).hashCode());
+    }
 }
