commit bd2803b6d9ab600906b262ae51cb3591160b5f3c
Author: Ben Lickly <blickly@google.com>
Date:   Fri Mar 22 20:28:36 2013

    Fix bug in MinimizeExitPoints with removing breaks inside finally blocks.
    
    According to the ECMAScript standard, a finally should only resume an
    exception if it exits without a break, continue, return, or another throw.
    
    This change does unfortunately not yet fix issue 936 because the
    same bug exists in UnreachableCodeElimination.
    -------------
    Created by MOE: http://code.google.com/p/moe-java
    MOE_MIGRATED_REVID=44335812

diff --git a/test/com/google/javascript/jscomp/MinimizeExitPointsTest.java b/test/com/google/javascript/jscomp/MinimizeExitPointsTest.java
--- a/test/com/google/javascript/jscomp/MinimizeExitPointsTest.java
+++ b/test/com/google/javascript/jscomp/MinimizeExitPointsTest.java
@@ -91,49 +91,49 @@
   public void testFunctionReturnOptimization() throws Exception {
     fold("function f(){if(a()){b();if(c())return;}}",
          "function f(){if(a()){b();if(c());}}");
     fold("function f(){if(x)return; x=3; return; }",
          "function f(){if(x); else x=3}");
     fold("function f(){if(true){a();return;}else;b();}",
          "function f(){if(true){a();}else{b();}}");
     fold("function f(){if(false){a();return;}else;b();return;}",
          "function f(){if(false){a();}else{b();}}");
     fold("function f(){if(a()){b();return;}else;c();}",
          "function f(){if(a()){b();}else{c();}}");
     fold("function f(){if(a()){b()}else{c();return;}}",
          "function f(){if(a()){b()}else{c();}}");
     fold("function f(){if(a()){b();return;}else;}",
          "function f(){if(a()){b();}else;}");
     fold("function f(){if(a()){return;}else{return;} return;}",
          "function f(){if(a()){}else{}}");
     fold("function f(){if(a()){return;}else{return;} b();}",
          "function f(){if(a()){}else{return;b()}}");
     fold("function f(){ if (x) return; if (y) return; if (z) return; w(); }",
         " function f() {" +
         "   if (x) {} else { if (y) {} else { if (z) {} else w(); }}" +
         " }");
 
     fold("function f(){while(a())return;}",
          "function f(){while(a())return}");
     foldSame("function f(){for(x in a())return}");
 
     fold("function f(){while(a())break;}",
          "function f(){while(a())break}");
     foldSame("function f(){for(x in a())break}");
 
-    fold("function f(){try{return;}catch(e){return;}finally{return}}",
-         "function f(){try{}catch(e){}finally{}}");
+    fold("function f(){try{return;}catch(e){throw 9;}finally{return}}",
+         "function f(){try{}catch(e){throw 9;}finally{return}}");
+    foldSame("function f(){try{throw 9;}finally{return;}}");
+
     fold("function f(){try{return;}catch(e){return;}}",
          "function f(){try{}catch(e){}}");
-    fold("function f(){try{return;}finally{return;}}",
-         "function f(){try{}finally{}}");
     fold("function f(){try{if(a()){return;}else{return;} return;}catch(e){}}",
          "function f(){try{if(a()){}else{}}catch(e){}}");
 
     fold("function f(){g:return}",
          "function f(){}");
     fold("function f(){g:if(a()){return;}else{return;} return;}",
          "function f(){g:if(a()){}else{}}");
-    fold("function f(){try{g:if(a()){} return;}finally{return}}",
-         "function f(){try{g:if(a()){}}finally{}}");
+    fold("function f(){try{g:if(a()){throw 9;} return;}finally{return}}",
+         "function f(){try{g:if(a()){throw 9;}}finally{return}}");
   }
 

commit a4b0d5357a1cd3d1d88499749f1135ec47042d0f
Author: dimvar@google.com <dimvar@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Thu Jan 17 13:47:07 2013

    Delete a node removal that never removes anything.
    
    R=johnlenz
    DELTA=28 (5 added, 16 deleted, 7 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=6157
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2472 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/MinimizeExitPointsTest.java b/test/com/google/javascript/jscomp/MinimizeExitPointsTest.java
--- a/test/com/google/javascript/jscomp/MinimizeExitPointsTest.java
+++ b/test/com/google/javascript/jscomp/MinimizeExitPointsTest.java
@@ -91,45 +91,49 @@
   public void testFunctionReturnOptimization() throws Exception {
     fold("function f(){if(a()){b();if(c())return;}}",
          "function f(){if(a()){b();if(c());}}");
     fold("function f(){if(x)return; x=3; return; }",
          "function f(){if(x); else x=3}");
     fold("function f(){if(true){a();return;}else;b();}",
          "function f(){if(true){a();}else{b();}}");
     fold("function f(){if(false){a();return;}else;b();return;}",
          "function f(){if(false){a();}else{b();}}");
     fold("function f(){if(a()){b();return;}else;c();}",
          "function f(){if(a()){b();}else{c();}}");
     fold("function f(){if(a()){b()}else{c();return;}}",
          "function f(){if(a()){b()}else{c();}}");
     fold("function f(){if(a()){b();return;}else;}",
          "function f(){if(a()){b();}else;}");
     fold("function f(){if(a()){return;}else{return;} return;}",
          "function f(){if(a()){}else{}}");
     fold("function f(){if(a()){return;}else{return;} b();}",
          "function f(){if(a()){}else{return;b()}}");
+    fold("function f(){ if (x) return; if (y) return; if (z) return; w(); }",
+        " function f() {" +
+        "   if (x) {} else { if (y) {} else { if (z) {} else w(); }}" +
+        " }");
 
     fold("function f(){while(a())return;}",
          "function f(){while(a())return}");
     foldSame("function f(){for(x in a())return}");
 
     fold("function f(){while(a())break;}",
          "function f(){while(a())break}");
     foldSame("function f(){for(x in a())break}");
 
     fold("function f(){try{return;}catch(e){return;}finally{return}}",
          "function f(){try{}catch(e){}finally{}}");
     fold("function f(){try{return;}catch(e){return;}}",
          "function f(){try{}catch(e){}}");
     fold("function f(){try{return;}finally{return;}}",
          "function f(){try{}finally{}}");
     fold("function f(){try{if(a()){return;}else{return;} return;}catch(e){}}",
          "function f(){try{if(a()){}else{}}catch(e){}}");
 
     fold("function f(){g:return}",
          "function f(){}");
     fold("function f(){g:if(a()){return;}else{return;} return;}",
          "function f(){g:if(a()){}else{}}");
     fold("function f(){try{g:if(a()){} return;}finally{return}}",
          "function f(){try{g:if(a()){}}finally{}}");
   }
 

commit 084b868bc2fbf9d6d0319e5a362ade1d7f43f899
Author: johnlenz@google.com <johnlenz@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Thu Feb 17 16:20:42 2011

    Generate a parse error for unnamed function statements.
    Fixes issue 251.
    
    R=nicksantos
    DELTA=384  (78 added, 0 deleted, 306 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=556
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@797 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/MinimizeExitPointsTest.java b/test/com/google/javascript/jscomp/MinimizeExitPointsTest.java
--- a/test/com/google/javascript/jscomp/MinimizeExitPointsTest.java
+++ b/test/com/google/javascript/jscomp/MinimizeExitPointsTest.java
@@ -90,45 +90,45 @@
   public void testFunctionReturnOptimization() throws Exception {
-    fold("function(){if(a()){b();if(c())return;}}",
-         "function(){if(a()){b();if(c());}}");
-    fold("function(){if(x)return; x=3; return; }",
-         "function(){if(x); else x=3}");
-    fold("function(){if(true){a();return;}else;b();}",
-         "function(){if(true){a();}else{b();}}");
-    fold("function(){if(false){a();return;}else;b();return;}",
-         "function(){if(false){a();}else{b();}}");
-    fold("function(){if(a()){b();return;}else;c();}",
-         "function(){if(a()){b();}else{c();}}");
-    fold("function(){if(a()){b()}else{c();return;}}",
-         "function(){if(a()){b()}else{c();}}");
-    fold("function(){if(a()){b();return;}else;}",
-         "function(){if(a()){b();}else;}");
-    fold("function(){if(a()){return;}else{return;} return;}",
-         "function(){if(a()){}else{}}");
-    fold("function(){if(a()){return;}else{return;} b();}",
-         "function(){if(a()){}else{return;b()}}");
-
-    fold("function(){while(a())return;}",
-         "function(){while(a())return}");
-    foldSame("function(){for(x in a())return}");
-
-    fold("function(){while(a())break;}",
-         "function(){while(a())break}");
-    foldSame("function(){for(x in a())break}");
-
-    fold("function(){try{return;}catch(e){return;}finally{return}}",
-         "function(){try{}catch(e){}finally{}}");
-    fold("function(){try{return;}catch(e){return;}}",
-         "function(){try{}catch(e){}}");
-    fold("function(){try{return;}finally{return;}}",
-         "function(){try{}finally{}}");
-    fold("function(){try{if(a()){return;}else{return;} return;}catch(e){}}",
-         "function(){try{if(a()){}else{}}catch(e){}}");
-
-    fold("function(){g:return}",
-         "function(){}");
-    fold("function(){g:if(a()){return;}else{return;} return;}",
-         "function(){g:if(a()){}else{}}");
-    fold("function(){try{g:if(a()){} return;}finally{return}}",
-         "function(){try{g:if(a()){}}finally{}}");
+    fold("function f(){if(a()){b();if(c())return;}}",
+         "function f(){if(a()){b();if(c());}}");
+    fold("function f(){if(x)return; x=3; return; }",
+         "function f(){if(x); else x=3}");
+    fold("function f(){if(true){a();return;}else;b();}",
+         "function f(){if(true){a();}else{b();}}");
+    fold("function f(){if(false){a();return;}else;b();return;}",
+         "function f(){if(false){a();}else{b();}}");
+    fold("function f(){if(a()){b();return;}else;c();}",
+         "function f(){if(a()){b();}else{c();}}");
+    fold("function f(){if(a()){b()}else{c();return;}}",
+         "function f(){if(a()){b()}else{c();}}");
+    fold("function f(){if(a()){b();return;}else;}",
+         "function f(){if(a()){b();}else;}");
+    fold("function f(){if(a()){return;}else{return;} return;}",
+         "function f(){if(a()){}else{}}");
+    fold("function f(){if(a()){return;}else{return;} b();}",
+         "function f(){if(a()){}else{return;b()}}");
+
+    fold("function f(){while(a())return;}",
+         "function f(){while(a())return}");
+    foldSame("function f(){for(x in a())return}");
+
+    fold("function f(){while(a())break;}",
+         "function f(){while(a())break}");
+    foldSame("function f(){for(x in a())break}");
+
+    fold("function f(){try{return;}catch(e){return;}finally{return}}",
+         "function f(){try{}catch(e){}finally{}}");
+    fold("function f(){try{return;}catch(e){return;}}",
+         "function f(){try{}catch(e){}}");
+    fold("function f(){try{return;}finally{return;}}",
+         "function f(){try{}finally{}}");
+    fold("function f(){try{if(a()){return;}else{return;} return;}catch(e){}}",
+         "function f(){try{if(a()){}else{}}catch(e){}}");
+
+    fold("function f(){g:return}",
+         "function f(){}");
+    fold("function f(){g:if(a()){return;}else{return;} return;}",
+         "function f(){g:if(a()){}else{}}");
+    fold("function f(){try{g:if(a()){} return;}finally{return}}",
+         "function f(){try{g:if(a()){}}finally{}}");
   }
 

commit 6b49cfd9022fe111bdad745c78ea877fbc2f7ba3
Author: nicholas.j.santos@gmail.com <nicholas.j.santos@gmail.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Tue Nov 3 18:51:57 2009

    Initial commit.
    
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/MinimizeExitPointsTest.java b/test/com/google/javascript/jscomp/MinimizeExitPointsTest.java
--- /dev/null
+++ b/test/com/google/javascript/jscomp/MinimizeExitPointsTest.java
@@ -0,0 +85,45 @@
+  public void testFunctionReturnOptimization() throws Exception {
+    fold("function(){if(a()){b();if(c())return;}}",
+         "function(){if(a()){b();if(c());}}");
+    fold("function(){if(x)return; x=3; return; }",
+         "function(){if(x); else x=3}");
+    fold("function(){if(true){a();return;}else;b();}",
+         "function(){if(true){a();}else{b();}}");
+    fold("function(){if(false){a();return;}else;b();return;}",
+         "function(){if(false){a();}else{b();}}");
+    fold("function(){if(a()){b();return;}else;c();}",
+         "function(){if(a()){b();}else{c();}}");
+    fold("function(){if(a()){b()}else{c();return;}}",
+         "function(){if(a()){b()}else{c();}}");
+    fold("function(){if(a()){b();return;}else;}",
+         "function(){if(a()){b();}else;}");
+    fold("function(){if(a()){return;}else{return;} return;}",
+         "function(){if(a()){}else{}}");
+    fold("function(){if(a()){return;}else{return;} b();}",
+         "function(){if(a()){}else{return;b()}}");
+
+    fold("function(){while(a())return;}",
+         "function(){while(a())return}");
+    foldSame("function(){for(x in a())return}");
+
+    fold("function(){while(a())break;}",
+         "function(){while(a())break}");
+    foldSame("function(){for(x in a())break}");
+
+    fold("function(){try{return;}catch(e){return;}finally{return}}",
+         "function(){try{}catch(e){}finally{}}");
+    fold("function(){try{return;}catch(e){return;}}",
+         "function(){try{}catch(e){}}");
+    fold("function(){try{return;}finally{return;}}",
+         "function(){try{}finally{}}");
+    fold("function(){try{if(a()){return;}else{return;} return;}catch(e){}}",
+         "function(){try{if(a()){}else{}}catch(e){}}");
+
+    fold("function(){g:return}",
+         "function(){}");
+    fold("function(){g:if(a()){return;}else{return;} return;}",
+         "function(){g:if(a()){}else{}}");
+    fold("function(){try{g:if(a()){} return;}finally{return}}",
+         "function(){try{g:if(a()){}}finally{}}");
+  }
+
