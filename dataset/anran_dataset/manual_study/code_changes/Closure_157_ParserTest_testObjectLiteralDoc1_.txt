commit 41acde3e8e5e8d37ade765b41d9fd29861f03e5e
Author: johnlenz@google.com <johnlenz@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Mon Apr 4 17:26:33 2011

    Define number keys in object literals to be quoted string nodes. Tagged with NUMBER_PROP
    Fixes issue 347
    
    R=nicksantos
    DELTA=229  (157 added, 19 deleted, 53 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=1252
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@966 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/parsing/ParserTest.java b/test/com/google/javascript/jscomp/parsing/ParserTest.java
--- a/test/com/google/javascript/jscomp/parsing/ParserTest.java
+++ b/test/com/google/javascript/jscomp/parsing/ParserTest.java
@@ -733,11 +733,11 @@
   public void testObjectLiteralDoc1() {
     Node n = parse("var x = {/** @type {number} */ 1: 2};");
 
     Node objectLit = n.getFirstChild().getFirstChild().getFirstChild();
     assertEquals(Token.OBJECTLIT, objectLit.getType());
 
     Node number = objectLit.getFirstChild();
-    assertEquals(Token.NUMBER, number.getType());
+    assertEquals(Token.STRING, number.getType());
     assertNotNull(number.getJSDocInfo());
   }
 

commit 3924ff1e4a236d68a0b5448d185537d90ca04419
Author: nicholas.j.santos@gmail.com <nicholas.j.santos@gmail.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Wed Dec 2 20:12:42 2009

    Warn about all with statements, unless there's an explicit
    /** @suppress {with} */ tag
    
    Refactor a bunch of stuff into PassConfigs
    
    Add a bunch of parser tests.
    
    Up-integrate John and Norris' latest changes to Rhino at trunk
    
    Minor type-tightening bug fixes.
    
    
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@18 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/parsing/ParserTest.java b/test/com/google/javascript/jscomp/parsing/ParserTest.java
--- /dev/null
+++ b/test/com/google/javascript/jscomp/parsing/ParserTest.java
@@ -0,0 +665,11 @@
+  public void testObjectLiteralDoc1() {
+    Node n = parse("var x = {/** @type {number} */ 1: 2};");
+
+    Node objectLit = n.getFirstChild().getFirstChild().getFirstChild();
+    assertEquals(Token.OBJECTLIT, objectLit.getType());
+
+    Node number = objectLit.getFirstChild();
+    assertEquals(Token.NUMBER, number.getType());
+    assertNotNull(number.getJSDocInfo());
+  }
+
