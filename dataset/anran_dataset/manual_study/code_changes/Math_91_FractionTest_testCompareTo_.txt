commit e1df5f5486f10ac521dfc3dc20d1bfe508e67aa8
Author: Luc Maisonobe <luc@apache.org>
Date:   Sun Mar 29 12:51:48 2009

    Fixed a comparison error when two different fractions evaluate to the
    same double due to limited precision.
    Jira: MATH-252
    
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@759725 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/fraction/FractionTest.java b/src/test/org/apache/commons/math/fraction/FractionTest.java
--- a/src/test/org/apache/commons/math/fraction/FractionTest.java
+++ b/src/test/org/apache/commons/math/fraction/FractionTest.java
@@ -163,11 +163,20 @@
     public void testCompareTo() {
         Fraction first = new Fraction(1, 2);
         Fraction second = new Fraction(1, 3);
         Fraction third = new Fraction(1, 2);
         
         assertEquals(0, first.compareTo(first));
         assertEquals(0, first.compareTo(third));
         assertEquals(1, first.compareTo(second));
         assertEquals(-1, second.compareTo(first));
+
+        // these two values are different approximations of PI
+        // the first  one is approximately PI - 3.07e-18
+        // the second one is approximately PI + 1.936e-17
+        Fraction pi1 = new Fraction(1068966896, 340262731);
+        Fraction pi2 = new Fraction( 411557987, 131002976);
+        assertEquals(-1, pi1.compareTo(pi2));
+        assertEquals( 1, pi2.compareTo(pi1));
+        assertEquals(0.0, pi1.doubleValue() - pi2.doubleValue(), 1.0e-20);
     }
     

commit 7c8dd3ccc3dadf928ab961fec5b75ec7897b59c4
Author: Luc Maisonobe <luc@apache.org>
Date:   Mon Feb 12 17:35:08 2007

    set eol-style property to native
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@506713 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/fraction/FractionTest.java b/src/test/org/apache/commons/math/fraction/FractionTest.java
--- a/src/test/org/apache/commons/math/fraction/FractionTest.java
+++ b/src/test/org/apache/commons/math/fraction/FractionTest.java
@@ -1,446 +67,11 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.commons.math.fraction;
-
-import org.apache.commons.math.ConvergenceException;
-
-import junit.framework.TestCase;
-
-/**
- * @version $Revision$ $Date$
- */
-public class FractionTest extends TestCase {
-
-    private void assertFraction(int expectedNumerator, int expectedDenominator, Fraction actual) {
-        assertEquals(expectedNumerator, actual.getNumerator());
-        assertEquals(expectedDenominator, actual.getDenominator());
-    }
-    
-    public void testConstructor() {
-        assertFraction(0, 1, new Fraction(0, 1));
-        assertFraction(0, 1, new Fraction(0, 2));
-        assertFraction(0, 1, new Fraction(0, -1));
-        assertFraction(1, 2, new Fraction(1, 2));
-        assertFraction(1, 2, new Fraction(2, 4));
-        assertFraction(-1, 2, new Fraction(-1, 2));
-        assertFraction(-1, 2, new Fraction(1, -2));
-        assertFraction(-1, 2, new Fraction(-2, 4));
-        assertFraction(-1, 2, new Fraction(2, -4));
-        
-        // overflow
-        try {
-            new Fraction(Integer.MIN_VALUE, -1);
-            fail();
-        } catch (ArithmeticException ex) {
-            // success
-        }
-        try {
-            new Fraction(1, Integer.MIN_VALUE);
-            fail();
-        } catch (ArithmeticException ex) {
-            // success
-        }
-        try {        
-            assertFraction(0, 1, new Fraction(0.00000000000001));
-            assertFraction(2, 5, new Fraction(0.40000000000001));
-            assertFraction(15, 1, new Fraction(15.0000000000001));
-            
-        } catch (ConvergenceException ex) {
-            fail(ex.getMessage());
-        }
-    }
-    
-    public void testCompareTo() {
-        Fraction first = new Fraction(1, 2);
-        Fraction second = new Fraction(1, 3);
-        Fraction third = new Fraction(1, 2);
-        
-        assertEquals(0, first.compareTo(first));
-        assertEquals(0, first.compareTo(third));
-        assertEquals(1, first.compareTo(second));
-        assertEquals(-1, second.compareTo(first));
-    }
-    
-    public void testDoubleValue() {
-        Fraction first = new Fraction(1, 2);
-        Fraction second = new Fraction(1, 3);
-
-        assertEquals(0.5, first.doubleValue(), 0.0);
-        assertEquals(1.0 / 3.0, second.doubleValue(), 0.0);
-    }
-    
-    public void testFloatValue() {
-        Fraction first = new Fraction(1, 2);
-        Fraction second = new Fraction(1, 3);
-
-        assertEquals(0.5f, first.floatValue(), 0.0f);
-        assertEquals((float)(1.0 / 3.0), second.floatValue(), 0.0f);
-    }
-    
-    public void testIntValue() {
-        Fraction first = new Fraction(1, 2);
-        Fraction second = new Fraction(3, 2);
-
-        assertEquals(0, first.intValue());
-        assertEquals(1, second.intValue());
-    }
-    
-    public void testLongValue() {
-        Fraction first = new Fraction(1, 2);
-        Fraction second = new Fraction(3, 2);
-
-        assertEquals(0L, first.longValue());
-        assertEquals(1L, second.longValue());
-    }
-    
-    public void testConstructorDouble() {
-        try {
-            assertFraction(1, 2, new Fraction(0.5));
-            assertFraction(1, 3, new Fraction(1.0 / 3.0));
-            assertFraction(17, 100, new Fraction(17.0 / 100.0));
-            assertFraction(317, 100, new Fraction(317.0 / 100.0));
-            assertFraction(-1, 2, new Fraction(-0.5));
-            assertFraction(-1, 3, new Fraction(-1.0 / 3.0));
-            assertFraction(-17, 100, new Fraction(17.0 / -100.0));
-            assertFraction(-317, 100, new Fraction(-317.0 / 100.0));
-        } catch (ConvergenceException ex) {
-            fail(ex.getMessage());
-        }
-    }
-    
-    public void testAbs() {
-        Fraction a = new Fraction(10, 21);
-        Fraction b = new Fraction(-10, 21);
-        Fraction c = new Fraction(10, -21);
-        
-        assertFraction(10, 21, a.abs());
-        assertFraction(10, 21, b.abs());
-        assertFraction(10, 21, c.abs());
-    }
-    
-    public void testReciprocal() {
-        Fraction f = null;
-        
-        f = new Fraction(50, 75);
-        f = f.reciprocal();
-        assertEquals(3, f.getNumerator());
-        assertEquals(2, f.getDenominator());
-        
-        f = new Fraction(4, 3);
-        f = f.reciprocal();
-        assertEquals(3, f.getNumerator());
-        assertEquals(4, f.getDenominator());
-        
-        f = new Fraction(-15, 47);
-        f = f.reciprocal();
-        assertEquals(-47, f.getNumerator());
-        assertEquals(15, f.getDenominator());
-        
-        f = new Fraction(0, 3);
-        try {
-            f = f.reciprocal();
-            fail("expecting ArithmeticException");
-        } catch (ArithmeticException ex) {}
-
-        // large values
-        f = new Fraction(Integer.MAX_VALUE, 1);
-        f = f.reciprocal();
-        assertEquals(1, f.getNumerator());
-        assertEquals(Integer.MAX_VALUE, f.getDenominator());
-    }
-    
-    public void testNegate() {
-        Fraction f = null;
-        
-        f = new Fraction(50, 75);
-        f = f.negate();
-        assertEquals(-2, f.getNumerator());
-        assertEquals(3, f.getDenominator());
-        
-        f = new Fraction(-50, 75);
-        f = f.negate();
-        assertEquals(2, f.getNumerator());
-        assertEquals(3, f.getDenominator());
-
-        // large values
-        f = new Fraction(Integer.MAX_VALUE-1, Integer.MAX_VALUE);
-        f = f.negate();
-        assertEquals(Integer.MIN_VALUE+2, f.getNumerator());
-        assertEquals(Integer.MAX_VALUE, f.getDenominator());
-
-        f = new Fraction(Integer.MIN_VALUE, 1);
-        try {
-            f = f.negate();
-            fail("expecting ArithmeticException");
-        } catch (ArithmeticException ex) {}
-    }
-    
-    public void testAdd() {
-        Fraction a = new Fraction(1, 2);
-        Fraction b = new Fraction(2, 3);
-        
-        assertFraction(1, 1, a.add(a));
-        assertFraction(7, 6, a.add(b));
-        assertFraction(7, 6, b.add(a));
-        assertFraction(4, 3, b.add(b));
-        
-        Fraction f1 = new Fraction(Integer.MAX_VALUE - 1, 1);
-        Fraction f2 = Fraction.ONE;
-        Fraction f = f1.add(f2);
-        assertEquals(Integer.MAX_VALUE, f.getNumerator());
-        assertEquals(1, f.getDenominator());
-        
-        f1 = new Fraction(-1, 13*13*2*2);
-        f2 = new Fraction(-2, 13*17*2);
-        f = f1.add(f2);
-        assertEquals(13*13*17*2*2, f.getDenominator());
-        assertEquals(-17 - 2*13*2, f.getNumerator());
-        
-        try {
-            f.add(null);
-            fail("expecting IllegalArgumentException");
-        } catch (IllegalArgumentException ex) {}
-        
-        // if this fraction is added naively, it will overflow.
-        // check that it doesn't.
-        f1 = new Fraction(1,32768*3);
-        f2 = new Fraction(1,59049);
-        f = f1.add(f2);
-        assertEquals(52451, f.getNumerator());
-        assertEquals(1934917632, f.getDenominator());
-
-        f1 = new Fraction(Integer.MIN_VALUE, 3);
-        f2 = new Fraction(1,3);
-        f = f1.add(f2);
-        assertEquals(Integer.MIN_VALUE+1, f.getNumerator());
-        assertEquals(3, f.getDenominator());
-        
-        f1 = new Fraction(Integer.MAX_VALUE - 1, 1);
-        f2 = Fraction.ONE;
-        f = f1.add(f2);
-        assertEquals(Integer.MAX_VALUE, f.getNumerator());
-        assertEquals(1, f.getDenominator());
-        
-        try {
-            f = f.add(Fraction.ONE); // should overflow
-            fail("expecting ArithmeticException but got: " + f.toString());
-        } catch (ArithmeticException ex) {}
-        
-        // denominator should not be a multiple of 2 or 3 to trigger overflow
-        f1 = new Fraction(Integer.MIN_VALUE, 5);
-        f2 = new Fraction(-1,5);
-        try {
-            f = f1.add(f2); // should overflow
-            fail("expecting ArithmeticException but got: " + f.toString());
-        } catch (ArithmeticException ex) {}
-        
-        try {
-            f= new Fraction(-Integer.MAX_VALUE, 1);
-            f = f.add(f);
-            fail("expecting ArithmeticException");
-        } catch (ArithmeticException ex) {}
-        
-        try {
-            f= new Fraction(-Integer.MAX_VALUE, 1);
-            f = f.add(f);
-            fail("expecting ArithmeticException");
-        } catch (ArithmeticException ex) {}
-        
-        f1 = new Fraction(3,327680);
-        f2 = new Fraction(2,59049);
-        try {
-            f = f1.add(f2); // should overflow
-            fail("expecting ArithmeticException but got: " + f.toString());
-        } catch (ArithmeticException ex) {}
-    }
-    
-    public void testDivide() {
-        Fraction a = new Fraction(1, 2);
-        Fraction b = new Fraction(2, 3);
-        
-        assertFraction(1, 1, a.divide(a));
-        assertFraction(3, 4, a.divide(b));
-        assertFraction(4, 3, b.divide(a));
-        assertFraction(1, 1, b.divide(b));
-        
-        Fraction f1 = new Fraction(3, 5);
-        Fraction f2 = Fraction.ZERO;
-        try {
-            Fraction f = f1.divide(f2);
-            fail("expecting ArithmeticException");
-        } catch (ArithmeticException ex) {}
-        
-        f1 = new Fraction(0, 5);
-        f2 = new Fraction(2, 7);
-        Fraction f = f1.divide(f2);
-        assertSame(Fraction.ZERO, f);
-        
-        f1 = new Fraction(2, 7);
-        f2 = Fraction.ONE;
-        f = f1.divide(f2);
-        assertEquals(2, f.getNumerator());
-        assertEquals(7, f.getDenominator());
-        
-        f1 = new Fraction(1, Integer.MAX_VALUE);
-        f = f1.divide(f1);  
-        assertEquals(1, f.getNumerator());
-        assertEquals(1, f.getDenominator());
-        
-        f1 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE);
-        f2 = new Fraction(1, Integer.MAX_VALUE);
-        f = f1.divide(f2);
-        assertEquals(Integer.MIN_VALUE, f.getNumerator());
-        assertEquals(1, f.getDenominator());
-
-        try {
-            f.divide(null);
-            fail("IllegalArgumentException");
-        } catch (IllegalArgumentException ex) {}
-        
-        try {
-            f1 = new Fraction(1, Integer.MAX_VALUE);
-            f = f1.divide(f1.reciprocal());  // should overflow
-            fail("expecting ArithmeticException");
-        } catch (ArithmeticException ex) {}
-        try {
-            f1 = new Fraction(1, -Integer.MAX_VALUE);
-            f = f1.divide(f1.reciprocal());  // should overflow
-            fail("expecting ArithmeticException");
-        } catch (ArithmeticException ex) {}
-    }
-    
-    public void testMultiply() {
-        Fraction a = new Fraction(1, 2);
-        Fraction b = new Fraction(2, 3);
-        
-        assertFraction(1, 4, a.multiply(a));
-        assertFraction(1, 3, a.multiply(b));
-        assertFraction(1, 3, b.multiply(a));
-        assertFraction(4, 9, b.multiply(b));
-        
-        Fraction f1 = new Fraction(Integer.MAX_VALUE, 1);
-        Fraction f2 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE);
-        Fraction f = f1.multiply(f2);
-        assertEquals(Integer.MIN_VALUE, f.getNumerator());
-        assertEquals(1, f.getDenominator());
-
-        try {
-            f.multiply(null);
-            fail("expecting IllegalArgumentException");
-        } catch (IllegalArgumentException ex) {}
-    }
-    
-    public void testSubtract() {
-        Fraction a = new Fraction(1, 2);
-        Fraction b = new Fraction(2, 3);
-        
-        assertFraction(0, 1, a.subtract(a));
-        assertFraction(-1, 6, a.subtract(b));
-        assertFraction(1, 6, b.subtract(a));
-        assertFraction(0, 1, b.subtract(b));
-        
-        Fraction f = new Fraction(1,1);
-        try {
-            f.subtract(null);
-            fail("expecting IllegalArgumentException");
-        } catch (IllegalArgumentException ex) {}
-        
-        // if this fraction is subtracted naively, it will overflow.
-        // check that it doesn't.
-        Fraction f1 = new Fraction(1,32768*3);
-        Fraction f2 = new Fraction(1,59049);
-        f = f1.subtract(f2);
-        assertEquals(-13085, f.getNumerator());
-        assertEquals(1934917632, f.getDenominator());
-
-        f1 = new Fraction(Integer.MIN_VALUE, 3);
-        f2 = new Fraction(1,3).negate();
-        f = f1.subtract(f2);
-        assertEquals(Integer.MIN_VALUE+1, f.getNumerator());
-        assertEquals(3, f.getDenominator());
-        
-        f1 = new Fraction(Integer.MAX_VALUE, 1);
-        f2 = Fraction.ONE;
-        f = f1.subtract(f2);
-        assertEquals(Integer.MAX_VALUE-1, f.getNumerator());
-        assertEquals(1, f.getDenominator());
-
-        try {
-            f1 = new Fraction(1, Integer.MAX_VALUE);
-            f2 = new Fraction(1, Integer.MAX_VALUE - 1);
-            f = f1.subtract(f2);
-            fail("expecting ArithmeticException");  //should overflow
-        } catch (ArithmeticException ex) {}
-        
-        // denominator should not be a multiple of 2 or 3 to trigger overflow
-        f1 = new Fraction(Integer.MIN_VALUE, 5);
-        f2 = new Fraction(1,5);
-        try {
-            f = f1.subtract(f2); // should overflow
-            fail("expecting ArithmeticException but got: " + f.toString());
-        } catch (ArithmeticException ex) {}
-        
-        try {
-            f= new Fraction(Integer.MIN_VALUE, 1);
-            f = f.subtract(Fraction.ONE);
-            fail("expecting ArithmeticException");
-        } catch (ArithmeticException ex) {}
-        
-        try {
-            f= new Fraction(Integer.MAX_VALUE, 1);
-            f = f.subtract(Fraction.ONE.negate());
-            fail("expecting ArithmeticException");
-        } catch (ArithmeticException ex) {}
-        
-        f1 = new Fraction(3,327680);
-        f2 = new Fraction(2,59049);
-        try {
-            f = f1.subtract(f2); // should overflow
-            fail("expecting ArithmeticException but got: " + f.toString());
-        } catch (ArithmeticException ex) {}
-    }
-    
-    public void testEqualsAndHashCode() {
-        Fraction zero  = new Fraction(0,1);
-        Fraction nullFraction = null;
-        int zeroHash = zero.hashCode();
-        assertTrue( zero.equals(zero));
-        assertFalse(zero.equals(nullFraction));
-        assertFalse(zero.equals(new Double(0)));
-        Fraction zero2 = new Fraction(0,2);
-        assertTrue(zero.equals(zero2));
-        assertEquals(zero.hashCode(), zero2.hashCode());
-        Fraction one = new Fraction(1,1);
-        assertFalse((one.equals(zero) ||zero.equals(one)));
-    }
-    
-    public void testGetReducedFraction() {
-        Fraction threeFourths = new Fraction(3, 4);
-        assertTrue(threeFourths.equals(Fraction.getReducedFraction(6, 8)));
-        assertTrue(Fraction.ZERO.equals(Fraction.getReducedFraction(0, -1)));
-        try {
-            Fraction f = Fraction.getReducedFraction(1, 0);
-            fail("expecting ArithmeticException");
-        } catch (ArithmeticException ex) {
-            // expected
-        }
-        assertEquals(Fraction.getReducedFraction
-                (2, Integer.MIN_VALUE).getNumerator(),-1);
-        assertEquals(Fraction.getReducedFraction
-                (1, -1).getNumerator(), -1);
-    }
-}
+    public void testCompareTo() {
+        Fraction first = new Fraction(1, 2);
+        Fraction second = new Fraction(1, 3);
+        Fraction third = new Fraction(1, 2);
+        
+        assertEquals(0, first.compareTo(first));
+        assertEquals(0, first.compareTo(third));
+        assertEquals(1, first.compareTo(second));
+        assertEquals(-1, second.compareTo(first));
+    }
+    

commit ed7ae79dd2dae5df1554108f2bc59023cf9b1172
Author: Henri Yandell <bayard@apache.org>
Date:   Wed Nov 29 02:21:22 2006

    Fixed copyright header (committing in parts as the full commit timed out)
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@480442 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/fraction/FractionTest.java b/src/test/org/apache/commons/math/fraction/FractionTest.java
--- a/src/test/org/apache/commons/math/fraction/FractionTest.java
+++ b/src/test/org/apache/commons/math/fraction/FractionTest.java
@@ -1,445 +1,446 @@
 /*
- * Copyright 2005 The Apache Software Foundation.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 package org.apache.commons.math.fraction;
 
 import org.apache.commons.math.ConvergenceException;
 
 import junit.framework.TestCase;
 
 /**
  * @version $Revision$ $Date$
  */
 public class FractionTest extends TestCase {
 
     private void assertFraction(int expectedNumerator, int expectedDenominator, Fraction actual) {
         assertEquals(expectedNumerator, actual.getNumerator());
         assertEquals(expectedDenominator, actual.getDenominator());
     }
     
     public void testConstructor() {
         assertFraction(0, 1, new Fraction(0, 1));
         assertFraction(0, 1, new Fraction(0, 2));
         assertFraction(0, 1, new Fraction(0, -1));
         assertFraction(1, 2, new Fraction(1, 2));
         assertFraction(1, 2, new Fraction(2, 4));
         assertFraction(-1, 2, new Fraction(-1, 2));
         assertFraction(-1, 2, new Fraction(1, -2));
         assertFraction(-1, 2, new Fraction(-2, 4));
         assertFraction(-1, 2, new Fraction(2, -4));
         
         // overflow
         try {
             new Fraction(Integer.MIN_VALUE, -1);
             fail();
         } catch (ArithmeticException ex) {
             // success
         }
         try {
             new Fraction(1, Integer.MIN_VALUE);
             fail();
         } catch (ArithmeticException ex) {
             // success
         }
         try {        
             assertFraction(0, 1, new Fraction(0.00000000000001));
             assertFraction(2, 5, new Fraction(0.40000000000001));
             assertFraction(15, 1, new Fraction(15.0000000000001));
             
         } catch (ConvergenceException ex) {
             fail(ex.getMessage());
         }
     }
     
     public void testCompareTo() {
         Fraction first = new Fraction(1, 2);
         Fraction second = new Fraction(1, 3);
         Fraction third = new Fraction(1, 2);
         
         assertEquals(0, first.compareTo(first));
         assertEquals(0, first.compareTo(third));
         assertEquals(1, first.compareTo(second));
         assertEquals(-1, second.compareTo(first));
     }
     
     public void testDoubleValue() {
         Fraction first = new Fraction(1, 2);
         Fraction second = new Fraction(1, 3);
 
         assertEquals(0.5, first.doubleValue(), 0.0);
         assertEquals(1.0 / 3.0, second.doubleValue(), 0.0);
     }
     
     public void testFloatValue() {
         Fraction first = new Fraction(1, 2);
         Fraction second = new Fraction(1, 3);
 
         assertEquals(0.5f, first.floatValue(), 0.0f);
         assertEquals((float)(1.0 / 3.0), second.floatValue(), 0.0f);
     }
     
     public void testIntValue() {
         Fraction first = new Fraction(1, 2);
         Fraction second = new Fraction(3, 2);
 
         assertEquals(0, first.intValue());
         assertEquals(1, second.intValue());
     }
     
     public void testLongValue() {
         Fraction first = new Fraction(1, 2);
         Fraction second = new Fraction(3, 2);
 
         assertEquals(0L, first.longValue());
         assertEquals(1L, second.longValue());
     }
     
     public void testConstructorDouble() {
         try {
             assertFraction(1, 2, new Fraction(0.5));
             assertFraction(1, 3, new Fraction(1.0 / 3.0));
             assertFraction(17, 100, new Fraction(17.0 / 100.0));
             assertFraction(317, 100, new Fraction(317.0 / 100.0));
             assertFraction(-1, 2, new Fraction(-0.5));
             assertFraction(-1, 3, new Fraction(-1.0 / 3.0));
             assertFraction(-17, 100, new Fraction(17.0 / -100.0));
             assertFraction(-317, 100, new Fraction(-317.0 / 100.0));
         } catch (ConvergenceException ex) {
             fail(ex.getMessage());
         }
     }
     
     public void testAbs() {
         Fraction a = new Fraction(10, 21);
         Fraction b = new Fraction(-10, 21);
         Fraction c = new Fraction(10, -21);
         
         assertFraction(10, 21, a.abs());
         assertFraction(10, 21, b.abs());
         assertFraction(10, 21, c.abs());
     }
     
     public void testReciprocal() {
         Fraction f = null;
         
         f = new Fraction(50, 75);
         f = f.reciprocal();
         assertEquals(3, f.getNumerator());
         assertEquals(2, f.getDenominator());
         
         f = new Fraction(4, 3);
         f = f.reciprocal();
         assertEquals(3, f.getNumerator());
         assertEquals(4, f.getDenominator());
         
         f = new Fraction(-15, 47);
         f = f.reciprocal();
         assertEquals(-47, f.getNumerator());
         assertEquals(15, f.getDenominator());
         
         f = new Fraction(0, 3);
         try {
             f = f.reciprocal();
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
 
         // large values
         f = new Fraction(Integer.MAX_VALUE, 1);
         f = f.reciprocal();
         assertEquals(1, f.getNumerator());
         assertEquals(Integer.MAX_VALUE, f.getDenominator());
     }
     
     public void testNegate() {
         Fraction f = null;
         
         f = new Fraction(50, 75);
         f = f.negate();
         assertEquals(-2, f.getNumerator());
         assertEquals(3, f.getDenominator());
         
         f = new Fraction(-50, 75);
         f = f.negate();
         assertEquals(2, f.getNumerator());
         assertEquals(3, f.getDenominator());
 
         // large values
         f = new Fraction(Integer.MAX_VALUE-1, Integer.MAX_VALUE);
         f = f.negate();
         assertEquals(Integer.MIN_VALUE+2, f.getNumerator());
         assertEquals(Integer.MAX_VALUE, f.getDenominator());
 
         f = new Fraction(Integer.MIN_VALUE, 1);
         try {
             f = f.negate();
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
     }
     
     public void testAdd() {
         Fraction a = new Fraction(1, 2);
         Fraction b = new Fraction(2, 3);
         
         assertFraction(1, 1, a.add(a));
         assertFraction(7, 6, a.add(b));
         assertFraction(7, 6, b.add(a));
         assertFraction(4, 3, b.add(b));
         
         Fraction f1 = new Fraction(Integer.MAX_VALUE - 1, 1);
         Fraction f2 = Fraction.ONE;
         Fraction f = f1.add(f2);
         assertEquals(Integer.MAX_VALUE, f.getNumerator());
         assertEquals(1, f.getDenominator());
         
         f1 = new Fraction(-1, 13*13*2*2);
         f2 = new Fraction(-2, 13*17*2);
         f = f1.add(f2);
         assertEquals(13*13*17*2*2, f.getDenominator());
         assertEquals(-17 - 2*13*2, f.getNumerator());
         
         try {
             f.add(null);
             fail("expecting IllegalArgumentException");
         } catch (IllegalArgumentException ex) {}
         
         // if this fraction is added naively, it will overflow.
         // check that it doesn't.
         f1 = new Fraction(1,32768*3);
         f2 = new Fraction(1,59049);
         f = f1.add(f2);
         assertEquals(52451, f.getNumerator());
         assertEquals(1934917632, f.getDenominator());
 
         f1 = new Fraction(Integer.MIN_VALUE, 3);
         f2 = new Fraction(1,3);
         f = f1.add(f2);
         assertEquals(Integer.MIN_VALUE+1, f.getNumerator());
         assertEquals(3, f.getDenominator());
         
         f1 = new Fraction(Integer.MAX_VALUE - 1, 1);
         f2 = Fraction.ONE;
         f = f1.add(f2);
         assertEquals(Integer.MAX_VALUE, f.getNumerator());
         assertEquals(1, f.getDenominator());
         
         try {
             f = f.add(Fraction.ONE); // should overflow
             fail("expecting ArithmeticException but got: " + f.toString());
         } catch (ArithmeticException ex) {}
         
         // denominator should not be a multiple of 2 or 3 to trigger overflow
         f1 = new Fraction(Integer.MIN_VALUE, 5);
         f2 = new Fraction(-1,5);
         try {
             f = f1.add(f2); // should overflow
             fail("expecting ArithmeticException but got: " + f.toString());
         } catch (ArithmeticException ex) {}
         
         try {
             f= new Fraction(-Integer.MAX_VALUE, 1);
             f = f.add(f);
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
         
         try {
             f= new Fraction(-Integer.MAX_VALUE, 1);
             f = f.add(f);
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
         
         f1 = new Fraction(3,327680);
         f2 = new Fraction(2,59049);
         try {
             f = f1.add(f2); // should overflow
             fail("expecting ArithmeticException but got: " + f.toString());
         } catch (ArithmeticException ex) {}
     }
     
     public void testDivide() {
         Fraction a = new Fraction(1, 2);
         Fraction b = new Fraction(2, 3);
         
         assertFraction(1, 1, a.divide(a));
         assertFraction(3, 4, a.divide(b));
         assertFraction(4, 3, b.divide(a));
         assertFraction(1, 1, b.divide(b));
         
         Fraction f1 = new Fraction(3, 5);
         Fraction f2 = Fraction.ZERO;
         try {
             Fraction f = f1.divide(f2);
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
         
         f1 = new Fraction(0, 5);
         f2 = new Fraction(2, 7);
         Fraction f = f1.divide(f2);
         assertSame(Fraction.ZERO, f);
         
         f1 = new Fraction(2, 7);
         f2 = Fraction.ONE;
         f = f1.divide(f2);
         assertEquals(2, f.getNumerator());
         assertEquals(7, f.getDenominator());
         
         f1 = new Fraction(1, Integer.MAX_VALUE);
         f = f1.divide(f1);  
         assertEquals(1, f.getNumerator());
         assertEquals(1, f.getDenominator());
         
         f1 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE);
         f2 = new Fraction(1, Integer.MAX_VALUE);
         f = f1.divide(f2);
         assertEquals(Integer.MIN_VALUE, f.getNumerator());
         assertEquals(1, f.getDenominator());
 
         try {
             f.divide(null);
             fail("IllegalArgumentException");
         } catch (IllegalArgumentException ex) {}
         
         try {
             f1 = new Fraction(1, Integer.MAX_VALUE);
             f = f1.divide(f1.reciprocal());  // should overflow
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
         try {
             f1 = new Fraction(1, -Integer.MAX_VALUE);
             f = f1.divide(f1.reciprocal());  // should overflow
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
     }
     
     public void testMultiply() {
         Fraction a = new Fraction(1, 2);
         Fraction b = new Fraction(2, 3);
         
         assertFraction(1, 4, a.multiply(a));
         assertFraction(1, 3, a.multiply(b));
         assertFraction(1, 3, b.multiply(a));
         assertFraction(4, 9, b.multiply(b));
         
         Fraction f1 = new Fraction(Integer.MAX_VALUE, 1);
         Fraction f2 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE);
         Fraction f = f1.multiply(f2);
         assertEquals(Integer.MIN_VALUE, f.getNumerator());
         assertEquals(1, f.getDenominator());
 
         try {
             f.multiply(null);
             fail("expecting IllegalArgumentException");
         } catch (IllegalArgumentException ex) {}
     }
     
     public void testSubtract() {
         Fraction a = new Fraction(1, 2);
         Fraction b = new Fraction(2, 3);
         
         assertFraction(0, 1, a.subtract(a));
         assertFraction(-1, 6, a.subtract(b));
         assertFraction(1, 6, b.subtract(a));
         assertFraction(0, 1, b.subtract(b));
         
         Fraction f = new Fraction(1,1);
         try {
             f.subtract(null);
             fail("expecting IllegalArgumentException");
         } catch (IllegalArgumentException ex) {}
         
         // if this fraction is subtracted naively, it will overflow.
         // check that it doesn't.
         Fraction f1 = new Fraction(1,32768*3);
         Fraction f2 = new Fraction(1,59049);
         f = f1.subtract(f2);
         assertEquals(-13085, f.getNumerator());
         assertEquals(1934917632, f.getDenominator());
 
         f1 = new Fraction(Integer.MIN_VALUE, 3);
         f2 = new Fraction(1,3).negate();
         f = f1.subtract(f2);
         assertEquals(Integer.MIN_VALUE+1, f.getNumerator());
         assertEquals(3, f.getDenominator());
         
         f1 = new Fraction(Integer.MAX_VALUE, 1);
         f2 = Fraction.ONE;
         f = f1.subtract(f2);
         assertEquals(Integer.MAX_VALUE-1, f.getNumerator());
         assertEquals(1, f.getDenominator());
 
         try {
             f1 = new Fraction(1, Integer.MAX_VALUE);
             f2 = new Fraction(1, Integer.MAX_VALUE - 1);
             f = f1.subtract(f2);
             fail("expecting ArithmeticException");  //should overflow
         } catch (ArithmeticException ex) {}
         
         // denominator should not be a multiple of 2 or 3 to trigger overflow
         f1 = new Fraction(Integer.MIN_VALUE, 5);
         f2 = new Fraction(1,5);
         try {
             f = f1.subtract(f2); // should overflow
             fail("expecting ArithmeticException but got: " + f.toString());
         } catch (ArithmeticException ex) {}
         
         try {
             f= new Fraction(Integer.MIN_VALUE, 1);
             f = f.subtract(Fraction.ONE);
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
         
         try {
             f= new Fraction(Integer.MAX_VALUE, 1);
             f = f.subtract(Fraction.ONE.negate());
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
         
         f1 = new Fraction(3,327680);
         f2 = new Fraction(2,59049);
         try {
             f = f1.subtract(f2); // should overflow
             fail("expecting ArithmeticException but got: " + f.toString());
         } catch (ArithmeticException ex) {}
     }
     
     public void testEqualsAndHashCode() {
         Fraction zero  = new Fraction(0,1);
         Fraction nullFraction = null;
         int zeroHash = zero.hashCode();
         assertTrue( zero.equals(zero));
         assertFalse(zero.equals(nullFraction));
         assertFalse(zero.equals(new Double(0)));
         Fraction zero2 = new Fraction(0,2);
         assertTrue(zero.equals(zero2));
         assertEquals(zero.hashCode(), zero2.hashCode());
         Fraction one = new Fraction(1,1);
         assertFalse((one.equals(zero) ||zero.equals(one)));
     }
     
     public void testGetReducedFraction() {
         Fraction threeFourths = new Fraction(3, 4);
         assertTrue(threeFourths.equals(Fraction.getReducedFraction(6, 8)));
         assertTrue(Fraction.ZERO.equals(Fraction.getReducedFraction(0, -1)));
         try {
             Fraction f = Fraction.getReducedFraction(1, 0);
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {
             // expected
         }
         assertEquals(Fraction.getReducedFraction
                 (2, Integer.MIN_VALUE).getNumerator(),-1);
         assertEquals(Fraction.getReducedFraction
                 (1, -1).getNumerator(), -1);
     }
 }

commit c22d4909757e7b2e7d785ae5eb95b51280e5fc21
Author: Phil Steitz <psteitz@apache.org>
Date:   Sat Sep 3 20:38:15 2005

    Merged changes from MATH_1_1 branch, r240245:r267516
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@267527 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/fraction/FractionTest.java b/src/test/org/apache/commons/math/fraction/FractionTest.java
--- a/src/test/org/apache/commons/math/fraction/FractionTest.java
+++ b/src/test/org/apache/commons/math/fraction/FractionTest.java
@@ -1,415 +1,445 @@
 /*
  * Copyright 2005 The Apache Software Foundation.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 package org.apache.commons.math.fraction;
 
 import org.apache.commons.math.ConvergenceException;
 
 import junit.framework.TestCase;
 
 /**
  * @version $Revision$ $Date$
  */
 public class FractionTest extends TestCase {
 
     private void assertFraction(int expectedNumerator, int expectedDenominator, Fraction actual) {
         assertEquals(expectedNumerator, actual.getNumerator());
         assertEquals(expectedDenominator, actual.getDenominator());
     }
     
     public void testConstructor() {
         assertFraction(0, 1, new Fraction(0, 1));
         assertFraction(0, 1, new Fraction(0, 2));
         assertFraction(0, 1, new Fraction(0, -1));
         assertFraction(1, 2, new Fraction(1, 2));
         assertFraction(1, 2, new Fraction(2, 4));
         assertFraction(-1, 2, new Fraction(-1, 2));
         assertFraction(-1, 2, new Fraction(1, -2));
         assertFraction(-1, 2, new Fraction(-2, 4));
         assertFraction(-1, 2, new Fraction(2, -4));
         
         // overflow
         try {
             new Fraction(Integer.MIN_VALUE, -1);
             fail();
         } catch (ArithmeticException ex) {
             // success
         }
         try {
             new Fraction(1, Integer.MIN_VALUE);
             fail();
         } catch (ArithmeticException ex) {
             // success
         }
         try {        
             assertFraction(0, 1, new Fraction(0.00000000000001));
             assertFraction(2, 5, new Fraction(0.40000000000001));
             assertFraction(15, 1, new Fraction(15.0000000000001));
             
         } catch (ConvergenceException ex) {
             fail(ex.getMessage());
         }
     }
     
     public void testCompareTo() {
         Fraction first = new Fraction(1, 2);
         Fraction second = new Fraction(1, 3);
         Fraction third = new Fraction(1, 2);
         
         assertEquals(0, first.compareTo(first));
         assertEquals(0, first.compareTo(third));
         assertEquals(1, first.compareTo(second));
         assertEquals(-1, second.compareTo(first));
     }
     
     public void testDoubleValue() {
         Fraction first = new Fraction(1, 2);
         Fraction second = new Fraction(1, 3);
 
         assertEquals(0.5, first.doubleValue(), 0.0);
         assertEquals(1.0 / 3.0, second.doubleValue(), 0.0);
     }
     
     public void testFloatValue() {
         Fraction first = new Fraction(1, 2);
         Fraction second = new Fraction(1, 3);
 
         assertEquals(0.5f, first.floatValue(), 0.0f);
         assertEquals((float)(1.0 / 3.0), second.floatValue(), 0.0f);
     }
     
     public void testIntValue() {
         Fraction first = new Fraction(1, 2);
         Fraction second = new Fraction(3, 2);
 
         assertEquals(0, first.intValue());
         assertEquals(1, second.intValue());
     }
     
     public void testLongValue() {
         Fraction first = new Fraction(1, 2);
         Fraction second = new Fraction(3, 2);
 
         assertEquals(0L, first.longValue());
         assertEquals(1L, second.longValue());
     }
     
     public void testConstructorDouble() {
         try {
             assertFraction(1, 2, new Fraction(0.5));
             assertFraction(1, 3, new Fraction(1.0 / 3.0));
             assertFraction(17, 100, new Fraction(17.0 / 100.0));
             assertFraction(317, 100, new Fraction(317.0 / 100.0));
             assertFraction(-1, 2, new Fraction(-0.5));
             assertFraction(-1, 3, new Fraction(-1.0 / 3.0));
             assertFraction(-17, 100, new Fraction(17.0 / -100.0));
             assertFraction(-317, 100, new Fraction(-317.0 / 100.0));
         } catch (ConvergenceException ex) {
             fail(ex.getMessage());
         }
     }
     
     public void testAbs() {
         Fraction a = new Fraction(10, 21);
         Fraction b = new Fraction(-10, 21);
         Fraction c = new Fraction(10, -21);
         
         assertFraction(10, 21, a.abs());
         assertFraction(10, 21, b.abs());
         assertFraction(10, 21, c.abs());
     }
     
     public void testReciprocal() {
         Fraction f = null;
         
         f = new Fraction(50, 75);
         f = f.reciprocal();
         assertEquals(3, f.getNumerator());
         assertEquals(2, f.getDenominator());
         
         f = new Fraction(4, 3);
         f = f.reciprocal();
         assertEquals(3, f.getNumerator());
         assertEquals(4, f.getDenominator());
         
         f = new Fraction(-15, 47);
         f = f.reciprocal();
         assertEquals(-47, f.getNumerator());
         assertEquals(15, f.getDenominator());
         
         f = new Fraction(0, 3);
         try {
             f = f.reciprocal();
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
 
         // large values
         f = new Fraction(Integer.MAX_VALUE, 1);
         f = f.reciprocal();
         assertEquals(1, f.getNumerator());
         assertEquals(Integer.MAX_VALUE, f.getDenominator());
     }
     
     public void testNegate() {
         Fraction f = null;
         
         f = new Fraction(50, 75);
         f = f.negate();
         assertEquals(-2, f.getNumerator());
         assertEquals(3, f.getDenominator());
         
         f = new Fraction(-50, 75);
         f = f.negate();
         assertEquals(2, f.getNumerator());
         assertEquals(3, f.getDenominator());
 
         // large values
         f = new Fraction(Integer.MAX_VALUE-1, Integer.MAX_VALUE);
         f = f.negate();
         assertEquals(Integer.MIN_VALUE+2, f.getNumerator());
         assertEquals(Integer.MAX_VALUE, f.getDenominator());
 
         f = new Fraction(Integer.MIN_VALUE, 1);
         try {
             f = f.negate();
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
     }
     
     public void testAdd() {
         Fraction a = new Fraction(1, 2);
         Fraction b = new Fraction(2, 3);
         
         assertFraction(1, 1, a.add(a));
         assertFraction(7, 6, a.add(b));
         assertFraction(7, 6, b.add(a));
         assertFraction(4, 3, b.add(b));
         
         Fraction f1 = new Fraction(Integer.MAX_VALUE - 1, 1);
         Fraction f2 = Fraction.ONE;
         Fraction f = f1.add(f2);
         assertEquals(Integer.MAX_VALUE, f.getNumerator());
         assertEquals(1, f.getDenominator());
         
         f1 = new Fraction(-1, 13*13*2*2);
         f2 = new Fraction(-2, 13*17*2);
         f = f1.add(f2);
         assertEquals(13*13*17*2*2, f.getDenominator());
         assertEquals(-17 - 2*13*2, f.getNumerator());
         
         try {
             f.add(null);
             fail("expecting IllegalArgumentException");
         } catch (IllegalArgumentException ex) {}
         
         // if this fraction is added naively, it will overflow.
         // check that it doesn't.
         f1 = new Fraction(1,32768*3);
         f2 = new Fraction(1,59049);
         f = f1.add(f2);
         assertEquals(52451, f.getNumerator());
         assertEquals(1934917632, f.getDenominator());
 
         f1 = new Fraction(Integer.MIN_VALUE, 3);
         f2 = new Fraction(1,3);
         f = f1.add(f2);
         assertEquals(Integer.MIN_VALUE+1, f.getNumerator());
         assertEquals(3, f.getDenominator());
         
         f1 = new Fraction(Integer.MAX_VALUE - 1, 1);
         f2 = Fraction.ONE;
         f = f1.add(f2);
         assertEquals(Integer.MAX_VALUE, f.getNumerator());
         assertEquals(1, f.getDenominator());
         
         try {
             f = f.add(Fraction.ONE); // should overflow
             fail("expecting ArithmeticException but got: " + f.toString());
         } catch (ArithmeticException ex) {}
         
         // denominator should not be a multiple of 2 or 3 to trigger overflow
         f1 = new Fraction(Integer.MIN_VALUE, 5);
         f2 = new Fraction(-1,5);
         try {
             f = f1.add(f2); // should overflow
             fail("expecting ArithmeticException but got: " + f.toString());
         } catch (ArithmeticException ex) {}
         
         try {
             f= new Fraction(-Integer.MAX_VALUE, 1);
             f = f.add(f);
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
         
         try {
             f= new Fraction(-Integer.MAX_VALUE, 1);
             f = f.add(f);
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
         
         f1 = new Fraction(3,327680);
         f2 = new Fraction(2,59049);
         try {
             f = f1.add(f2); // should overflow
             fail("expecting ArithmeticException but got: " + f.toString());
         } catch (ArithmeticException ex) {}
     }
     
     public void testDivide() {
         Fraction a = new Fraction(1, 2);
         Fraction b = new Fraction(2, 3);
         
         assertFraction(1, 1, a.divide(a));
         assertFraction(3, 4, a.divide(b));
         assertFraction(4, 3, b.divide(a));
         assertFraction(1, 1, b.divide(b));
         
         Fraction f1 = new Fraction(3, 5);
         Fraction f2 = Fraction.ZERO;
         try {
             Fraction f = f1.divide(f2);
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
         
         f1 = new Fraction(0, 5);
         f2 = new Fraction(2, 7);
         Fraction f = f1.divide(f2);
         assertSame(Fraction.ZERO, f);
         
         f1 = new Fraction(2, 7);
         f2 = Fraction.ONE;
         f = f1.divide(f2);
         assertEquals(2, f.getNumerator());
         assertEquals(7, f.getDenominator());
         
         f1 = new Fraction(1, Integer.MAX_VALUE);
         f = f1.divide(f1);  
         assertEquals(1, f.getNumerator());
         assertEquals(1, f.getDenominator());
         
         f1 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE);
         f2 = new Fraction(1, Integer.MAX_VALUE);
         f = f1.divide(f2);
         assertEquals(Integer.MIN_VALUE, f.getNumerator());
         assertEquals(1, f.getDenominator());
 
         try {
             f.divide(null);
             fail("IllegalArgumentException");
         } catch (IllegalArgumentException ex) {}
         
         try {
             f1 = new Fraction(1, Integer.MAX_VALUE);
             f = f1.divide(f1.reciprocal());  // should overflow
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
         try {
             f1 = new Fraction(1, -Integer.MAX_VALUE);
             f = f1.divide(f1.reciprocal());  // should overflow
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
     }
     
     public void testMultiply() {
         Fraction a = new Fraction(1, 2);
         Fraction b = new Fraction(2, 3);
         
         assertFraction(1, 4, a.multiply(a));
         assertFraction(1, 3, a.multiply(b));
         assertFraction(1, 3, b.multiply(a));
         assertFraction(4, 9, b.multiply(b));
         
         Fraction f1 = new Fraction(Integer.MAX_VALUE, 1);
         Fraction f2 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE);
         Fraction f = f1.multiply(f2);
         assertEquals(Integer.MIN_VALUE, f.getNumerator());
         assertEquals(1, f.getDenominator());
 
         try {
             f.multiply(null);
             fail("expecting IllegalArgumentException");
         } catch (IllegalArgumentException ex) {}
     }
     
     public void testSubtract() {
         Fraction a = new Fraction(1, 2);
         Fraction b = new Fraction(2, 3);
         
         assertFraction(0, 1, a.subtract(a));
         assertFraction(-1, 6, a.subtract(b));
         assertFraction(1, 6, b.subtract(a));
         assertFraction(0, 1, b.subtract(b));
         
         Fraction f = new Fraction(1,1);
         try {
             f.subtract(null);
             fail("expecting IllegalArgumentException");
         } catch (IllegalArgumentException ex) {}
         
         // if this fraction is subtracted naively, it will overflow.
         // check that it doesn't.
         Fraction f1 = new Fraction(1,32768*3);
         Fraction f2 = new Fraction(1,59049);
         f = f1.subtract(f2);
         assertEquals(-13085, f.getNumerator());
         assertEquals(1934917632, f.getDenominator());
 
         f1 = new Fraction(Integer.MIN_VALUE, 3);
         f2 = new Fraction(1,3).negate();
         f = f1.subtract(f2);
         assertEquals(Integer.MIN_VALUE+1, f.getNumerator());
         assertEquals(3, f.getDenominator());
         
         f1 = new Fraction(Integer.MAX_VALUE, 1);
         f2 = Fraction.ONE;
         f = f1.subtract(f2);
         assertEquals(Integer.MAX_VALUE-1, f.getNumerator());
         assertEquals(1, f.getDenominator());
 
         try {
             f1 = new Fraction(1, Integer.MAX_VALUE);
             f2 = new Fraction(1, Integer.MAX_VALUE - 1);
             f = f1.subtract(f2);
             fail("expecting ArithmeticException");  //should overflow
         } catch (ArithmeticException ex) {}
         
         // denominator should not be a multiple of 2 or 3 to trigger overflow
         f1 = new Fraction(Integer.MIN_VALUE, 5);
         f2 = new Fraction(1,5);
         try {
             f = f1.subtract(f2); // should overflow
             fail("expecting ArithmeticException but got: " + f.toString());
         } catch (ArithmeticException ex) {}
         
         try {
             f= new Fraction(Integer.MIN_VALUE, 1);
             f = f.subtract(Fraction.ONE);
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
         
         try {
             f= new Fraction(Integer.MAX_VALUE, 1);
             f = f.subtract(Fraction.ONE.negate());
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
         
         f1 = new Fraction(3,327680);
         f2 = new Fraction(2,59049);
         try {
             f = f1.subtract(f2); // should overflow
             fail("expecting ArithmeticException but got: " + f.toString());
         } catch (ArithmeticException ex) {}
     }
+    
+    public void testEqualsAndHashCode() {
+        Fraction zero  = new Fraction(0,1);
+        Fraction nullFraction = null;
+        int zeroHash = zero.hashCode();
+        assertTrue( zero.equals(zero));
+        assertFalse(zero.equals(nullFraction));
+        assertFalse(zero.equals(new Double(0)));
+        Fraction zero2 = new Fraction(0,2);
+        assertTrue(zero.equals(zero2));
+        assertEquals(zero.hashCode(), zero2.hashCode());
+        Fraction one = new Fraction(1,1);
+        assertFalse((one.equals(zero) ||zero.equals(one)));
+    }
+    
+    public void testGetReducedFraction() {
+        Fraction threeFourths = new Fraction(3, 4);
+        assertTrue(threeFourths.equals(Fraction.getReducedFraction(6, 8)));
+        assertTrue(Fraction.ZERO.equals(Fraction.getReducedFraction(0, -1)));
+        try {
+            Fraction f = Fraction.getReducedFraction(1, 0);
+            fail("expecting ArithmeticException");
+        } catch (ArithmeticException ex) {
+            // expected
+        }
+        assertEquals(Fraction.getReducedFraction
+                (2, Integer.MIN_VALUE).getNumerator(),-1);
+        assertEquals(Fraction.getReducedFraction
+                (1, -1).getNumerator(), -1);
+    }
 }

commit 12bc799c682404b914e85e16462a6e675d5b2df4
Author: Phil Steitz <psteitz@apache.org>
Date:   Sat Jun 25 21:52:37 2005

    Changed Fraction(double) to correctly handle near-integral arguments.
    PR # 35434
    Submitted by: JÃ¶rg Weimar
    
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@201813 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/fraction/FractionTest.java b/src/test/org/apache/commons/math/fraction/FractionTest.java
--- a/src/test/org/apache/commons/math/fraction/FractionTest.java
+++ b/src/test/org/apache/commons/math/fraction/FractionTest.java
@@ -1,407 +1,415 @@
 /*
  * Copyright 2005 The Apache Software Foundation.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 package org.apache.commons.math.fraction;
 
 import org.apache.commons.math.ConvergenceException;
 
 import junit.framework.TestCase;
 
 /**
  * @version $Revision$ $Date$
  */
 public class FractionTest extends TestCase {
 
     private void assertFraction(int expectedNumerator, int expectedDenominator, Fraction actual) {
         assertEquals(expectedNumerator, actual.getNumerator());
         assertEquals(expectedDenominator, actual.getDenominator());
     }
     
     public void testConstructor() {
         assertFraction(0, 1, new Fraction(0, 1));
         assertFraction(0, 1, new Fraction(0, 2));
         assertFraction(0, 1, new Fraction(0, -1));
         assertFraction(1, 2, new Fraction(1, 2));
         assertFraction(1, 2, new Fraction(2, 4));
         assertFraction(-1, 2, new Fraction(-1, 2));
         assertFraction(-1, 2, new Fraction(1, -2));
         assertFraction(-1, 2, new Fraction(-2, 4));
         assertFraction(-1, 2, new Fraction(2, -4));
         
         // overflow
         try {
             new Fraction(Integer.MIN_VALUE, -1);
             fail();
         } catch (ArithmeticException ex) {
             // success
         }
         try {
             new Fraction(1, Integer.MIN_VALUE);
             fail();
         } catch (ArithmeticException ex) {
             // success
         }
+        try {        
+            assertFraction(0, 1, new Fraction(0.00000000000001));
+            assertFraction(2, 5, new Fraction(0.40000000000001));
+            assertFraction(15, 1, new Fraction(15.0000000000001));
+            
+        } catch (ConvergenceException ex) {
+            fail(ex.getMessage());
+        }
     }
     
     public void testCompareTo() {
         Fraction first = new Fraction(1, 2);
         Fraction second = new Fraction(1, 3);
         Fraction third = new Fraction(1, 2);
         
         assertEquals(0, first.compareTo(first));
         assertEquals(0, first.compareTo(third));
         assertEquals(1, first.compareTo(second));
         assertEquals(-1, second.compareTo(first));
     }
     
     public void testDoubleValue() {
         Fraction first = new Fraction(1, 2);
         Fraction second = new Fraction(1, 3);
 
         assertEquals(0.5, first.doubleValue(), 0.0);
         assertEquals(1.0 / 3.0, second.doubleValue(), 0.0);
     }
     
     public void testFloatValue() {
         Fraction first = new Fraction(1, 2);
         Fraction second = new Fraction(1, 3);
 
         assertEquals(0.5f, first.floatValue(), 0.0f);
         assertEquals((float)(1.0 / 3.0), second.floatValue(), 0.0f);
     }
     
     public void testIntValue() {
         Fraction first = new Fraction(1, 2);
         Fraction second = new Fraction(3, 2);
 
         assertEquals(0, first.intValue());
         assertEquals(1, second.intValue());
     }
     
     public void testLongValue() {
         Fraction first = new Fraction(1, 2);
         Fraction second = new Fraction(3, 2);
 
         assertEquals(0L, first.longValue());
         assertEquals(1L, second.longValue());
     }
     
     public void testConstructorDouble() {
         try {
             assertFraction(1, 2, new Fraction(0.5));
             assertFraction(1, 3, new Fraction(1.0 / 3.0));
             assertFraction(17, 100, new Fraction(17.0 / 100.0));
             assertFraction(317, 100, new Fraction(317.0 / 100.0));
             assertFraction(-1, 2, new Fraction(-0.5));
             assertFraction(-1, 3, new Fraction(-1.0 / 3.0));
             assertFraction(-17, 100, new Fraction(17.0 / -100.0));
             assertFraction(-317, 100, new Fraction(-317.0 / 100.0));
         } catch (ConvergenceException ex) {
             fail(ex.getMessage());
         }
     }
     
     public void testAbs() {
         Fraction a = new Fraction(10, 21);
         Fraction b = new Fraction(-10, 21);
         Fraction c = new Fraction(10, -21);
         
         assertFraction(10, 21, a.abs());
         assertFraction(10, 21, b.abs());
         assertFraction(10, 21, c.abs());
     }
     
     public void testReciprocal() {
         Fraction f = null;
         
         f = new Fraction(50, 75);
         f = f.reciprocal();
         assertEquals(3, f.getNumerator());
         assertEquals(2, f.getDenominator());
         
         f = new Fraction(4, 3);
         f = f.reciprocal();
         assertEquals(3, f.getNumerator());
         assertEquals(4, f.getDenominator());
         
         f = new Fraction(-15, 47);
         f = f.reciprocal();
         assertEquals(-47, f.getNumerator());
         assertEquals(15, f.getDenominator());
         
         f = new Fraction(0, 3);
         try {
             f = f.reciprocal();
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
 
         // large values
         f = new Fraction(Integer.MAX_VALUE, 1);
         f = f.reciprocal();
         assertEquals(1, f.getNumerator());
         assertEquals(Integer.MAX_VALUE, f.getDenominator());
     }
     
     public void testNegate() {
         Fraction f = null;
         
         f = new Fraction(50, 75);
         f = f.negate();
         assertEquals(-2, f.getNumerator());
         assertEquals(3, f.getDenominator());
         
         f = new Fraction(-50, 75);
         f = f.negate();
         assertEquals(2, f.getNumerator());
         assertEquals(3, f.getDenominator());
 
         // large values
         f = new Fraction(Integer.MAX_VALUE-1, Integer.MAX_VALUE);
         f = f.negate();
         assertEquals(Integer.MIN_VALUE+2, f.getNumerator());
         assertEquals(Integer.MAX_VALUE, f.getDenominator());
 
         f = new Fraction(Integer.MIN_VALUE, 1);
         try {
             f = f.negate();
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
     }
     
     public void testAdd() {
         Fraction a = new Fraction(1, 2);
         Fraction b = new Fraction(2, 3);
         
         assertFraction(1, 1, a.add(a));
         assertFraction(7, 6, a.add(b));
         assertFraction(7, 6, b.add(a));
         assertFraction(4, 3, b.add(b));
         
         Fraction f1 = new Fraction(Integer.MAX_VALUE - 1, 1);
         Fraction f2 = Fraction.ONE;
         Fraction f = f1.add(f2);
         assertEquals(Integer.MAX_VALUE, f.getNumerator());
         assertEquals(1, f.getDenominator());
         
         f1 = new Fraction(-1, 13*13*2*2);
         f2 = new Fraction(-2, 13*17*2);
         f = f1.add(f2);
         assertEquals(13*13*17*2*2, f.getDenominator());
         assertEquals(-17 - 2*13*2, f.getNumerator());
         
         try {
             f.add(null);
             fail("expecting IllegalArgumentException");
         } catch (IllegalArgumentException ex) {}
         
         // if this fraction is added naively, it will overflow.
         // check that it doesn't.
         f1 = new Fraction(1,32768*3);
         f2 = new Fraction(1,59049);
         f = f1.add(f2);
         assertEquals(52451, f.getNumerator());
         assertEquals(1934917632, f.getDenominator());
 
         f1 = new Fraction(Integer.MIN_VALUE, 3);
         f2 = new Fraction(1,3);
         f = f1.add(f2);
         assertEquals(Integer.MIN_VALUE+1, f.getNumerator());
         assertEquals(3, f.getDenominator());
         
         f1 = new Fraction(Integer.MAX_VALUE - 1, 1);
         f2 = Fraction.ONE;
         f = f1.add(f2);
         assertEquals(Integer.MAX_VALUE, f.getNumerator());
         assertEquals(1, f.getDenominator());
         
         try {
             f = f.add(Fraction.ONE); // should overflow
             fail("expecting ArithmeticException but got: " + f.toString());
         } catch (ArithmeticException ex) {}
         
         // denominator should not be a multiple of 2 or 3 to trigger overflow
         f1 = new Fraction(Integer.MIN_VALUE, 5);
         f2 = new Fraction(-1,5);
         try {
             f = f1.add(f2); // should overflow
             fail("expecting ArithmeticException but got: " + f.toString());
         } catch (ArithmeticException ex) {}
         
         try {
             f= new Fraction(-Integer.MAX_VALUE, 1);
             f = f.add(f);
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
         
         try {
             f= new Fraction(-Integer.MAX_VALUE, 1);
             f = f.add(f);
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
         
         f1 = new Fraction(3,327680);
         f2 = new Fraction(2,59049);
         try {
             f = f1.add(f2); // should overflow
             fail("expecting ArithmeticException but got: " + f.toString());
         } catch (ArithmeticException ex) {}
     }
     
     public void testDivide() {
         Fraction a = new Fraction(1, 2);
         Fraction b = new Fraction(2, 3);
         
         assertFraction(1, 1, a.divide(a));
         assertFraction(3, 4, a.divide(b));
         assertFraction(4, 3, b.divide(a));
         assertFraction(1, 1, b.divide(b));
         
         Fraction f1 = new Fraction(3, 5);
         Fraction f2 = Fraction.ZERO;
         try {
             Fraction f = f1.divide(f2);
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
         
         f1 = new Fraction(0, 5);
         f2 = new Fraction(2, 7);
         Fraction f = f1.divide(f2);
         assertSame(Fraction.ZERO, f);
         
         f1 = new Fraction(2, 7);
         f2 = Fraction.ONE;
         f = f1.divide(f2);
         assertEquals(2, f.getNumerator());
         assertEquals(7, f.getDenominator());
         
         f1 = new Fraction(1, Integer.MAX_VALUE);
         f = f1.divide(f1);  
         assertEquals(1, f.getNumerator());
         assertEquals(1, f.getDenominator());
         
         f1 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE);
         f2 = new Fraction(1, Integer.MAX_VALUE);
         f = f1.divide(f2);
         assertEquals(Integer.MIN_VALUE, f.getNumerator());
         assertEquals(1, f.getDenominator());
 
         try {
             f.divide(null);
             fail("IllegalArgumentException");
         } catch (IllegalArgumentException ex) {}
         
         try {
             f1 = new Fraction(1, Integer.MAX_VALUE);
             f = f1.divide(f1.reciprocal());  // should overflow
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
         try {
             f1 = new Fraction(1, -Integer.MAX_VALUE);
             f = f1.divide(f1.reciprocal());  // should overflow
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
     }
     
     public void testMultiply() {
         Fraction a = new Fraction(1, 2);
         Fraction b = new Fraction(2, 3);
         
         assertFraction(1, 4, a.multiply(a));
         assertFraction(1, 3, a.multiply(b));
         assertFraction(1, 3, b.multiply(a));
         assertFraction(4, 9, b.multiply(b));
         
         Fraction f1 = new Fraction(Integer.MAX_VALUE, 1);
         Fraction f2 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE);
         Fraction f = f1.multiply(f2);
         assertEquals(Integer.MIN_VALUE, f.getNumerator());
         assertEquals(1, f.getDenominator());
 
         try {
             f.multiply(null);
             fail("expecting IllegalArgumentException");
         } catch (IllegalArgumentException ex) {}
     }
     
     public void testSubtract() {
         Fraction a = new Fraction(1, 2);
         Fraction b = new Fraction(2, 3);
         
         assertFraction(0, 1, a.subtract(a));
         assertFraction(-1, 6, a.subtract(b));
         assertFraction(1, 6, b.subtract(a));
         assertFraction(0, 1, b.subtract(b));
         
         Fraction f = new Fraction(1,1);
         try {
             f.subtract(null);
             fail("expecting IllegalArgumentException");
         } catch (IllegalArgumentException ex) {}
         
         // if this fraction is subtracted naively, it will overflow.
         // check that it doesn't.
         Fraction f1 = new Fraction(1,32768*3);
         Fraction f2 = new Fraction(1,59049);
         f = f1.subtract(f2);
         assertEquals(-13085, f.getNumerator());
         assertEquals(1934917632, f.getDenominator());
 
         f1 = new Fraction(Integer.MIN_VALUE, 3);
         f2 = new Fraction(1,3).negate();
         f = f1.subtract(f2);
         assertEquals(Integer.MIN_VALUE+1, f.getNumerator());
         assertEquals(3, f.getDenominator());
         
         f1 = new Fraction(Integer.MAX_VALUE, 1);
         f2 = Fraction.ONE;
         f = f1.subtract(f2);
         assertEquals(Integer.MAX_VALUE-1, f.getNumerator());
         assertEquals(1, f.getDenominator());
 
         try {
             f1 = new Fraction(1, Integer.MAX_VALUE);
             f2 = new Fraction(1, Integer.MAX_VALUE - 1);
             f = f1.subtract(f2);
             fail("expecting ArithmeticException");  //should overflow
         } catch (ArithmeticException ex) {}
         
         // denominator should not be a multiple of 2 or 3 to trigger overflow
         f1 = new Fraction(Integer.MIN_VALUE, 5);
         f2 = new Fraction(1,5);
         try {
             f = f1.subtract(f2); // should overflow
             fail("expecting ArithmeticException but got: " + f.toString());
         } catch (ArithmeticException ex) {}
         
         try {
             f= new Fraction(Integer.MIN_VALUE, 1);
             f = f.subtract(Fraction.ONE);
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
         
         try {
             f= new Fraction(Integer.MAX_VALUE, 1);
             f = f.subtract(Fraction.ONE.negate());
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
         
         f1 = new Fraction(3,327680);
         f2 = new Fraction(2,59049);
         try {
             f = f1.subtract(f2); // should overflow
             fail("expecting ArithmeticException but got: " + f.toString());
         } catch (ArithmeticException ex) {}
     }
 }

commit b64000af437bfa5282f94ac0dfd2a0b1994af099
Author: Brent Worden <brentworden@apache.org>
Date:   Sun May 22 01:25:44 2005

    fixed javadoc comments, added @since tags to new classes and methods, corrected hyperlinks in user guide, add fraction unit tests.
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@171283 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/fraction/FractionTest.java b/src/test/org/apache/commons/math/fraction/FractionTest.java
--- a/src/test/org/apache/commons/math/fraction/FractionTest.java
+++ b/src/test/org/apache/commons/math/fraction/FractionTest.java
@@ -1,350 +1,407 @@
 /*
  * Copyright 2005 The Apache Software Foundation.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 package org.apache.commons.math.fraction;
 
 import org.apache.commons.math.ConvergenceException;
 
 import junit.framework.TestCase;
 
 /**
  * @version $Revision$ $Date$
  */
 public class FractionTest extends TestCase {
 
     private void assertFraction(int expectedNumerator, int expectedDenominator, Fraction actual) {
         assertEquals(expectedNumerator, actual.getNumerator());
         assertEquals(expectedDenominator, actual.getDenominator());
     }
     
     public void testConstructor() {
         assertFraction(0, 1, new Fraction(0, 1));
         assertFraction(0, 1, new Fraction(0, 2));
         assertFraction(0, 1, new Fraction(0, -1));
         assertFraction(1, 2, new Fraction(1, 2));
         assertFraction(1, 2, new Fraction(2, 4));
         assertFraction(-1, 2, new Fraction(-1, 2));
         assertFraction(-1, 2, new Fraction(1, -2));
         assertFraction(-1, 2, new Fraction(-2, 4));
         assertFraction(-1, 2, new Fraction(2, -4));
+        
+        // overflow
+        try {
+            new Fraction(Integer.MIN_VALUE, -1);
+            fail();
+        } catch (ArithmeticException ex) {
+            // success
+        }
+        try {
+            new Fraction(1, Integer.MIN_VALUE);
+            fail();
+        } catch (ArithmeticException ex) {
+            // success
+        }
+    }
+    
+    public void testCompareTo() {
+        Fraction first = new Fraction(1, 2);
+        Fraction second = new Fraction(1, 3);
+        Fraction third = new Fraction(1, 2);
+        
+        assertEquals(0, first.compareTo(first));
+        assertEquals(0, first.compareTo(third));
+        assertEquals(1, first.compareTo(second));
+        assertEquals(-1, second.compareTo(first));
+    }
+    
+    public void testDoubleValue() {
+        Fraction first = new Fraction(1, 2);
+        Fraction second = new Fraction(1, 3);
+
+        assertEquals(0.5, first.doubleValue(), 0.0);
+        assertEquals(1.0 / 3.0, second.doubleValue(), 0.0);
+    }
+    
+    public void testFloatValue() {
+        Fraction first = new Fraction(1, 2);
+        Fraction second = new Fraction(1, 3);
+
+        assertEquals(0.5f, first.floatValue(), 0.0f);
+        assertEquals((float)(1.0 / 3.0), second.floatValue(), 0.0f);
+    }
+    
+    public void testIntValue() {
+        Fraction first = new Fraction(1, 2);
+        Fraction second = new Fraction(3, 2);
+
+        assertEquals(0, first.intValue());
+        assertEquals(1, second.intValue());
+    }
+    
+    public void testLongValue() {
+        Fraction first = new Fraction(1, 2);
+        Fraction second = new Fraction(3, 2);
+
+        assertEquals(0L, first.longValue());
+        assertEquals(1L, second.longValue());
     }
     
     public void testConstructorDouble() {
         try {
             assertFraction(1, 2, new Fraction(0.5));
             assertFraction(1, 3, new Fraction(1.0 / 3.0));
             assertFraction(17, 100, new Fraction(17.0 / 100.0));
             assertFraction(317, 100, new Fraction(317.0 / 100.0));
             assertFraction(-1, 2, new Fraction(-0.5));
             assertFraction(-1, 3, new Fraction(-1.0 / 3.0));
             assertFraction(-17, 100, new Fraction(17.0 / -100.0));
             assertFraction(-317, 100, new Fraction(-317.0 / 100.0));
         } catch (ConvergenceException ex) {
             fail(ex.getMessage());
         }
     }
     
     public void testAbs() {
         Fraction a = new Fraction(10, 21);
         Fraction b = new Fraction(-10, 21);
         Fraction c = new Fraction(10, -21);
         
         assertFraction(10, 21, a.abs());
         assertFraction(10, 21, b.abs());
         assertFraction(10, 21, c.abs());
     }
     
     public void testReciprocal() {
         Fraction f = null;
         
         f = new Fraction(50, 75);
         f = f.reciprocal();
         assertEquals(3, f.getNumerator());
         assertEquals(2, f.getDenominator());
         
         f = new Fraction(4, 3);
         f = f.reciprocal();
         assertEquals(3, f.getNumerator());
         assertEquals(4, f.getDenominator());
         
         f = new Fraction(-15, 47);
         f = f.reciprocal();
         assertEquals(-47, f.getNumerator());
         assertEquals(15, f.getDenominator());
         
         f = new Fraction(0, 3);
         try {
             f = f.reciprocal();
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
 
         // large values
         f = new Fraction(Integer.MAX_VALUE, 1);
         f = f.reciprocal();
         assertEquals(1, f.getNumerator());
         assertEquals(Integer.MAX_VALUE, f.getDenominator());
     }
     
     public void testNegate() {
         Fraction f = null;
         
         f = new Fraction(50, 75);
         f = f.negate();
         assertEquals(-2, f.getNumerator());
         assertEquals(3, f.getDenominator());
         
         f = new Fraction(-50, 75);
         f = f.negate();
         assertEquals(2, f.getNumerator());
         assertEquals(3, f.getDenominator());
 
         // large values
         f = new Fraction(Integer.MAX_VALUE-1, Integer.MAX_VALUE);
         f = f.negate();
         assertEquals(Integer.MIN_VALUE+2, f.getNumerator());
         assertEquals(Integer.MAX_VALUE, f.getDenominator());
 
         f = new Fraction(Integer.MIN_VALUE, 1);
         try {
             f = f.negate();
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
     }
     
     public void testAdd() {
         Fraction a = new Fraction(1, 2);
         Fraction b = new Fraction(2, 3);
         
         assertFraction(1, 1, a.add(a));
         assertFraction(7, 6, a.add(b));
         assertFraction(7, 6, b.add(a));
         assertFraction(4, 3, b.add(b));
         
         Fraction f1 = new Fraction(Integer.MAX_VALUE - 1, 1);
         Fraction f2 = Fraction.ONE;
         Fraction f = f1.add(f2);
         assertEquals(Integer.MAX_VALUE, f.getNumerator());
         assertEquals(1, f.getDenominator());
         
         f1 = new Fraction(-1, 13*13*2*2);
         f2 = new Fraction(-2, 13*17*2);
         f = f1.add(f2);
         assertEquals(13*13*17*2*2, f.getDenominator());
         assertEquals(-17 - 2*13*2, f.getNumerator());
         
         try {
             f.add(null);
             fail("expecting IllegalArgumentException");
         } catch (IllegalArgumentException ex) {}
         
         // if this fraction is added naively, it will overflow.
         // check that it doesn't.
         f1 = new Fraction(1,32768*3);
         f2 = new Fraction(1,59049);
         f = f1.add(f2);
         assertEquals(52451, f.getNumerator());
         assertEquals(1934917632, f.getDenominator());
 
         f1 = new Fraction(Integer.MIN_VALUE, 3);
         f2 = new Fraction(1,3);
         f = f1.add(f2);
         assertEquals(Integer.MIN_VALUE+1, f.getNumerator());
         assertEquals(3, f.getDenominator());
         
         f1 = new Fraction(Integer.MAX_VALUE - 1, 1);
         f2 = Fraction.ONE;
         f = f1.add(f2);
         assertEquals(Integer.MAX_VALUE, f.getNumerator());
         assertEquals(1, f.getDenominator());
         
         try {
             f = f.add(Fraction.ONE); // should overflow
             fail("expecting ArithmeticException but got: " + f.toString());
         } catch (ArithmeticException ex) {}
         
         // denominator should not be a multiple of 2 or 3 to trigger overflow
         f1 = new Fraction(Integer.MIN_VALUE, 5);
         f2 = new Fraction(-1,5);
         try {
             f = f1.add(f2); // should overflow
             fail("expecting ArithmeticException but got: " + f.toString());
         } catch (ArithmeticException ex) {}
         
         try {
             f= new Fraction(-Integer.MAX_VALUE, 1);
             f = f.add(f);
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
         
         try {
             f= new Fraction(-Integer.MAX_VALUE, 1);
             f = f.add(f);
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
         
         f1 = new Fraction(3,327680);
         f2 = new Fraction(2,59049);
         try {
             f = f1.add(f2); // should overflow
             fail("expecting ArithmeticException but got: " + f.toString());
         } catch (ArithmeticException ex) {}
     }
     
     public void testDivide() {
         Fraction a = new Fraction(1, 2);
         Fraction b = new Fraction(2, 3);
         
         assertFraction(1, 1, a.divide(a));
         assertFraction(3, 4, a.divide(b));
         assertFraction(4, 3, b.divide(a));
         assertFraction(1, 1, b.divide(b));
         
         Fraction f1 = new Fraction(3, 5);
         Fraction f2 = Fraction.ZERO;
         try {
             Fraction f = f1.divide(f2);
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
         
         f1 = new Fraction(0, 5);
         f2 = new Fraction(2, 7);
         Fraction f = f1.divide(f2);
         assertSame(Fraction.ZERO, f);
         
         f1 = new Fraction(2, 7);
         f2 = Fraction.ONE;
         f = f1.divide(f2);
         assertEquals(2, f.getNumerator());
         assertEquals(7, f.getDenominator());
         
         f1 = new Fraction(1, Integer.MAX_VALUE);
         f = f1.divide(f1);  
         assertEquals(1, f.getNumerator());
         assertEquals(1, f.getDenominator());
         
         f1 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE);
         f2 = new Fraction(1, Integer.MAX_VALUE);
         f = f1.divide(f2);
         assertEquals(Integer.MIN_VALUE, f.getNumerator());
         assertEquals(1, f.getDenominator());
 
         try {
             f.divide(null);
             fail("IllegalArgumentException");
         } catch (IllegalArgumentException ex) {}
         
         try {
             f1 = new Fraction(1, Integer.MAX_VALUE);
             f = f1.divide(f1.reciprocal());  // should overflow
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
         try {
             f1 = new Fraction(1, -Integer.MAX_VALUE);
             f = f1.divide(f1.reciprocal());  // should overflow
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
     }
     
     public void testMultiply() {
         Fraction a = new Fraction(1, 2);
         Fraction b = new Fraction(2, 3);
         
         assertFraction(1, 4, a.multiply(a));
         assertFraction(1, 3, a.multiply(b));
         assertFraction(1, 3, b.multiply(a));
         assertFraction(4, 9, b.multiply(b));
         
         Fraction f1 = new Fraction(Integer.MAX_VALUE, 1);
         Fraction f2 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE);
         Fraction f = f1.multiply(f2);
         assertEquals(Integer.MIN_VALUE, f.getNumerator());
         assertEquals(1, f.getDenominator());
 
         try {
             f.multiply(null);
             fail("expecting IllegalArgumentException");
         } catch (IllegalArgumentException ex) {}
     }
     
     public void testSubtract() {
         Fraction a = new Fraction(1, 2);
         Fraction b = new Fraction(2, 3);
         
         assertFraction(0, 1, a.subtract(a));
         assertFraction(-1, 6, a.subtract(b));
         assertFraction(1, 6, b.subtract(a));
         assertFraction(0, 1, b.subtract(b));
         
         Fraction f = new Fraction(1,1);
         try {
             f.subtract(null);
             fail("expecting IllegalArgumentException");
         } catch (IllegalArgumentException ex) {}
         
         // if this fraction is subtracted naively, it will overflow.
         // check that it doesn't.
         Fraction f1 = new Fraction(1,32768*3);
         Fraction f2 = new Fraction(1,59049);
         f = f1.subtract(f2);
         assertEquals(-13085, f.getNumerator());
         assertEquals(1934917632, f.getDenominator());
 
         f1 = new Fraction(Integer.MIN_VALUE, 3);
         f2 = new Fraction(1,3).negate();
         f = f1.subtract(f2);
         assertEquals(Integer.MIN_VALUE+1, f.getNumerator());
         assertEquals(3, f.getDenominator());
         
         f1 = new Fraction(Integer.MAX_VALUE, 1);
         f2 = Fraction.ONE;
         f = f1.subtract(f2);
         assertEquals(Integer.MAX_VALUE-1, f.getNumerator());
         assertEquals(1, f.getDenominator());
 
         try {
             f1 = new Fraction(1, Integer.MAX_VALUE);
             f2 = new Fraction(1, Integer.MAX_VALUE - 1);
             f = f1.subtract(f2);
             fail("expecting ArithmeticException");  //should overflow
         } catch (ArithmeticException ex) {}
         
         // denominator should not be a multiple of 2 or 3 to trigger overflow
         f1 = new Fraction(Integer.MIN_VALUE, 5);
         f2 = new Fraction(1,5);
         try {
             f = f1.subtract(f2); // should overflow
             fail("expecting ArithmeticException but got: " + f.toString());
         } catch (ArithmeticException ex) {}
         
         try {
             f= new Fraction(Integer.MIN_VALUE, 1);
             f = f.subtract(Fraction.ONE);
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
         
         try {
             f= new Fraction(Integer.MAX_VALUE, 1);
             f = f.subtract(Fraction.ONE.negate());
             fail("expecting ArithmeticException");
         } catch (ArithmeticException ex) {}
         
         f1 = new Fraction(3,327680);
         f2 = new Fraction(2,59049);
         try {
             f = f1.subtract(f2); // should overflow
             fail("expecting ArithmeticException but got: " + f.toString());
         } catch (ArithmeticException ex) {}
     }
 }

commit 20786a617657c0c20315005c621052a2735dfe67
Author: Phil Steitz <psteitz@apache.org>
Date:   Wed May 4 01:14:59 2005

    Ported numerics improvements in commons lang Fraction implementation.
    Added utility methods for overflow-checked integer arithmetic and
    improved gcd method in MathUtils.
    
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@168072 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/fraction/FractionTest.java b/src/test/org/apache/commons/math/fraction/FractionTest.java
--- a/src/test/org/apache/commons/math/fraction/FractionTest.java
+++ b/src/test/org/apache/commons/math/fraction/FractionTest.java
@@ -1,108 +1,350 @@
 /*
  * Copyright 2005 The Apache Software Foundation.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 package org.apache.commons.math.fraction;
 
 import org.apache.commons.math.ConvergenceException;
 
 import junit.framework.TestCase;
 
 /**
  * @version $Revision$ $Date$
  */
 public class FractionTest extends TestCase {
 
     private void assertFraction(int expectedNumerator, int expectedDenominator, Fraction actual) {
         assertEquals(expectedNumerator, actual.getNumerator());
         assertEquals(expectedDenominator, actual.getDenominator());
     }
     
     public void testConstructor() {
         assertFraction(0, 1, new Fraction(0, 1));
         assertFraction(0, 1, new Fraction(0, 2));
         assertFraction(0, 1, new Fraction(0, -1));
         assertFraction(1, 2, new Fraction(1, 2));
         assertFraction(1, 2, new Fraction(2, 4));
         assertFraction(-1, 2, new Fraction(-1, 2));
         assertFraction(-1, 2, new Fraction(1, -2));
         assertFraction(-1, 2, new Fraction(-2, 4));
         assertFraction(-1, 2, new Fraction(2, -4));
     }
     
     public void testConstructorDouble() {
         try {
             assertFraction(1, 2, new Fraction(0.5));
             assertFraction(1, 3, new Fraction(1.0 / 3.0));
             assertFraction(17, 100, new Fraction(17.0 / 100.0));
             assertFraction(317, 100, new Fraction(317.0 / 100.0));
             assertFraction(-1, 2, new Fraction(-0.5));
             assertFraction(-1, 3, new Fraction(-1.0 / 3.0));
             assertFraction(-17, 100, new Fraction(17.0 / -100.0));
             assertFraction(-317, 100, new Fraction(-317.0 / 100.0));
         } catch (ConvergenceException ex) {
             fail(ex.getMessage());
         }
     }
     
     public void testAbs() {
         Fraction a = new Fraction(10, 21);
         Fraction b = new Fraction(-10, 21);
         Fraction c = new Fraction(10, -21);
         
         assertFraction(10, 21, a.abs());
         assertFraction(10, 21, b.abs());
         assertFraction(10, 21, c.abs());
     }
     
+    public void testReciprocal() {
+        Fraction f = null;
+        
+        f = new Fraction(50, 75);
+        f = f.reciprocal();
+        assertEquals(3, f.getNumerator());
+        assertEquals(2, f.getDenominator());
+        
+        f = new Fraction(4, 3);
+        f = f.reciprocal();
+        assertEquals(3, f.getNumerator());
+        assertEquals(4, f.getDenominator());
+        
+        f = new Fraction(-15, 47);
+        f = f.reciprocal();
+        assertEquals(-47, f.getNumerator());
+        assertEquals(15, f.getDenominator());
+        
+        f = new Fraction(0, 3);
+        try {
+            f = f.reciprocal();
+            fail("expecting ArithmeticException");
+        } catch (ArithmeticException ex) {}
+
+        // large values
+        f = new Fraction(Integer.MAX_VALUE, 1);
+        f = f.reciprocal();
+        assertEquals(1, f.getNumerator());
+        assertEquals(Integer.MAX_VALUE, f.getDenominator());
+    }
+    
+    public void testNegate() {
+        Fraction f = null;
+        
+        f = new Fraction(50, 75);
+        f = f.negate();
+        assertEquals(-2, f.getNumerator());
+        assertEquals(3, f.getDenominator());
+        
+        f = new Fraction(-50, 75);
+        f = f.negate();
+        assertEquals(2, f.getNumerator());
+        assertEquals(3, f.getDenominator());
+
+        // large values
+        f = new Fraction(Integer.MAX_VALUE-1, Integer.MAX_VALUE);
+        f = f.negate();
+        assertEquals(Integer.MIN_VALUE+2, f.getNumerator());
+        assertEquals(Integer.MAX_VALUE, f.getDenominator());
+
+        f = new Fraction(Integer.MIN_VALUE, 1);
+        try {
+            f = f.negate();
+            fail("expecting ArithmeticException");
+        } catch (ArithmeticException ex) {}
+    }
+    
     public void testAdd() {
         Fraction a = new Fraction(1, 2);
         Fraction b = new Fraction(2, 3);
         
         assertFraction(1, 1, a.add(a));
         assertFraction(7, 6, a.add(b));
         assertFraction(7, 6, b.add(a));
         assertFraction(4, 3, b.add(b));
+        
+        Fraction f1 = new Fraction(Integer.MAX_VALUE - 1, 1);
+        Fraction f2 = Fraction.ONE;
+        Fraction f = f1.add(f2);
+        assertEquals(Integer.MAX_VALUE, f.getNumerator());
+        assertEquals(1, f.getDenominator());
+        
+        f1 = new Fraction(-1, 13*13*2*2);
+        f2 = new Fraction(-2, 13*17*2);
+        f = f1.add(f2);
+        assertEquals(13*13*17*2*2, f.getDenominator());
+        assertEquals(-17 - 2*13*2, f.getNumerator());
+        
+        try {
+            f.add(null);
+            fail("expecting IllegalArgumentException");
+        } catch (IllegalArgumentException ex) {}
+        
+        // if this fraction is added naively, it will overflow.
+        // check that it doesn't.
+        f1 = new Fraction(1,32768*3);
+        f2 = new Fraction(1,59049);
+        f = f1.add(f2);
+        assertEquals(52451, f.getNumerator());
+        assertEquals(1934917632, f.getDenominator());
+
+        f1 = new Fraction(Integer.MIN_VALUE, 3);
+        f2 = new Fraction(1,3);
+        f = f1.add(f2);
+        assertEquals(Integer.MIN_VALUE+1, f.getNumerator());
+        assertEquals(3, f.getDenominator());
+        
+        f1 = new Fraction(Integer.MAX_VALUE - 1, 1);
+        f2 = Fraction.ONE;
+        f = f1.add(f2);
+        assertEquals(Integer.MAX_VALUE, f.getNumerator());
+        assertEquals(1, f.getDenominator());
+        
+        try {
+            f = f.add(Fraction.ONE); // should overflow
+            fail("expecting ArithmeticException but got: " + f.toString());
+        } catch (ArithmeticException ex) {}
+        
+        // denominator should not be a multiple of 2 or 3 to trigger overflow
+        f1 = new Fraction(Integer.MIN_VALUE, 5);
+        f2 = new Fraction(-1,5);
+        try {
+            f = f1.add(f2); // should overflow
+            fail("expecting ArithmeticException but got: " + f.toString());
+        } catch (ArithmeticException ex) {}
+        
+        try {
+            f= new Fraction(-Integer.MAX_VALUE, 1);
+            f = f.add(f);
+            fail("expecting ArithmeticException");
+        } catch (ArithmeticException ex) {}
+        
+        try {
+            f= new Fraction(-Integer.MAX_VALUE, 1);
+            f = f.add(f);
+            fail("expecting ArithmeticException");
+        } catch (ArithmeticException ex) {}
+        
+        f1 = new Fraction(3,327680);
+        f2 = new Fraction(2,59049);
+        try {
+            f = f1.add(f2); // should overflow
+            fail("expecting ArithmeticException but got: " + f.toString());
+        } catch (ArithmeticException ex) {}
     }
     
     public void testDivide() {
         Fraction a = new Fraction(1, 2);
         Fraction b = new Fraction(2, 3);
         
         assertFraction(1, 1, a.divide(a));
         assertFraction(3, 4, a.divide(b));
         assertFraction(4, 3, b.divide(a));
         assertFraction(1, 1, b.divide(b));
+        
+        Fraction f1 = new Fraction(3, 5);
+        Fraction f2 = Fraction.ZERO;
+        try {
+            Fraction f = f1.divide(f2);
+            fail("expecting ArithmeticException");
+        } catch (ArithmeticException ex) {}
+        
+        f1 = new Fraction(0, 5);
+        f2 = new Fraction(2, 7);
+        Fraction f = f1.divide(f2);
+        assertSame(Fraction.ZERO, f);
+        
+        f1 = new Fraction(2, 7);
+        f2 = Fraction.ONE;
+        f = f1.divide(f2);
+        assertEquals(2, f.getNumerator());
+        assertEquals(7, f.getDenominator());
+        
+        f1 = new Fraction(1, Integer.MAX_VALUE);
+        f = f1.divide(f1);  
+        assertEquals(1, f.getNumerator());
+        assertEquals(1, f.getDenominator());
+        
+        f1 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE);
+        f2 = new Fraction(1, Integer.MAX_VALUE);
+        f = f1.divide(f2);
+        assertEquals(Integer.MIN_VALUE, f.getNumerator());
+        assertEquals(1, f.getDenominator());
+
+        try {
+            f.divide(null);
+            fail("IllegalArgumentException");
+        } catch (IllegalArgumentException ex) {}
+        
+        try {
+            f1 = new Fraction(1, Integer.MAX_VALUE);
+            f = f1.divide(f1.reciprocal());  // should overflow
+            fail("expecting ArithmeticException");
+        } catch (ArithmeticException ex) {}
+        try {
+            f1 = new Fraction(1, -Integer.MAX_VALUE);
+            f = f1.divide(f1.reciprocal());  // should overflow
+            fail("expecting ArithmeticException");
+        } catch (ArithmeticException ex) {}
     }
     
     public void testMultiply() {
         Fraction a = new Fraction(1, 2);
         Fraction b = new Fraction(2, 3);
         
         assertFraction(1, 4, a.multiply(a));
         assertFraction(1, 3, a.multiply(b));
         assertFraction(1, 3, b.multiply(a));
         assertFraction(4, 9, b.multiply(b));
+        
+        Fraction f1 = new Fraction(Integer.MAX_VALUE, 1);
+        Fraction f2 = new Fraction(Integer.MIN_VALUE, Integer.MAX_VALUE);
+        Fraction f = f1.multiply(f2);
+        assertEquals(Integer.MIN_VALUE, f.getNumerator());
+        assertEquals(1, f.getDenominator());
+
+        try {
+            f.multiply(null);
+            fail("expecting IllegalArgumentException");
+        } catch (IllegalArgumentException ex) {}
     }
     
     public void testSubtract() {
         Fraction a = new Fraction(1, 2);
         Fraction b = new Fraction(2, 3);
         
         assertFraction(0, 1, a.subtract(a));
         assertFraction(-1, 6, a.subtract(b));
         assertFraction(1, 6, b.subtract(a));
         assertFraction(0, 1, b.subtract(b));
+        
+        Fraction f = new Fraction(1,1);
+        try {
+            f.subtract(null);
+            fail("expecting IllegalArgumentException");
+        } catch (IllegalArgumentException ex) {}
+        
+        // if this fraction is subtracted naively, it will overflow.
+        // check that it doesn't.
+        Fraction f1 = new Fraction(1,32768*3);
+        Fraction f2 = new Fraction(1,59049);
+        f = f1.subtract(f2);
+        assertEquals(-13085, f.getNumerator());
+        assertEquals(1934917632, f.getDenominator());
+
+        f1 = new Fraction(Integer.MIN_VALUE, 3);
+        f2 = new Fraction(1,3).negate();
+        f = f1.subtract(f2);
+        assertEquals(Integer.MIN_VALUE+1, f.getNumerator());
+        assertEquals(3, f.getDenominator());
+        
+        f1 = new Fraction(Integer.MAX_VALUE, 1);
+        f2 = Fraction.ONE;
+        f = f1.subtract(f2);
+        assertEquals(Integer.MAX_VALUE-1, f.getNumerator());
+        assertEquals(1, f.getDenominator());
+
+        try {
+            f1 = new Fraction(1, Integer.MAX_VALUE);
+            f2 = new Fraction(1, Integer.MAX_VALUE - 1);
+            f = f1.subtract(f2);
+            fail("expecting ArithmeticException");  //should overflow
+        } catch (ArithmeticException ex) {}
+        
+        // denominator should not be a multiple of 2 or 3 to trigger overflow
+        f1 = new Fraction(Integer.MIN_VALUE, 5);
+        f2 = new Fraction(1,5);
+        try {
+            f = f1.subtract(f2); // should overflow
+            fail("expecting ArithmeticException but got: " + f.toString());
+        } catch (ArithmeticException ex) {}
+        
+        try {
+            f= new Fraction(Integer.MIN_VALUE, 1);
+            f = f.subtract(Fraction.ONE);
+            fail("expecting ArithmeticException");
+        } catch (ArithmeticException ex) {}
+        
+        try {
+            f= new Fraction(Integer.MAX_VALUE, 1);
+            f = f.subtract(Fraction.ONE.negate());
+            fail("expecting ArithmeticException");
+        } catch (ArithmeticException ex) {}
+        
+        f1 = new Fraction(3,327680);
+        f2 = new Fraction(2,59049);
+        try {
+            f = f1.subtract(f2); // should overflow
+            fail("expecting ArithmeticException but got: " + f.toString());
+        } catch (ArithmeticException ex) {}
     }
 }

commit 65b65f88b74de6b3462b04b2cf2a69f064a77557
Author: Dirk Verbeeck <dirkv@apache.org>
Date:   Sat Feb 26 08:11:52 2005

    svn:keywords correction
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@155427 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/fraction/FractionTest.java b/src/test/org/apache/commons/math/fraction/FractionTest.java
--- a/src/test/org/apache/commons/math/fraction/FractionTest.java
+++ b/src/test/org/apache/commons/math/fraction/FractionTest.java
@@ -1,108 +1,108 @@
 /*
  * Copyright 2005 The Apache Software Foundation.
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *      http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
 package org.apache.commons.math.fraction;
 
 import org.apache.commons.math.ConvergenceException;
 
 import junit.framework.TestCase;
 
 /**
- * @version $Revision: $ $Date: $
+ * @version $Revision$ $Date$
  */
 public class FractionTest extends TestCase {
 
     private void assertFraction(int expectedNumerator, int expectedDenominator, Fraction actual) {
         assertEquals(expectedNumerator, actual.getNumerator());
         assertEquals(expectedDenominator, actual.getDenominator());
     }
     
     public void testConstructor() {
         assertFraction(0, 1, new Fraction(0, 1));
         assertFraction(0, 1, new Fraction(0, 2));
         assertFraction(0, 1, new Fraction(0, -1));
         assertFraction(1, 2, new Fraction(1, 2));
         assertFraction(1, 2, new Fraction(2, 4));
         assertFraction(-1, 2, new Fraction(-1, 2));
         assertFraction(-1, 2, new Fraction(1, -2));
         assertFraction(-1, 2, new Fraction(-2, 4));
         assertFraction(-1, 2, new Fraction(2, -4));
     }
     
     public void testConstructorDouble() {
         try {
             assertFraction(1, 2, new Fraction(0.5));
             assertFraction(1, 3, new Fraction(1.0 / 3.0));
             assertFraction(17, 100, new Fraction(17.0 / 100.0));
             assertFraction(317, 100, new Fraction(317.0 / 100.0));
             assertFraction(-1, 2, new Fraction(-0.5));
             assertFraction(-1, 3, new Fraction(-1.0 / 3.0));
             assertFraction(-17, 100, new Fraction(17.0 / -100.0));
             assertFraction(-317, 100, new Fraction(-317.0 / 100.0));
         } catch (ConvergenceException ex) {
             fail(ex.getMessage());
         }
     }
     
     public void testAbs() {
         Fraction a = new Fraction(10, 21);
         Fraction b = new Fraction(-10, 21);
         Fraction c = new Fraction(10, -21);
         
         assertFraction(10, 21, a.abs());
         assertFraction(10, 21, b.abs());
         assertFraction(10, 21, c.abs());
     }
     
     public void testAdd() {
         Fraction a = new Fraction(1, 2);
         Fraction b = new Fraction(2, 3);
         
         assertFraction(1, 1, a.add(a));
         assertFraction(7, 6, a.add(b));
         assertFraction(7, 6, b.add(a));
         assertFraction(4, 3, b.add(b));
     }
     
     public void testDivide() {
         Fraction a = new Fraction(1, 2);
         Fraction b = new Fraction(2, 3);
         
         assertFraction(1, 1, a.divide(a));
         assertFraction(3, 4, a.divide(b));
         assertFraction(4, 3, b.divide(a));
         assertFraction(1, 1, b.divide(b));
     }
     
     public void testMultiply() {
         Fraction a = new Fraction(1, 2);
         Fraction b = new Fraction(2, 3);
         
         assertFraction(1, 4, a.multiply(a));
         assertFraction(1, 3, a.multiply(b));
         assertFraction(1, 3, b.multiply(a));
         assertFraction(4, 9, b.multiply(b));
     }
     
     public void testSubtract() {
         Fraction a = new Fraction(1, 2);
         Fraction b = new Fraction(2, 3);
         
         assertFraction(0, 1, a.subtract(a));
         assertFraction(-1, 6, a.subtract(b));
         assertFraction(1, 6, b.subtract(a));
         assertFraction(0, 1, b.subtract(b));
     }
 }

commit 41598b038509e9cdb7f6dbeefdb2a2876d2708a6
Author: Brent Worden <brentworden@apache.org>
Date:   Sat Feb 5 00:49:45 2005

    added fraction class and fraction formatting classes.
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@151479 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/fraction/FractionTest.java b/src/test/org/apache/commons/math/fraction/FractionTest.java
--- /dev/null
+++ b/src/test/org/apache/commons/math/fraction/FractionTest.java
@@ -0,0 +1,108 @@
+/*
+ * Copyright 2005 The Apache Software Foundation.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.commons.math.fraction;
+
+import org.apache.commons.math.ConvergenceException;
+
+import junit.framework.TestCase;
+
+/**
+ * @version $Revision: $ $Date: $
+ */
+public class FractionTest extends TestCase {
+
+    private void assertFraction(int expectedNumerator, int expectedDenominator, Fraction actual) {
+        assertEquals(expectedNumerator, actual.getNumerator());
+        assertEquals(expectedDenominator, actual.getDenominator());
+    }
+    
+    public void testConstructor() {
+        assertFraction(0, 1, new Fraction(0, 1));
+        assertFraction(0, 1, new Fraction(0, 2));
+        assertFraction(0, 1, new Fraction(0, -1));
+        assertFraction(1, 2, new Fraction(1, 2));
+        assertFraction(1, 2, new Fraction(2, 4));
+        assertFraction(-1, 2, new Fraction(-1, 2));
+        assertFraction(-1, 2, new Fraction(1, -2));
+        assertFraction(-1, 2, new Fraction(-2, 4));
+        assertFraction(-1, 2, new Fraction(2, -4));
+    }
+    
+    public void testConstructorDouble() {
+        try {
+            assertFraction(1, 2, new Fraction(0.5));
+            assertFraction(1, 3, new Fraction(1.0 / 3.0));
+            assertFraction(17, 100, new Fraction(17.0 / 100.0));
+            assertFraction(317, 100, new Fraction(317.0 / 100.0));
+            assertFraction(-1, 2, new Fraction(-0.5));
+            assertFraction(-1, 3, new Fraction(-1.0 / 3.0));
+            assertFraction(-17, 100, new Fraction(17.0 / -100.0));
+            assertFraction(-317, 100, new Fraction(-317.0 / 100.0));
+        } catch (ConvergenceException ex) {
+            fail(ex.getMessage());
+        }
+    }
+    
+    public void testAbs() {
+        Fraction a = new Fraction(10, 21);
+        Fraction b = new Fraction(-10, 21);
+        Fraction c = new Fraction(10, -21);
+        
+        assertFraction(10, 21, a.abs());
+        assertFraction(10, 21, b.abs());
+        assertFraction(10, 21, c.abs());
+    }
+    
+    public void testAdd() {
+        Fraction a = new Fraction(1, 2);
+        Fraction b = new Fraction(2, 3);
+        
+        assertFraction(1, 1, a.add(a));
+        assertFraction(7, 6, a.add(b));
+        assertFraction(7, 6, b.add(a));
+        assertFraction(4, 3, b.add(b));
+    }
+    
+    public void testDivide() {
+        Fraction a = new Fraction(1, 2);
+        Fraction b = new Fraction(2, 3);
+        
+        assertFraction(1, 1, a.divide(a));
+        assertFraction(3, 4, a.divide(b));
+        assertFraction(4, 3, b.divide(a));
+        assertFraction(1, 1, b.divide(b));
+    }
+    
+    public void testMultiply() {
+        Fraction a = new Fraction(1, 2);
+        Fraction b = new Fraction(2, 3);
+        
+        assertFraction(1, 4, a.multiply(a));
+        assertFraction(1, 3, a.multiply(b));
+        assertFraction(1, 3, b.multiply(a));
+        assertFraction(4, 9, b.multiply(b));
+    }
+    
+    public void testSubtract() {
+        Fraction a = new Fraction(1, 2);
+        Fraction b = new Fraction(2, 3);
+        
+        assertFraction(0, 1, a.subtract(a));
+        assertFraction(-1, 6, a.subtract(b));
+        assertFraction(1, 6, b.subtract(a));
+        assertFraction(0, 1, b.subtract(b));
+    }
+}
