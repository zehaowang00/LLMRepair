commit ee749e286b477f8d6f53ff5960a38453baf50f31
Author: johnlenz@google.com <johnlenz@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Mon Jul 19 19:41:45 2010

    Propertly fold ">>> 0" on negative values.
    Fixes issue 200
    
    R=acleung
    DELTA=10  (8 added, 0 deleted, 2 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=53018
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@291 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
@@ -240,46 +240,50 @@
   public void testFoldBitShifts() {
     fold("x = 1 << 0", "x = 1");
+    fold("x = -1 << 0", "x = -1");
     fold("x = 1 << 1", "x = 2");
     fold("x = 3 << 1", "x = 6");
     fold("x = 1 << 8", "x = 256");
 
     fold("x = 1 >> 0", "x = 1");
+    fold("x = -1 >> 0", "x = -1");
     fold("x = 1 >> 1", "x = 0");
     fold("x = 2 >> 1", "x = 1");
     fold("x = 5 >> 1", "x = 2");
     fold("x = 127 >> 3", "x = 15");
     fold("x = 3 >> 1", "x = 1");
     fold("x = 3 >> 2", "x = 0");
     fold("x = 10 >> 1", "x = 5");
     fold("x = 10 >> 2", "x = 2");
     fold("x = 10 >> 5", "x = 0");
 
     fold("x = 10 >>> 1", "x = 5");
     fold("x = 10 >>> 2", "x = 2");
     fold("x = 10 >>> 5", "x = 0");
-    fold("x = -1 >>> 1", "x = " + 0x7fffffff);
+    fold("x = -1 >>> 1", "x = 2147483647"); // 0x7fffffff
+    fold("x = -1 >>> 0", "x = 4294967295"); // 0xffffffff
+    fold("x = -2 >>> 0", "x = 4294967294"); // 0xfffffffe
 
     fold("3000000000 << 1", "3000000000<<1",
          PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);
     fold("1 << 32", "1<<32",
         PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);
     fold("1 << -1", "1<<32",
         PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);
     fold("3000000000 >> 1", "3000000000>>1",
         PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);
     fold("1 >> 32", "1>>32",
         PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);
     fold("1.5 << 0",  "1.5<<0",
         PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
     fold("1 << .5",   "1.5<<0",
         PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
     fold("1.5 >>> 0", "1.5>>>0",
         PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
     fold("1 >>> .5",  "1.5>>>0",
         PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
     fold("1.5 >> 0",  "1.5>>0",
         PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
     fold("1 >> .5",   "1.5>>0",
         PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
   }
 

commit 9925370292834ea846727f1f9db76af0d40261df
Author: Nicholas.J.Santos <Nicholas.J.Santos@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Mon Jun 28 20:30:00 2010

    Change on 2010/06/28 12:25:08 by dcc
    
            Split up FoldConstants unit tests.
    
            R=acleung
            DELTA=2778  (1508 added, 1270 deleted, 0 changed)
    
    Change on 2010/06/28 15:47:46 by johnlenz
    
            Prevent COMMAs with more than two children.
    
            R=acleung
            DELTA=1  (1 added, 0 deleted, 0 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=44002
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@257 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
--- /dev/null
+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
@@ -0,0 +240,46 @@
+  public void testFoldBitShifts() {
+    fold("x = 1 << 0", "x = 1");
+    fold("x = 1 << 1", "x = 2");
+    fold("x = 3 << 1", "x = 6");
+    fold("x = 1 << 8", "x = 256");
+
+    fold("x = 1 >> 0", "x = 1");
+    fold("x = 1 >> 1", "x = 0");
+    fold("x = 2 >> 1", "x = 1");
+    fold("x = 5 >> 1", "x = 2");
+    fold("x = 127 >> 3", "x = 15");
+    fold("x = 3 >> 1", "x = 1");
+    fold("x = 3 >> 2", "x = 0");
+    fold("x = 10 >> 1", "x = 5");
+    fold("x = 10 >> 2", "x = 2");
+    fold("x = 10 >> 5", "x = 0");
+
+    fold("x = 10 >>> 1", "x = 5");
+    fold("x = 10 >>> 2", "x = 2");
+    fold("x = 10 >>> 5", "x = 0");
+    fold("x = -1 >>> 1", "x = " + 0x7fffffff);
+
+    fold("3000000000 << 1", "3000000000<<1",
+         PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);
+    fold("1 << 32", "1<<32",
+        PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);
+    fold("1 << -1", "1<<32",
+        PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);
+    fold("3000000000 >> 1", "3000000000>>1",
+        PeepholeFoldConstants.BITWISE_OPERAND_OUT_OF_RANGE);
+    fold("1 >> 32", "1>>32",
+        PeepholeFoldConstants.SHIFT_AMOUNT_OUT_OF_BOUNDS);
+    fold("1.5 << 0",  "1.5<<0",
+        PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
+    fold("1 << .5",   "1.5<<0",
+        PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
+    fold("1.5 >>> 0", "1.5>>>0",
+        PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
+    fold("1 >>> .5",  "1.5>>>0",
+        PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
+    fold("1.5 >> 0",  "1.5>>0",
+        PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
+    fold("1 >> .5",   "1.5>>0",
+        PeepholeFoldConstants.FRACTIONAL_BITWISE_OPERAND);
+  }
+
