commit 510ff24ac51a8c73ff3f2401379654c37a00546b
Author: johnlenz@google.com <johnlenz@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Wed Dec 8 17:31:20 2010

    Fold a few more comparison cases.
    
    R=nicksantos
    DELTA=215  (169 added, 20 deleted, 26 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=98
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@610 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
@@ -760,47 +795,46 @@
   public void testInvertibleOperators() {
     Map<String, String> inverses = ImmutableMap.<String, String>builder()
         .put("==", "!=")
         .put("===", "!==")
         .put("<=", ">")
         .put("<", ">=")
         .put(">=", "<")
         .put(">", "<=")
         .put("!=", "==")
         .put("!==", "===")
         .build();
     Set<String> comparators = ImmutableSet.of("<=", "<", ">=", ">");
     Set<String> equalitors = ImmutableSet.of("==", "===");
-    Set<String> uncomparables = ImmutableSet.of("null", "undefined", "void 0");
+    Set<String> uncomparables = ImmutableSet.of("undefined", "void 0");
     List<String> operators = ImmutableList.copyOf(inverses.values());
     for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {
       for (int iOperandB = 0;
            iOperandB < LITERAL_OPERANDS.size();
            iOperandB++) {
         for (int iOp = 0; iOp < operators.size(); iOp++) {
           String a = LITERAL_OPERANDS.get(iOperandA);
           String b = LITERAL_OPERANDS.get(iOperandB);
           String op = operators.get(iOp);
           String inverse = inverses.get(op);
 
           // Test invertability.
           if (comparators.contains(op) &&
               (uncomparables.contains(a) || uncomparables.contains(b))) {
-            // TODO(nicksantos): Eventually, all cases should be collapsed.
-            assertSameResultsOrUncollapsed(join(a, op, b), "false");
-            assertSameResultsOrUncollapsed(join(a, inverse, b), "false");
+            assertSameResults(join(a, op, b), "false");
+            assertSameResults(join(a, inverse, b), "false");
           } else if (a.equals(b) && equalitors.contains(op)) {
             if (a.equals("NaN") || a.equals("Infinity")) {
               foldSame(join(a, op, b));
               foldSame(join(a, inverse, b));
             } else {
               assertSameResults(join(a, op, b), "true");
               assertSameResults(join(a, inverse, b), "false");
             }
           } else {
             assertNotSameResults(join(a, op, b), join(a, inverse, b));
           }
         }
       }
     }
   }
 

commit eaaa156632369f88e9667f55c7761cef8367cf57
Author: nicksantos@google.com <nicksantos@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Tue Nov 30 15:10:26 2010

    Create some exhaustive tests for binary ops
    
    R=johnlenz
    DELTA=181  (180 added, 0 deleted, 1 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=27
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@577 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
@@ -716,0 +760,47 @@
+  public void testInvertibleOperators() {
+    Map<String, String> inverses = ImmutableMap.<String, String>builder()
+        .put("==", "!=")
+        .put("===", "!==")
+        .put("<=", ">")
+        .put("<", ">=")
+        .put(">=", "<")
+        .put(">", "<=")
+        .put("!=", "==")
+        .put("!==", "===")
+        .build();
+    Set<String> comparators = ImmutableSet.of("<=", "<", ">=", ">");
+    Set<String> equalitors = ImmutableSet.of("==", "===");
+    Set<String> uncomparables = ImmutableSet.of("null", "undefined", "void 0");
+    List<String> operators = ImmutableList.copyOf(inverses.values());
+    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {
+      for (int iOperandB = 0;
+           iOperandB < LITERAL_OPERANDS.size();
+           iOperandB++) {
+        for (int iOp = 0; iOp < operators.size(); iOp++) {
+          String a = LITERAL_OPERANDS.get(iOperandA);
+          String b = LITERAL_OPERANDS.get(iOperandB);
+          String op = operators.get(iOp);
+          String inverse = inverses.get(op);
+
+          // Test invertability.
+          if (comparators.contains(op) &&
+              (uncomparables.contains(a) || uncomparables.contains(b))) {
+            // TODO(nicksantos): Eventually, all cases should be collapsed.
+            assertSameResultsOrUncollapsed(join(a, op, b), "false");
+            assertSameResultsOrUncollapsed(join(a, inverse, b), "false");
+          } else if (a.equals(b) && equalitors.contains(op)) {
+            if (a.equals("NaN") || a.equals("Infinity")) {
+              foldSame(join(a, op, b));
+              foldSame(join(a, inverse, b));
+            } else {
+              assertSameResults(join(a, op, b), "true");
+              assertSameResults(join(a, inverse, b), "false");
+            }
+          } else {
+            assertNotSameResults(join(a, op, b), join(a, inverse, b));
+          }
+        }
+      }
+    }
+  }
+
