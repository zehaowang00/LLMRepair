commit 5a4cdb5a40542e01c1558f7fbc34df01cfa794aa
Author: Brice <brice.dutheil@gmail.com>
Date:   Sun Mar 20 12:17:11 2011

    issue 238 : constructor injection is now alive :
     - inject declared mocks only
     - fail silently for now allowing people to instantiate fields themselves (however some error will need to be reported)
     - @Spy and @InjectMocks with constructor injection don't work together.
    
    --HG--
    branch : issue 238 : constructor injection
    rename : test/org/mockitousage/annotation/InjectMocksTest.java => test/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java
    rename : test/org/mockitousage/annotation/MockInjectionTest.java => test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java

diff --git a/test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java b/test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java
--- a/test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java
+++ b/test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java
@@ -78,14 +78,14 @@
     public void should_fail_if_an_argument_instance_type_do_not_match_wanted_type() throws Exception {
         Observer observer = mock(Observer.class);
         Set wrongArg = mock(Set.class);
         given(resolver.resolveTypeInstances(Matchers.<Class<?>[]>anyVararg())).willReturn(new Object[]{ observer, wrongArg });
 
         try {
             new ParameterizedConstructorInstantiator(this, field("withMultipleConstructor"), resolver).instantiate();
             fail();
         } catch (MockitoException e) {
-            assertThat(e.getMessage()).contains("resolver").contains("incorrect types");
+            assertThat(e.getMessage()).contains("argResolver").contains("incorrect types");
         }
     }
 
     @Test

commit 377de51ddf90e01c50646f34e353bbf01844c677
Author: Brice <brice.dutheil@gmail.com>
Date:   Wed Mar 16 21:19:45 2011

    issue 238 : reworked inject mocks engine to allow constructor injection, constructor injection is still a work in progress
    
    --HG--
    branch : issue 238 : constructor injection
    rename : src/org/mockito/internal/configuration/injection/FinalMockCandidateFilter.java => src/org/mockito/internal/configuration/injection/filter/FinalMockCandidateFilter.java
    rename : src/org/mockito/internal/configuration/injection/MockCandidateFilter.java => src/org/mockito/internal/configuration/injection/filter/MockCandidateFilter.java
    rename : src/org/mockito/internal/configuration/injection/NameBasedCandidateFilter.java => src/org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java
    rename : src/org/mockito/internal/configuration/injection/OngoingInjecter.java => src/org/mockito/internal/configuration/injection/filter/OngoingInjecter.java
    rename : src/org/mockito/internal/configuration/injection/TypeBasedCandidateFilter.java => src/org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java
    rename : src/org/mockito/internal/util/reflection/ConstructorInitializer.java => src/org/mockito/internal/util/reflection/FieldConstructorInitializer.java

diff --git a/test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java b/test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java
--- /dev/null
+++ b/test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java
@@ -0,0 +78,14 @@
+    public void should_fail_if_an_argument_instance_type_do_not_match_wanted_type() throws Exception {
+        Observer observer = mock(Observer.class);
+        Set wrongArg = mock(Set.class);
+        given(resolver.resolveTypeInstances(Matchers.<Class<?>[]>anyVararg())).willReturn(new Object[]{ observer, wrongArg });
+
+        try {
+            new ParameterizedConstructorInstantiator(this, field("withMultipleConstructor"), resolver).instantiate();
+            fail();
+        } catch (MockitoException e) {
+            assertThat(e.getMessage()).contains("resolver").contains("incorrect types");
+        }
+    }
+
+    @Test
