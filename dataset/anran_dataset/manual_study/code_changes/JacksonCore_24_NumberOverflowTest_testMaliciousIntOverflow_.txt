commit c4dd84e4d505baa90d8d1675c1f60f8d6ce90db8
Author: Tatu Saloranta <tatu.saloranta@iki.fi>
Date:   Wed Jan 16 23:42:31 2019

    Fix #508

diff --git a/src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java b/src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java
--- a/src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java
+++ b/src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java
@@ -83,20 +84,20 @@
     public void testMaliciousIntOverflow() throws Exception
     {
         for (int mode : ALL_STREAMING_MODES) {
             for (String doc : new String[] { BIG_POS_DOC, BIG_NEG_DOC }) {
                 JsonParser p = createParser(mode, doc);
                 assertToken(JsonToken.START_ARRAY, p.nextToken());
                 assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
                 try {
                     p.getIntValue();
                     fail("Should not pass");
-                } catch (JsonParseException e) {
+                } catch (InputCoercionException e) {
                     verifyException(e, "out of range of int");
                     verifyException(e, "Integer with "+BIG_NUM_LEN+" digits");
                 }
                 p.close();
             }
         }
     }    
 
     // [jackson-core#488]

commit b6c54cf06167b7ef8b45a67e8ddfa427e63c6c20
Author: Tatu Saloranta <tatu.saloranta@iki.fi>
Date:   Sat Oct 20 17:22:07 2018

    More work for #488, now handling coercions to `double`, `float` better to avoid drastic performance issue as per suggestions by @wujimin

diff --git a/src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java b/src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java
--- /dev/null
+++ b/src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java
@@ -0,0 +84,20 @@
+    public void testMaliciousIntOverflow() throws Exception
+    {
+        for (int mode : ALL_STREAMING_MODES) {
+            for (String doc : new String[] { BIG_POS_DOC, BIG_NEG_DOC }) {
+                JsonParser p = createParser(mode, doc);
+                assertToken(JsonToken.START_ARRAY, p.nextToken());
+                assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
+                try {
+                    p.getIntValue();
+                    fail("Should not pass");
+                } catch (JsonParseException e) {
+                    verifyException(e, "out of range of int");
+                    verifyException(e, "Integer with "+BIG_NUM_LEN+" digits");
+                }
+                p.close();
+            }
+        }
+    }    
+
+    // [jackson-core#488]
