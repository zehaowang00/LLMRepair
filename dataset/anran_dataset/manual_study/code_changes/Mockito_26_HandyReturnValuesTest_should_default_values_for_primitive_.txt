commit fe7bbabb82ce3d1000c13d39d6355c134e94ac27
Author: Szczepan Faber <szczepiq@gmail.com>
Date:   Thu Jul 9 00:42:48 2015

    Moved sources to standard location
    
    Let's make the project be as close as possible to standard, conventional project for better clarity

diff --git a/test/org/mockito/internal/progress/HandyReturnValuesTest.java b/test/org/mockito/internal/progress/HandyReturnValuesTest.java
deleted file mode 100644
index 1894dea7a..000000000
--- a/test/org/mockito/internal/progress/HandyReturnValuesTest.java
+++ /dev/null
@@ -1,68 +0,0 @@
-/*
- * Copyright (c) 2007 Mockito contributors
- * This program is made available under the terms of the MIT License.
- */
-package org.mockito.internal.progress;
-
-import org.junit.Test;
-
-import static org.assertj.core.api.Assertions.assertThat;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-
-
-public class HandyReturnValuesTest {
-
-    private HandyReturnValues h = new HandyReturnValues();
-
-    @Test
-    public void should_not_return_null_for_primitives_wrappers() throws Exception {
-        assertNotNull(h.returnFor(Boolean.class));
-        assertNotNull(h.returnFor(Character.class));
-        assertNotNull(h.returnFor(Byte.class));
-        assertNotNull(h.returnFor(Short.class));
-        assertNotNull(h.returnFor(Integer.class));
-        assertNotNull(h.returnFor(Long.class));
-        assertNotNull(h.returnFor(Float.class));
-        assertNotNull(h.returnFor(Double.class));
-    }
-
-    @Test
-    public void should_not_return_null_for_primitives() throws Exception {
-        assertNotNull(h.returnFor(boolean.class));
-        assertNotNull(h.returnFor(char.class));
-        assertNotNull(h.returnFor(byte.class));
-        assertNotNull(h.returnFor(short.class));
-        assertNotNull(h.returnFor(int.class));
-        assertNotNull(h.returnFor(long.class));
-        assertNotNull(h.returnFor(float.class));
-        assertNotNull(h.returnFor(double.class));
-    }
-
-    @Test public void should_default_values_for_primitive() {
-        assertThat(h.returnFor(boolean.class)).isFalse();
-        assertThat(h.returnFor(char.class)).isEqualTo('\u0000');
-        assertThat(h.returnFor(byte.class)).isEqualTo((byte) 0);
-        assertThat(h.returnFor(short.class)).isEqualTo((short) 0);
-        assertThat(h.returnFor(int.class)).isEqualTo(0);
-        assertThat(h.returnFor(long.class)).isEqualTo(0L);
-        assertThat(h.returnFor(float.class)).isEqualTo(0.0F);
-        assertThat(h.returnFor(double.class)).isEqualTo(0.0D);
-    }
-
-    @Test
-    public void should_return_null_for_everything_else() throws Exception {
-        assertNull(h.returnFor(Object.class));
-        assertNull(h.returnFor(String.class));
-        assertNull(h.returnFor(null));
-    }
-
-    @Test
-    public void should_return_handy_value_for_instances() throws Exception {
-        assertNull(h.returnFor(new Object()));
-        assertNull(h.returnFor((Object) null));
-        
-        assertNotNull(h.returnFor(10.0));
-        assertNotNull(h.returnFor(Boolean.FALSE));
-    }
-}

commit d26f5db9023b6b7cd331017551ea4353fff0ef91
Author: Brice Dutheil <brice.dutheil@gmail.com>
Date:   Tue Jun 2 08:06:50 2015

    Removes all CRLF line ending created by misconfigured Windows IDE

diff --git a/test/org/mockito/internal/progress/HandyReturnValuesTest.java b/test/org/mockito/internal/progress/HandyReturnValuesTest.java
index c28195221..f9ddd0e7e 100644
--- a/test/org/mockito/internal/progress/HandyReturnValuesTest.java
+++ b/test/org/mockito/internal/progress/HandyReturnValuesTest.java
@@ -1,68 +1,68 @@
-/*
- * Copyright (c) 2007 Mockito contributors
- * This program is made available under the terms of the MIT License.
- */
-package org.mockito.internal.progress;
-
-import org.junit.Test;
-
-import static org.fest.assertions.Assertions.assertThat;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertNull;
-
-
-public class HandyReturnValuesTest {
-
-    private HandyReturnValues h = new HandyReturnValues();
-
-    @Test
-    public void should_not_return_null_for_primitives_wrappers() throws Exception {
-        assertNotNull(h.returnFor(Boolean.class));
-        assertNotNull(h.returnFor(Character.class));
-        assertNotNull(h.returnFor(Byte.class));
-        assertNotNull(h.returnFor(Short.class));
-        assertNotNull(h.returnFor(Integer.class));
-        assertNotNull(h.returnFor(Long.class));
-        assertNotNull(h.returnFor(Float.class));
-        assertNotNull(h.returnFor(Double.class));
-    }
-
-    @Test
-    public void should_not_return_null_for_primitives() throws Exception {
-        assertNotNull(h.returnFor(boolean.class));
-        assertNotNull(h.returnFor(char.class));
-        assertNotNull(h.returnFor(byte.class));
-        assertNotNull(h.returnFor(short.class));
-        assertNotNull(h.returnFor(int.class));
-        assertNotNull(h.returnFor(long.class));
-        assertNotNull(h.returnFor(float.class));
-        assertNotNull(h.returnFor(double.class));
-    }
-
-    @Test public void should_default_values_for_primitive() {
-        assertThat(h.returnFor(boolean.class)).isFalse();
-        assertThat(h.returnFor(char.class)).isEqualTo('\u0000');
-        assertThat(h.returnFor(byte.class)).isEqualTo((byte) 0);
-        assertThat(h.returnFor(short.class)).isEqualTo((short) 0);
-        assertThat(h.returnFor(int.class)).isEqualTo(0);
-        assertThat(h.returnFor(long.class)).isEqualTo(0L);
-        assertThat(h.returnFor(float.class)).isEqualTo(0.0F);
-        assertThat(h.returnFor(double.class)).isEqualTo(0.0D);
-    }
-
-    @Test
-    public void should_return_null_for_everything_else() throws Exception {
-        assertNull(h.returnFor(Object.class));
-        assertNull(h.returnFor(String.class));
-        assertNull(h.returnFor(null));
-    }
-
-    @Test
-    public void should_return_handy_value_for_instances() throws Exception {
-        assertNull(h.returnFor(new Object()));
-        assertNull(h.returnFor((Object) null));
-        
-        assertNotNull(h.returnFor(10.0));
-        assertNotNull(h.returnFor(Boolean.FALSE));
-    }
-}
+/*
+ * Copyright (c) 2007 Mockito contributors
+ * This program is made available under the terms of the MIT License.
+ */
+package org.mockito.internal.progress;
+
+import org.junit.Test;
+
+import static org.fest.assertions.Assertions.assertThat;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+
+
+public class HandyReturnValuesTest {
+
+    private HandyReturnValues h = new HandyReturnValues();
+
+    @Test
+    public void should_not_return_null_for_primitives_wrappers() throws Exception {
+        assertNotNull(h.returnFor(Boolean.class));
+        assertNotNull(h.returnFor(Character.class));
+        assertNotNull(h.returnFor(Byte.class));
+        assertNotNull(h.returnFor(Short.class));
+        assertNotNull(h.returnFor(Integer.class));
+        assertNotNull(h.returnFor(Long.class));
+        assertNotNull(h.returnFor(Float.class));
+        assertNotNull(h.returnFor(Double.class));
+    }
+
+    @Test
+    public void should_not_return_null_for_primitives() throws Exception {
+        assertNotNull(h.returnFor(boolean.class));
+        assertNotNull(h.returnFor(char.class));
+        assertNotNull(h.returnFor(byte.class));
+        assertNotNull(h.returnFor(short.class));
+        assertNotNull(h.returnFor(int.class));
+        assertNotNull(h.returnFor(long.class));
+        assertNotNull(h.returnFor(float.class));
+        assertNotNull(h.returnFor(double.class));
+    }
+
+    @Test public void should_default_values_for_primitive() {
+        assertThat(h.returnFor(boolean.class)).isFalse();
+        assertThat(h.returnFor(char.class)).isEqualTo('\u0000');
+        assertThat(h.returnFor(byte.class)).isEqualTo((byte) 0);
+        assertThat(h.returnFor(short.class)).isEqualTo((short) 0);
+        assertThat(h.returnFor(int.class)).isEqualTo(0);
+        assertThat(h.returnFor(long.class)).isEqualTo(0L);
+        assertThat(h.returnFor(float.class)).isEqualTo(0.0F);
+        assertThat(h.returnFor(double.class)).isEqualTo(0.0D);
+    }
+
+    @Test
+    public void should_return_null_for_everything_else() throws Exception {
+        assertNull(h.returnFor(Object.class));
+        assertNull(h.returnFor(String.class));
+        assertNull(h.returnFor(null));
+    }
+
+    @Test
+    public void should_return_handy_value_for_instances() throws Exception {
+        assertNull(h.returnFor(new Object()));
+        assertNull(h.returnFor((Object) null));
+        
+        assertNotNull(h.returnFor(10.0));
+        assertNotNull(h.returnFor(Boolean.FALSE));
+    }
+}

commit af44738c7de74f24e37ea0c1242e73b07c3f4362
Author: Brice Dutheil <brice.dutheil@gmail.com>
Date:   Sat Jun 30 09:06:31 2012

    issue 352 : With answer ReturnsEmptyValues, Mockito-mocked methods returning primitive types other than "int" throw ClassCastException: java.lang.Integer.
    Thanks to Jesse Wilson for spotting that one and providing a patch.
    I changed a few things however  especially:
     - used Primitives utility class instead
     - applied underscored names for test cases, as decided internally

diff --git a/test/org/mockito/internal/progress/HandyReturnValuesTest.java b/test/org/mockito/internal/progress/HandyReturnValuesTest.java
index 776205ce6..c28195221 100644
--- a/test/org/mockito/internal/progress/HandyReturnValuesTest.java
+++ b/test/org/mockito/internal/progress/HandyReturnValuesTest.java
@@ -1,19 +1,22 @@
-/*
- * Copyright (c) 2007 Mockito contributors
- * This program is made available under the terms of the MIT License.
- */
+/*
+ * Copyright (c) 2007 Mockito contributors
+ * This program is made available under the terms of the MIT License.
+ */
 package org.mockito.internal.progress;
 
 import org.junit.Test;
-import org.mockitoutil.TestBase;
 
+import static org.fest.assertions.Assertions.assertThat;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
 
-public class HandyReturnValuesTest extends TestBase {
+
+public class HandyReturnValuesTest {
 
     private HandyReturnValues h = new HandyReturnValues();
 
     @Test
-    public void shouldNotReturnNullForPrimitivesWprappers() throws Exception {
+    public void should_not_return_null_for_primitives_wrappers() throws Exception {
         assertNotNull(h.returnFor(Boolean.class));
         assertNotNull(h.returnFor(Character.class));
         assertNotNull(h.returnFor(Byte.class));
@@ -21,11 +24,11 @@ public void shouldNotReturnNullForPrimitivesWprappers() throws Exception {
         assertNotNull(h.returnFor(Integer.class));
         assertNotNull(h.returnFor(Long.class));
         assertNotNull(h.returnFor(Float.class));
-        assertNotNull(h.returnFor(Double.class));        
+        assertNotNull(h.returnFor(Double.class));
     }
 
     @Test
-    public void shouldNotReturnNullForPrimitives() throws Exception {
+    public void should_not_return_null_for_primitives() throws Exception {
         assertNotNull(h.returnFor(boolean.class));
         assertNotNull(h.returnFor(char.class));
         assertNotNull(h.returnFor(byte.class));
@@ -36,15 +39,26 @@ public void shouldNotReturnNullForPrimitives() throws Exception {
         assertNotNull(h.returnFor(double.class));
     }
 
+    @Test public void should_default_values_for_primitive() {
+        assertThat(h.returnFor(boolean.class)).isFalse();
+        assertThat(h.returnFor(char.class)).isEqualTo('\u0000');
+        assertThat(h.returnFor(byte.class)).isEqualTo((byte) 0);
+        assertThat(h.returnFor(short.class)).isEqualTo((short) 0);
+        assertThat(h.returnFor(int.class)).isEqualTo(0);
+        assertThat(h.returnFor(long.class)).isEqualTo(0L);
+        assertThat(h.returnFor(float.class)).isEqualTo(0.0F);
+        assertThat(h.returnFor(double.class)).isEqualTo(0.0D);
+    }
+
     @Test
-    public void shouldReturnNullForEverythingElse() throws Exception {
+    public void should_return_null_for_everything_else() throws Exception {
         assertNull(h.returnFor(Object.class));
         assertNull(h.returnFor(String.class));
         assertNull(h.returnFor(null));
     }
 
     @Test
-    public void shouldReturnHandyValueForInstances() throws Exception {
+    public void should_return_handy_value_for_instances() throws Exception {
         assertNull(h.returnFor(new Object()));
         assertNull(h.returnFor((Object) null));
         
