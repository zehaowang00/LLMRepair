commit d58006a939b740ea78dc61128065a6fdb8f303ca
Author: nicksantos@google.com <nicksantos@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Thu Aug 2 18:05:42 2012

    Clean up the reverse abstract interpreter a bit so that
    we handle "checked unknowns" better, and don't have lots of spurious
    unknown slots during data flow-based type inference.
    fixes issue 783
    
    Tested:
    yes
    
    R=johnlenz
    DELTA=249  (87 added, 130 deleted, 32 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=5297
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2121 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -9100,14 +9114,7 @@
   public void testMissingProperty20() throws Exception {
-    // NOTE(nicksantos): In the else branch, we know that x.foo is a
-    // CHECKED_UNKNOWN (UNKNOWN restricted to a falsey value). We could
-    // do some more sophisticated analysis here. Obviously, if x.foo is false,
-    // then x.foo cannot possibly be called. For example, you could imagine a
-    // VagueType that was like UnknownType, but had some constraints on it
-    // so that we knew it could never be a function.
-    //
-    // For now, we just punt on this issue.
     testTypes(
         "/** @param {Object} x */" +
-        "function f(x) { if (x.foo) { } else { x.foo(); } }");
+        "function f(x) { if (x.foo) { } else { x.foo(); } }",
+        "Property foo never defined on Object");
   }
 

commit 77b7c78d4aeeb6471f2f668a06c0f61a68f95ccd
Author: nicholas.j.santos@gmail.com <nicholas.j.santos@gmail.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Mon Jan 4 15:18:21 2010

    Add more unit tests for type checking.
    
    Add phase optimization.
    
    Fix a type inference bug.
    
    String.prototype.split may not return null.
    
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@55 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
--- /dev/null
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -0,0 +6327,14 @@
+  public void testMissingProperty20() throws Exception {
+    // NOTE(nicksantos): In the else branch, we know that x.foo is a
+    // CHECKED_UNKNOWN (UNKNOWN restricted to a falsey value). We could
+    // do some more sophisticated analysis here. Obviously, if x.foo is false,
+    // then x.foo cannot possibly be called. For example, you could imagine a
+    // VagueType that was like UnknownType, but had some constraints on it
+    // so that we knew it could never be a function.
+    //
+    // For now, we just punt on this issue.
+    testTypes(
+        "/** @param {Object} x */" +
+        "function f(x) { if (x.foo) { } else { x.foo(); } }");
+  }
+
