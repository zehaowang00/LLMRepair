commit 37ba197e62d6b60037d18afc33801e6221f1b8c6
Author: Gary D. Gregory <ggregory@apache.org>
Date:   Thu Apr 10 09:51:06 2014

    <action dev="ggregory" type="add" issue="CODEC-184" due-to="Cyrille Artho">NullPointerException in DoubleMetaPhone.isDoubleMetaphoneEqual when using empty strings</action>
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@1586300 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java b/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java
--- a/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java
+++ b/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java
@@ -1113,19 +1123,21 @@
     public void testIsDoubleMetaphoneEqualBasic() {
-        final String[][] testFixture = new String[][] { { "Case", "case" }, {
+        final String[][] testFixture = new String[][] { { 
+                "", "" }, {
+                "Case", "case" }, {
                 "CASE", "Case" }, {
                 "caSe", "cAsE" }, {
                 "cookie", "quick" }, {
                 "quick", "cookie" }, {
                 "Brian", "Bryan" }, {
                 "Auto", "Otto" }, {
                 "Steven", "Stefan" }, {
                 "Philipowitz", "Filipowicz" }
         };
         doubleMetaphoneEqualTest(testFixture, false);
         doubleMetaphoneEqualTest(testFixture, true);
     }
 
     /**
      * Example in the original article but failures in this Java impl:
      */
     @Test

commit ab1ee1b68b15234b62a840c4b1f6d2485d771450
Author: Gary D. Gregory <ggregory@apache.org>
Date:   Mon Jan 7 11:08:05 2013

    Use final where possible.
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@1429868 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java b/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java
--- a/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java
+++ b/src/test/java/org/apache/commons/codec/language/DoubleMetaphoneTest.java
@@ -1129,19 +1129,19 @@
     public void testIsDoubleMetaphoneEqualBasic() {
-        String[][] testFixture = new String[][] { { "Case", "case" }, {
+        final String[][] testFixture = new String[][] { { "Case", "case" }, {
                 "CASE", "Case" }, {
                 "caSe", "cAsE" }, {
                 "cookie", "quick" }, {
                 "quick", "cookie" }, {
                 "Brian", "Bryan" }, {
                 "Auto", "Otto" }, {
                 "Steven", "Stefan" }, {
                 "Philipowitz", "Filipowicz" }
         };
         doubleMetaphoneEqualTest(testFixture, false);
         doubleMetaphoneEqualTest(testFixture, true);
     }
 
     /**
      * Example in the original article but failures in this Java impl:
      */
     @Test

commit 8ffb4fb5e09446845f520fa8e759e9b8566d633e
Author: Gary D. Gregory <ggregory@apache.org>
Date:   Fri Apr 1 16:59:03 2011

    Migrate to JUnit 4 https://issues.apache.org/jira/browse/CODEC-120
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@1087894 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java b/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java
--- a/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java
+++ b/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java
@@ -1128,18 +1134,19 @@
     public void testIsDoubleMetaphoneEqualBasic() {
         String[][] testFixture = new String[][] { { "Case", "case" }, {
                 "CASE", "Case" }, {
                 "caSe", "cAsE" }, {
                 "cookie", "quick" }, {
                 "quick", "cookie" }, {
                 "Brian", "Bryan" }, {
                 "Auto", "Otto" }, {
                 "Steven", "Stefan" }, {
                 "Philipowitz", "Filipowicz" }
         };
         doubleMetaphoneEqualTest(testFixture, false);
         doubleMetaphoneEqualTest(testFixture, true);
     }
 
     /**
      * Example in the original article but failures in this Java impl:
      */
+    @Test

commit d911f5f22724170639c9968581764b1a84017b52
Author: Niall Kegan Pemberton <niallp@apache.org>
Date:   Wed May 21 15:57:51 2008

    Remove tabs
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/codec/trunk@658834 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java b/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java
--- a/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java
+++ b/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java
@@ -1119,18 +1119,18 @@
     public void testIsDoubleMetaphoneEqualBasic() {
         String[][] testFixture = new String[][] { { "Case", "case" }, {
                 "CASE", "Case" }, {
                 "caSe", "cAsE" }, {
                 "cookie", "quick" }, {
                 "quick", "cookie" }, {
                 "Brian", "Bryan" }, {
                 "Auto", "Otto" }, {
                 "Steven", "Stefan" }, {
                 "Philipowitz", "Filipowicz" }
         };
         doubleMetaphoneEqualTest(testFixture, false);
         doubleMetaphoneEqualTest(testFixture, true);
     }
 
     /**
-	 * Example in the original article but failures in this Java impl:
-	 */
+     * Example in the original article but failures in this Java impl:
+     */

commit 5bc006005c55912b9c94b9c8273727a7af45f0f0
Author: Gary D. Gregory <ggregory@apache.org>
Date:   Fri Nov 7 16:32:04 2003

    Improve code coverge as reported by clover from ~45% to ~85% with more test data.
    
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/codec/trunk@130236 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java b/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java
--- a/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java
+++ b/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java
@@ -142,2 +1146,18 @@
-        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual("cookie", "quick", alternate));
-        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual("quick", "cookie", alternate));
+    public void testIsDoubleMetaphoneEqualBasic() {
+        String[][] testFixture = new String[][] { { "Case", "case" }, {
+                "CASE", "Case" }, {
+                "caSe", "cAsE" }, {
+                "cookie", "quick" }, {
+                "quick", "cookie" }, {
+                "Brian", "Bryan" }, {
+                "Auto", "Otto" }, {
+                "Steven", "Stefan" }, {
+                "Philipowitz", "Filipowicz" }
+        };
+        doubleMetaphoneEqualTest(testFixture, false);
+        doubleMetaphoneEqualTest(testFixture, true);
+    }
+
+    /**
+	 * Example in the original article but failures in this Java impl:
+	 */

commit 21804202745423b5fcd0a34a2c8c94064416ab3a
Author: Timothy O'Brien <tobrien@apache.org>
Date:   Sun Oct 5 17:34:22 2003

    Fixed a number of broken Apache License 1.1 issues.
    Included the license verbatim from /commons/license
    (fixed the "acknowledgement" spelling bugs).
    
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/codec/trunk@130204 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java b/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java
--- a/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java
+++ b/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java
@@ -1,159 +142,2 @@
-/*
- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//codec/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java,v 1.1 2003/10/04 15:14:08 tobrien Exp $
- * $Revision: 1.1 $
- * $Date: 2003/10/04 15:14:08 $
- *
- * ====================================================================
- *
- * The Apache Software License, Version 1.1
- *
- * Copyright (c) 2003 The Apache Software Foundation.  All rights
- * reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met:
- *
- * 1. Redistributions of source code must retain the above copyright
- *    notice, this list of conditions and the following disclaimer.
- *
- * 2. Redistributions in binary form must reproduce the above copyright
- *    notice, this list of conditions and the following disclaimer in
- *    the documentation and/or other materials provided with the
- *    distribution.
- *
- * 3. The end-user documentation included with the redistribution, if
- *    any, must include the following acknowledgement:
- *       "This product includes software developed by the
- *        Apache Software Foundation (http://www.apache.org/)."
- *    Alternately, this acknowledgement may appear in the software itself,
- *    if and wherever such third-party acknowledgements normally appear.
- *
- * 4. The names "The Jakarta Project", "Commons", and "Apache Software
- *    Foundation" must not be used to endorse or promote products derived
- *    from this software without prior written permission. For written
- *    permission, please contact apache@apache.org.
- *
- * 5. Products derived from this software may not be called "Apache"
- *    nor may "Apache" appear in their names without prior written
- *    permission of the Apache Group.
- *
- * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
- * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
- * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
- * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
- * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
- * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
- * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
- * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
- * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
- * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
- * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
- * SUCH DAMAGE.
- * ====================================================================
- *
- * This software consists of voluntary contributions made by many
- * individuals on behalf of the Apache Software Foundation.  For more
- * information on the Apache Software Foundation, please see
- * <http://www.apache.org/>.
- *
- */
-package org.apache.commons.codec.language;
-
-import junit.framework.Test;
-import junit.framework.TestSuite;
-
-import org.apache.commons.codec.StringEncoder;
-import org.apache.commons.codec.StringEncoderAbstractTest;
-
-/**
- * Testcase for DoubleMetaphone
- * 
- * @author Mindbridge
- */
-public class DoubleMetaphoneTest extends StringEncoderAbstractTest
-{
-
-    public DoubleMetaphoneTest(String name)
-    {
-        super(name);
-    }
-
-    public static Test suite()
-    {
-        return (new TestSuite(DoubleMetaphoneTest.class));
-    }
-
-    public void setUp() throws Exception
-    {
-        super.setUp();
-        _doubleMetaphone = new DoubleMetaphone();
-    }
-
-    public void tearDown() throws Exception
-    {
-        super.tearDown();
-        _doubleMetaphone = null;
-    }
-
-    protected StringEncoder makeEncoder()
-    {
-        return new Metaphone();
-    }
-
-    // ------------------------------------------------------------------------
-
-    public void testDoubleMetaphone()
-    {
-        assertEquals("TSTN", _doubleMetaphone.doubleMetaphone("testing"));
-        assertEquals("0", _doubleMetaphone.doubleMetaphone("The"));
-        assertEquals("KK", _doubleMetaphone.doubleMetaphone("quick"));
-        assertEquals("PRN", _doubleMetaphone.doubleMetaphone("brown"));
-        assertEquals("FKS", _doubleMetaphone.doubleMetaphone("fox"));
-        assertEquals("JMPT", _doubleMetaphone.doubleMetaphone("jumped"));
-        assertEquals("AFR", _doubleMetaphone.doubleMetaphone("over"));
-        assertEquals("0", _doubleMetaphone.doubleMetaphone("the"));
-        assertEquals("LS", _doubleMetaphone.doubleMetaphone("lazy"));
-        assertEquals("TKS", _doubleMetaphone.doubleMetaphone("dogs"));
-        assertEquals("MKFR", _doubleMetaphone.doubleMetaphone("MacCafferey"));
-
-        assertEquals("TSTN", _doubleMetaphone.doubleMetaphone("testing", true));
-        assertEquals("T", _doubleMetaphone.doubleMetaphone("The", true));
-        assertEquals("KK", _doubleMetaphone.doubleMetaphone("quick", true));
-        assertEquals("PRN", _doubleMetaphone.doubleMetaphone("brown", true));
-        assertEquals("FKS", _doubleMetaphone.doubleMetaphone("fox", true));
-        assertEquals("AMPT", _doubleMetaphone.doubleMetaphone("jumped", true));
-        assertEquals("AFR", _doubleMetaphone.doubleMetaphone("over", true));
-        assertEquals("T", _doubleMetaphone.doubleMetaphone("the", true));
-        assertEquals("LS", _doubleMetaphone.doubleMetaphone("lazy", true));
-        assertEquals("TKS", _doubleMetaphone.doubleMetaphone("dogs", true));
-        assertEquals("MKFR", _doubleMetaphone.doubleMetaphone("MacCafferey", true));
-    }
-
-    public void testIsDoubleMetaphoneEqual()
-    {
-        doubleMetaphoneEqualTest(false);
-        doubleMetaphoneEqualTest(true);
-    }
-
-    public void doubleMetaphoneEqualTest(boolean alternate)
-    {
-        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual("Case", "case", alternate));
-        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual("CASE", "Case", alternate));
-        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual("caSe", "cAsE", alternate));
-
-        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual("cookie", "quick", alternate));
-        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual("quick", "cookie", alternate));
-
-        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual("Bryan", "Brian", alternate));
-        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual("Brian", "Bryan", alternate));
-
-        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual("Otto", "Auto", alternate));
-        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual("Auto", "Otto", alternate));
-
-        assertTrue(!_doubleMetaphone.isDoubleMetaphoneEqual("Brain", "Band", alternate));
-        assertTrue(!_doubleMetaphone.isDoubleMetaphoneEqual("Band", "Brain", alternate));
-    }
-
-    private DoubleMetaphone _doubleMetaphone = null;
-}
+        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual("cookie", "quick", alternate));
+        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual("quick", "cookie", alternate));

commit d542ac38c91731d1fd91feefee6301d90aa44957
Author: Timothy O'Brien <tobrien@apache.org>
Date:   Sat Oct 4 11:14:08 2003

    A DoubleMetaphoneTest was contributed by Mindbridge
    and contains test data from the original Lawrence Phillips
    article.
    
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/codec/trunk@130195 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java b/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java
--- /dev/null
+++ b/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java
@@ -0,0 +1,159 @@
+/*
+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//codec/src/test/org/apache/commons/codec/language/DoubleMetaphoneTest.java,v 1.1 2003/10/04 15:14:08 tobrien Exp $
+ * $Revision: 1.1 $
+ * $Date: 2003/10/04 15:14:08 $
+ *
+ * ====================================================================
+ *
+ * The Apache Software License, Version 1.1
+ *
+ * Copyright (c) 2003 The Apache Software Foundation.  All rights
+ * reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ *
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ *
+ * 3. The end-user documentation included with the redistribution, if
+ *    any, must include the following acknowledgement:
+ *       "This product includes software developed by the
+ *        Apache Software Foundation (http://www.apache.org/)."
+ *    Alternately, this acknowledgement may appear in the software itself,
+ *    if and wherever such third-party acknowledgements normally appear.
+ *
+ * 4. The names "The Jakarta Project", "Commons", and "Apache Software
+ *    Foundation" must not be used to endorse or promote products derived
+ *    from this software without prior written permission. For written
+ *    permission, please contact apache@apache.org.
+ *
+ * 5. Products derived from this software may not be called "Apache"
+ *    nor may "Apache" appear in their names without prior written
+ *    permission of the Apache Group.
+ *
+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+ * SUCH DAMAGE.
+ * ====================================================================
+ *
+ * This software consists of voluntary contributions made by many
+ * individuals on behalf of the Apache Software Foundation.  For more
+ * information on the Apache Software Foundation, please see
+ * <http://www.apache.org/>.
+ *
+ */
+package org.apache.commons.codec.language;
+
+import junit.framework.Test;
+import junit.framework.TestSuite;
+
+import org.apache.commons.codec.StringEncoder;
+import org.apache.commons.codec.StringEncoderAbstractTest;
+
+/**
+ * Testcase for DoubleMetaphone
+ * 
+ * @author Mindbridge
+ */
+public class DoubleMetaphoneTest extends StringEncoderAbstractTest
+{
+
+    public DoubleMetaphoneTest(String name)
+    {
+        super(name);
+    }
+
+    public static Test suite()
+    {
+        return (new TestSuite(DoubleMetaphoneTest.class));
+    }
+
+    public void setUp() throws Exception
+    {
+        super.setUp();
+        _doubleMetaphone = new DoubleMetaphone();
+    }
+
+    public void tearDown() throws Exception
+    {
+        super.tearDown();
+        _doubleMetaphone = null;
+    }
+
+    protected StringEncoder makeEncoder()
+    {
+        return new Metaphone();
+    }
+
+    // ------------------------------------------------------------------------
+
+    public void testDoubleMetaphone()
+    {
+        assertEquals("TSTN", _doubleMetaphone.doubleMetaphone("testing"));
+        assertEquals("0", _doubleMetaphone.doubleMetaphone("The"));
+        assertEquals("KK", _doubleMetaphone.doubleMetaphone("quick"));
+        assertEquals("PRN", _doubleMetaphone.doubleMetaphone("brown"));
+        assertEquals("FKS", _doubleMetaphone.doubleMetaphone("fox"));
+        assertEquals("JMPT", _doubleMetaphone.doubleMetaphone("jumped"));
+        assertEquals("AFR", _doubleMetaphone.doubleMetaphone("over"));
+        assertEquals("0", _doubleMetaphone.doubleMetaphone("the"));
+        assertEquals("LS", _doubleMetaphone.doubleMetaphone("lazy"));
+        assertEquals("TKS", _doubleMetaphone.doubleMetaphone("dogs"));
+        assertEquals("MKFR", _doubleMetaphone.doubleMetaphone("MacCafferey"));
+
+        assertEquals("TSTN", _doubleMetaphone.doubleMetaphone("testing", true));
+        assertEquals("T", _doubleMetaphone.doubleMetaphone("The", true));
+        assertEquals("KK", _doubleMetaphone.doubleMetaphone("quick", true));
+        assertEquals("PRN", _doubleMetaphone.doubleMetaphone("brown", true));
+        assertEquals("FKS", _doubleMetaphone.doubleMetaphone("fox", true));
+        assertEquals("AMPT", _doubleMetaphone.doubleMetaphone("jumped", true));
+        assertEquals("AFR", _doubleMetaphone.doubleMetaphone("over", true));
+        assertEquals("T", _doubleMetaphone.doubleMetaphone("the", true));
+        assertEquals("LS", _doubleMetaphone.doubleMetaphone("lazy", true));
+        assertEquals("TKS", _doubleMetaphone.doubleMetaphone("dogs", true));
+        assertEquals("MKFR", _doubleMetaphone.doubleMetaphone("MacCafferey", true));
+    }
+
+    public void testIsDoubleMetaphoneEqual()
+    {
+        doubleMetaphoneEqualTest(false);
+        doubleMetaphoneEqualTest(true);
+    }
+
+    public void doubleMetaphoneEqualTest(boolean alternate)
+    {
+        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual("Case", "case", alternate));
+        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual("CASE", "Case", alternate));
+        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual("caSe", "cAsE", alternate));
+
+        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual("cookie", "quick", alternate));
+        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual("quick", "cookie", alternate));
+
+        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual("Bryan", "Brian", alternate));
+        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual("Brian", "Bryan", alternate));
+
+        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual("Otto", "Auto", alternate));
+        assertTrue(_doubleMetaphone.isDoubleMetaphoneEqual("Auto", "Otto", alternate));
+
+        assertTrue(!_doubleMetaphone.isDoubleMetaphoneEqual("Brain", "Band", alternate));
+        assertTrue(!_doubleMetaphone.isDoubleMetaphoneEqual("Band", "Brain", alternate));
+    }
+
+    private DoubleMetaphone _doubleMetaphone = null;
+}
