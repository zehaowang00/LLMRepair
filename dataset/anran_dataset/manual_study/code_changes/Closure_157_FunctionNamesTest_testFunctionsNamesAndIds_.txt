commit 41acde3e8e5e8d37ade765b41d9fd29861f03e5e
Author: johnlenz@google.com <johnlenz@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Mon Apr 4 17:26:33 2011

    Define number keys in object literals to be quoted string nodes. Tagged with NUMBER_PROP
    Fixes issue 347
    
    R=nicksantos
    DELTA=229  (157 added, 19 deleted, 53 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=1252
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@966 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/FunctionNamesTest.java b/test/com/google/javascript/jscomp/FunctionNamesTest.java
--- a/test/com/google/javascript/jscomp/FunctionNamesTest.java
+++ b/test/com/google/javascript/jscomp/FunctionNamesTest.java
@@ -40,55 +40,55 @@
   public void testFunctionsNamesAndIds() {
     final String jsSource =
         "goog.widget = function(str) {\n" +
         "  this.member_fn = function() {};\n" +
         "  local_fn = function() {};\n" +
         "  (function(a){})(1);\n" +
         "}\n" +
         "function foo() {\n" +
         "  function bar() {}\n" +
         "}\n" +
         "literal = {f1 : function(){}, f2 : function(){}};\n" +
         "goog.array.map(arr, function named(){});\n" +
         "goog.array.map(arr, function(){});\n" +
         "named_twice = function quax(){};\n" +
         "recliteral = {l1 : {l2 : function(){}}};\n" +
         "namedliteral = {n1 : function litnamed(){}};\n" +
         "namedrecliteral = {n1 : {n2 : function reclitnamed(){}}};\n" +
         "numliteral = {1 : function(){}};\n" +
         "recnumliteral = {1 : {a : function(){}}};\n";
 
     testSame(jsSource);
 
     final Map<Integer, String> idNameMap = Maps.newLinkedHashMap();
     int count = 0;
     for (Node f : functionNames.getFunctionNodeList()) {
       int id = functionNames.getFunctionId(f);
       String name = functionNames.getFunctionName(f);
       idNameMap.put(id, name);
       count++;
     }
 
     assertEquals("Unexpected number of functions", 16, count);
 
     final Map<Integer, String> expectedMap = Maps.newLinkedHashMap();
 
     expectedMap.put(0, "goog.widget.member_fn");
     expectedMap.put(1, "goog.widget::local_fn");
     expectedMap.put(2, "goog.widget::<anonymous>");
     expectedMap.put(3, "goog.widget");
     expectedMap.put(4, "foo::bar");
     expectedMap.put(5, "foo");
     expectedMap.put(6, "literal.f1");
     expectedMap.put(7, "literal.f2");
     expectedMap.put(8, "named");
     expectedMap.put(9, "<anonymous>");
     expectedMap.put(10, "quax");
     expectedMap.put(11, "recliteral.l1.l2");
     expectedMap.put(12, "litnamed");
     expectedMap.put(13, "reclitnamed");
-    expectedMap.put(14, "<anonymous>");
-    expectedMap.put(15, "<anonymous>");
+    expectedMap.put(14, "numliteral.__2");
+    expectedMap.put(15, "recnumliteral.__3.a");
     assertEquals("Function id/name mismatch",
                  expectedMap, idNameMap);
   }
 }

commit 6b49cfd9022fe111bdad745c78ea877fbc2f7ba3
Author: nicholas.j.santos@gmail.com <nicholas.j.santos@gmail.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Tue Nov 3 18:51:57 2009

    Initial commit.
    
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/FunctionNamesTest.java b/test/com/google/javascript/jscomp/FunctionNamesTest.java
--- /dev/null
+++ b/test/com/google/javascript/jscomp/FunctionNamesTest.java
@@ -0,0 +41,55 @@
+  public void testFunctionsNamesAndIds() {
+    final String jsSource =
+        "goog.widget = function(str) {\n" +
+        "  this.member_fn = function() {};\n" +
+        "  local_fn = function() {};\n" +
+        "  (function(a){})(1);\n" +
+        "}\n" +
+        "function foo() {\n" +
+        "  function bar() {}\n" +
+        "}\n" +
+        "literal = {f1 : function(){}, f2 : function(){}};\n" +
+        "goog.array.map(arr, function named(){});\n" +
+        "goog.array.map(arr, function(){});\n" +
+        "named_twice = function quax(){};\n" +
+        "recliteral = {l1 : {l2 : function(){}}};\n" +
+        "namedliteral = {n1 : function litnamed(){}};\n" +
+        "namedrecliteral = {n1 : {n2 : function reclitnamed(){}}};\n" +
+        "numliteral = {1 : function(){}};\n" +
+        "recnumliteral = {1 : {a : function(){}}};\n";
+
+    testSame(jsSource);
+
+    final Map<Integer, String> idNameMap = Maps.newLinkedHashMap();
+    int count = 0;
+    for (Node f : functionNames.getFunctionNodeList()) {
+      int id = functionNames.getFunctionId(f);
+      String name = functionNames.getFunctionName(f);
+      idNameMap.put(id, name);
+      count++;
+    }
+
+    assertEquals("Unexpected number of functions", 16, count);
+
+    final Map<Integer, String> expectedMap = Maps.newLinkedHashMap();
+
+    expectedMap.put(0, "goog.widget.member_fn");
+    expectedMap.put(1, "goog.widget::local_fn");
+    expectedMap.put(2, "goog.widget::<anonymous>");
+    expectedMap.put(3, "goog.widget");
+    expectedMap.put(4, "foo::bar");
+    expectedMap.put(5, "foo");
+    expectedMap.put(6, "literal.f1");
+    expectedMap.put(7, "literal.f2");
+    expectedMap.put(8, "named");
+    expectedMap.put(9, "<anonymous>");
+    expectedMap.put(10, "quax");
+    expectedMap.put(11, "recliteral.l1.l2");
+    expectedMap.put(12, "litnamed");
+    expectedMap.put(13, "reclitnamed");
+    expectedMap.put(14, "<anonymous>");
+    expectedMap.put(15, "<anonymous>");
+    assertEquals("Function id/name mismatch",
+                 expectedMap, idNameMap);
+  }
+}
