commit 4fbbc47cb18f241b23dd2d4bf9c15d45b2473523
Author: Ben Lickly <blickly@google.com>
Date:   Thu Feb 21 12:23:29 2013

    Fixes issue 919
    
    Fix exception when parsing erroneous jsdoc /** @return {@code x */
    
    Callers of the jsdoc token stream's getRemainingJSDocLine weren't
    clearing the token lookahead. Subsequent call to next() then
    returned the incorrect token.
    
    Fixes: https://code.google.com/p/closure-compiler/issues/detail?id=919
    -------------
    Created by MOE: http://code.google.com/p/moe-java
    MOE_MIGRATED_REVID=42819292

diff --git a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
@@ -2755,153 +2755,158 @@
+  public void testTextExtents() {
+    parse("@return {@code foo} bar \n *    baz. */",
+        true, "Bad type annotation. type not recognized due to syntax error");
+  }
+
   /**
    * Asserts that a documentation field exists on the given marker.
    *
    * @param description The text of the documentation field expected.
    * @param startCharno The starting character of the text.
    * @param endLineno The ending line of the text.
    * @param endCharno The ending character of the text.
    * @return The marker, for chaining purposes.
    */
   private JSDocInfo.Marker assertDocumentationInMarker(JSDocInfo.Marker marker,
                                                        String description,
                                                        int startCharno,
                                                        int endLineno,
                                                        int endCharno) {
     assertTrue(marker.getDescription() != null);
     assertEquals(description, marker.getDescription().getItem());
 
     // Match positional information.
     assertEquals(marker.getAnnotation().getStartLine(),
                  marker.getDescription().getStartLine());
     assertEquals(startCharno, marker.getDescription().getPositionOnStartLine());
     assertEquals(endLineno, marker.getDescription().getEndLine());
     assertEquals(endCharno, marker.getDescription().getPositionOnEndLine());
 
     return marker;
   }
 
   /**
    * Asserts that a type field exists on the given marker.
    *
    * @param typeName The name of the type expected in the type field.
    * @param startCharno The starting character of the type declaration.
    * @param hasBrackets Whether the type in the type field is expected
    *     to have brackets.
    * @return The marker, for chaining purposes.
    */
   private JSDocInfo.Marker assertTypeInMarker(
       JSDocInfo.Marker marker, String typeName,
       int startLineno, int startCharno, int endLineno, int endCharno,
       boolean hasBrackets) {
 
     assertTrue(marker.getType() != null);
     assertTrue(marker.getType().getItem().isString());
 
     // Match the name and brackets information.
     String foundName = marker.getType().getItem().getString();
 
     assertEquals(typeName, foundName);
     assertEquals(hasBrackets, marker.getType().hasBrackets());
 
     // Match position information.
     assertEquals(startCharno, marker.getType().getPositionOnStartLine());
     assertEquals(endCharno, marker.getType().getPositionOnEndLine());
     assertEquals(startLineno, marker.getType().getStartLine());
     assertEquals(endLineno, marker.getType().getEndLine());
 
     return marker;
   }
 
   /**
    * Asserts that a name field exists on the given marker.
    *
    * @param name The name expected in the name field.
    * @param startCharno The starting character of the text.
    * @return The marker, for chaining purposes.
    */
   @SuppressWarnings("deprecation")
   private JSDocInfo.Marker assertNameInMarker(JSDocInfo.Marker marker,
       String name, int startLine, int startCharno) {
     assertTrue(marker.getName() != null);
     assertEquals(name, marker.getName().getItem());
 
     assertEquals(startCharno, marker.getName().getPositionOnStartLine());
     assertEquals(startCharno + name.length(),
                  marker.getName().getPositionOnEndLine());
 
     assertEquals(startLine, marker.getName().getStartLine());
     assertEquals(startLine, marker.getName().getEndLine());
 
     return marker;
   }
 
   /**
    * Asserts that an annotation marker of a given annotation name
    * is found in the given JSDocInfo.
    *
    * @param jsdoc The JSDocInfo in which to search for the annotation marker.
    * @param annotationName The name/type of the annotation for which to
    *   search. Example: "author" for an "@author" annotation.
    * @param startLineno The expected starting line number of the marker.
    * @param startCharno The expected character on the starting line.
    * @return The marker found, for further testing.
    */
   private JSDocInfo.Marker assertAnnotationMarker(JSDocInfo jsdoc,
                                                   String annotationName,
                                                   int startLineno,
                                                   int startCharno) {
     return assertAnnotationMarker(jsdoc, annotationName, startLineno,
                                   startCharno, 0);
   }
 
   /**
    * Asserts that the index-th annotation marker of a given annotation name
    * is found in the given JSDocInfo.
    *
    * @param jsdoc The JSDocInfo in which to search for the annotation marker.
    * @param annotationName The name/type of the annotation for which to
    *   search. Example: "author" for an "@author" annotation.
    * @param startLineno The expected starting line number of the marker.
    * @param startCharno The expected character on the starting line.
    * @param index The index of the marker.
    * @return The marker found, for further testing.
    */
   private JSDocInfo.Marker assertAnnotationMarker(JSDocInfo jsdoc,
                                                   String annotationName,
                                                   int startLineno,
                                                   int startCharno,
                                                   int index) {
 
     Collection<JSDocInfo.Marker> markers = jsdoc.getMarkers();
 
     assertTrue(markers.size() > 0);
 
     int counter = 0;
 
     for (JSDocInfo.Marker marker : markers) {
       if (marker.getAnnotation() != null) {
         if (annotationName.equals(marker.getAnnotation().getItem())) {
 
           if (counter == index) {
             assertEquals(startLineno, marker.getAnnotation().getStartLine());
             assertEquals(startCharno,
                          marker.getAnnotation().getPositionOnStartLine());
             assertEquals(startLineno, marker.getAnnotation().getEndLine());
             assertEquals(startCharno + annotationName.length(),
                          marker.getAnnotation().getPositionOnEndLine());
 
             return marker;
           }
 
           counter++;
         }
       }
     }
 
     fail("No marker found");
     return null;
   }
 
   private <T> void assertContains(Collection<T> collection, T item) {
     assertTrue(collection.contains(item));
   }
 

commit 4d76dedc8b1d33060a9164c6ec38193d1e69502c
Author: johnlenz@google.com <johnlenz@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Wed Jan 2 19:59:13 2013

    Clean up a bunch of code warnings that are visible in eclipse.
    
    R=acleung
    DELTA=99 (38 added, 29 deleted, 32 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=6055
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2431 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
@@ -2704,152 +2705,153 @@
   /**
    * Asserts that a documentation field exists on the given marker.
    *
    * @param description The text of the documentation field expected.
    * @param startCharno The starting character of the text.
    * @param endLineno The ending line of the text.
    * @param endCharno The ending character of the text.
    * @return The marker, for chaining purposes.
    */
   private JSDocInfo.Marker assertDocumentationInMarker(JSDocInfo.Marker marker,
                                                        String description,
                                                        int startCharno,
                                                        int endLineno,
                                                        int endCharno) {
     assertTrue(marker.getDescription() != null);
     assertEquals(description, marker.getDescription().getItem());
 
     // Match positional information.
     assertEquals(marker.getAnnotation().getStartLine(),
                  marker.getDescription().getStartLine());
     assertEquals(startCharno, marker.getDescription().getPositionOnStartLine());
     assertEquals(endLineno, marker.getDescription().getEndLine());
     assertEquals(endCharno, marker.getDescription().getPositionOnEndLine());
 
     return marker;
   }
 
   /**
    * Asserts that a type field exists on the given marker.
    *
    * @param typeName The name of the type expected in the type field.
    * @param startCharno The starting character of the type declaration.
    * @param hasBrackets Whether the type in the type field is expected
    *     to have brackets.
    * @return The marker, for chaining purposes.
    */
   private JSDocInfo.Marker assertTypeInMarker(
       JSDocInfo.Marker marker, String typeName,
       int startLineno, int startCharno, int endLineno, int endCharno,
       boolean hasBrackets) {
 
     assertTrue(marker.getType() != null);
     assertTrue(marker.getType().getItem().isString());
 
     // Match the name and brackets information.
     String foundName = marker.getType().getItem().getString();
 
     assertEquals(typeName, foundName);
     assertEquals(hasBrackets, marker.getType().hasBrackets());
 
     // Match position information.
     assertEquals(startCharno, marker.getType().getPositionOnStartLine());
     assertEquals(endCharno, marker.getType().getPositionOnEndLine());
     assertEquals(startLineno, marker.getType().getStartLine());
     assertEquals(endLineno, marker.getType().getEndLine());
 
     return marker;
   }
 
   /**
    * Asserts that a name field exists on the given marker.
    *
    * @param name The name expected in the name field.
    * @param startCharno The starting character of the text.
    * @return The marker, for chaining purposes.
    */
+  @SuppressWarnings("deprecation")
   private JSDocInfo.Marker assertNameInMarker(JSDocInfo.Marker marker,
       String name, int startLine, int startCharno) {
     assertTrue(marker.getName() != null);
     assertEquals(name, marker.getName().getItem());
 
     assertEquals(startCharno, marker.getName().getPositionOnStartLine());
     assertEquals(startCharno + name.length(),
                  marker.getName().getPositionOnEndLine());
 
     assertEquals(startLine, marker.getName().getStartLine());
     assertEquals(startLine, marker.getName().getEndLine());
 
     return marker;
   }
 
   /**
    * Asserts that an annotation marker of a given annotation name
    * is found in the given JSDocInfo.
    *
    * @param jsdoc The JSDocInfo in which to search for the annotation marker.
    * @param annotationName The name/type of the annotation for which to
    *   search. Example: "author" for an "@author" annotation.
    * @param startLineno The expected starting line number of the marker.
    * @param startCharno The expected character on the starting line.
    * @return The marker found, for further testing.
    */
   private JSDocInfo.Marker assertAnnotationMarker(JSDocInfo jsdoc,
                                                   String annotationName,
                                                   int startLineno,
                                                   int startCharno) {
     return assertAnnotationMarker(jsdoc, annotationName, startLineno,
                                   startCharno, 0);
   }
 
   /**
    * Asserts that the index-th annotation marker of a given annotation name
    * is found in the given JSDocInfo.
    *
    * @param jsdoc The JSDocInfo in which to search for the annotation marker.
    * @param annotationName The name/type of the annotation for which to
    *   search. Example: "author" for an "@author" annotation.
    * @param startLineno The expected starting line number of the marker.
    * @param startCharno The expected character on the starting line.
    * @param index The index of the marker.
    * @return The marker found, for further testing.
    */
   private JSDocInfo.Marker assertAnnotationMarker(JSDocInfo jsdoc,
                                                   String annotationName,
                                                   int startLineno,
                                                   int startCharno,
                                                   int index) {
 
     Collection<JSDocInfo.Marker> markers = jsdoc.getMarkers();
 
     assertTrue(markers.size() > 0);
 
     int counter = 0;
 
     for (JSDocInfo.Marker marker : markers) {
       if (marker.getAnnotation() != null) {
         if (annotationName.equals(marker.getAnnotation().getItem())) {
 
           if (counter == index) {
             assertEquals(startLineno, marker.getAnnotation().getStartLine());
             assertEquals(startCharno,
                          marker.getAnnotation().getPositionOnStartLine());
             assertEquals(startLineno, marker.getAnnotation().getEndLine());
             assertEquals(startCharno + annotationName.length(),
                          marker.getAnnotation().getPositionOnEndLine());
 
             return marker;
           }
 
           counter++;
         }
       }
     }
 
     fail("No marker found");
     return null;
   }
 
   private <T> void assertContains(Collection<T> collection, T item) {
     assertTrue(collection.contains(item));
   }
 

commit ec324a9bb23eb78c76f537f4c4170ba88d542f1c
Author: johnlenz@google.com <johnlenz@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Thu Nov 10 11:36:26 2011

    Replace the bulk of the Node.getType() == Token.XXX calls with
    Node.isXXX calls.
    
    R=nicksantos
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=3677
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1582 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
@@ -2494,152 +2494,152 @@
   /**
    * Asserts that a documentation field exists on the given marker.
    *
    * @param description The text of the documentation field expected.
    * @param startCharno The starting character of the text.
    * @param endLineno The ending line of the text.
    * @param endCharno The ending character of the text.
    * @return The marker, for chaining purposes.
    */
   private JSDocInfo.Marker assertDocumentationInMarker(JSDocInfo.Marker marker,
                                                        String description,
                                                        int startCharno,
                                                        int endLineno,
                                                        int endCharno) {
     assertTrue(marker.getDescription() != null);
     assertEquals(description, marker.getDescription().getItem());
 
     // Match positional information.
     assertEquals(marker.getAnnotation().getStartLine(),
                  marker.getDescription().getStartLine());
     assertEquals(startCharno, marker.getDescription().getPositionOnStartLine());
     assertEquals(endLineno, marker.getDescription().getEndLine());
     assertEquals(endCharno, marker.getDescription().getPositionOnEndLine());
 
     return marker;
   }
 
   /**
    * Asserts that a type field exists on the given marker.
    *
    * @param typeName The name of the type expected in the type field.
    * @param startCharno The starting character of the type declaration.
    * @param hasBrackets Whether the type in the type field is expected
    *     to have brackets.
    * @return The marker, for chaining purposes.
    */
   private JSDocInfo.Marker assertTypeInMarker(
       JSDocInfo.Marker marker, String typeName,
       int startLineno, int startCharno, int endLineno, int endCharno,
       boolean hasBrackets) {
 
     assertTrue(marker.getType() != null);
-    assertTrue(marker.getType().getItem().getType() == Token.STRING);
+    assertTrue(marker.getType().getItem().isString());
 
     // Match the name and brackets information.
     String foundName = marker.getType().getItem().getString();
 
     assertEquals(typeName, foundName);
     assertEquals(hasBrackets, marker.getType().hasBrackets());
 
     // Match position information.
     assertEquals(startCharno, marker.getType().getPositionOnStartLine());
     assertEquals(endCharno, marker.getType().getPositionOnEndLine());
     assertEquals(startLineno, marker.getType().getStartLine());
     assertEquals(endLineno, marker.getType().getEndLine());
 
     return marker;
   }
 
   /**
    * Asserts that a name field exists on the given marker.
    *
    * @param name The name expected in the name field.
    * @param startCharno The starting character of the text.
    * @return The marker, for chaining purposes.
    */
   private JSDocInfo.Marker assertNameInMarker(JSDocInfo.Marker marker,
       String name, int startLine, int startCharno) {
     assertTrue(marker.getName() != null);
     assertEquals(name, marker.getName().getItem());
 
     assertEquals(startCharno, marker.getName().getPositionOnStartLine());
     assertEquals(startCharno + name.length(),
                  marker.getName().getPositionOnEndLine());
 
     assertEquals(startLine, marker.getName().getStartLine());
     assertEquals(startLine, marker.getName().getEndLine());
 
     return marker;
   }
 
   /**
    * Asserts that an annotation marker of a given annotation name
    * is found in the given JSDocInfo.
    *
    * @param jsdoc The JSDocInfo in which to search for the annotation marker.
    * @param annotationName The name/type of the annotation for which to
    *   search. Example: "author" for an "@author" annotation.
    * @param startLineno The expected starting line number of the marker.
    * @param startCharno The expected character on the starting line.
    * @return The marker found, for further testing.
    */
   private JSDocInfo.Marker assertAnnotationMarker(JSDocInfo jsdoc,
                                                   String annotationName,
                                                   int startLineno,
                                                   int startCharno) {
     return assertAnnotationMarker(jsdoc, annotationName, startLineno,
                                   startCharno, 0);
   }
 
   /**
    * Asserts that the index-th annotation marker of a given annotation name
    * is found in the given JSDocInfo.
    *
    * @param jsdoc The JSDocInfo in which to search for the annotation marker.
    * @param annotationName The name/type of the annotation for which to
    *   search. Example: "author" for an "@author" annotation.
    * @param startLineno The expected starting line number of the marker.
    * @param startCharno The expected character on the starting line.
    * @param index The index of the marker.
    * @return The marker found, for further testing.
    */
   private JSDocInfo.Marker assertAnnotationMarker(JSDocInfo jsdoc,
                                                   String annotationName,
                                                   int startLineno,
                                                   int startCharno,
                                                   int index) {
 
     Collection<JSDocInfo.Marker> markers = jsdoc.getMarkers();
 
     assertTrue(markers.size() > 0);
 
     int counter = 0;
 
     for (JSDocInfo.Marker marker : markers) {
       if (marker.getAnnotation() != null) {
         if (annotationName.equals(marker.getAnnotation().getItem())) {
 
           if (counter == index) {
             assertEquals(startLineno, marker.getAnnotation().getStartLine());
             assertEquals(startCharno,
                          marker.getAnnotation().getPositionOnStartLine());
             assertEquals(startLineno, marker.getAnnotation().getEndLine());
             assertEquals(startCharno + annotationName.length(),
                          marker.getAnnotation().getPositionOnEndLine());
 
             return marker;
           }
 
           counter++;
         }
       }
     }
 
     fail("No marker found");
     return null;
   }
 
   private <T> void assertContains(Collection<T> collection, T item) {
     assertTrue(collection.contains(item));
   }
 

commit ff67789e6125face69d6dc28697121cb3b6df854
Author: nicksantos@google.com <nicksantos@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Wed Sep 14 11:18:08 2011

    Fix a bunch of bugs in marker generation, and add lots of inline
    assertions to prevent this from regressing.
    Right now, Grok has a bunch of checks to work around these bugs,
    and we would like to get rid of them.
    
    R=jschorr,tylerg
    DELTA=272  (134 added, 14 deleted, 124 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=3268
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1442 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
@@ -2484,158 +2495,152 @@
   /**
    * Asserts that a documentation field exists on the given marker.
    *
    * @param description The text of the documentation field expected.
    * @param startCharno The starting character of the text.
    * @param endLineno The ending line of the text.
    * @param endCharno The ending character of the text.
    * @return The marker, for chaining purposes.
    */
   private JSDocInfo.Marker assertDocumentationInMarker(JSDocInfo.Marker marker,
                                                        String description,
                                                        int startCharno,
                                                        int endLineno,
                                                        int endCharno) {
-    assertTrue(marker.description != null);
-    assertEquals(description, marker.description.getItem());
+    assertTrue(marker.getDescription() != null);
+    assertEquals(description, marker.getDescription().getItem());
 
     // Match positional information.
-    assertEquals(marker.annotation.getStartLine(),
-                 marker.description.getStartLine());
-    assertEquals(startCharno, marker.description.getPositionOnStartLine());
-    assertEquals(endLineno, marker.description.getEndLine());
-    assertEquals(endCharno, marker.description.getPositionOnEndLine());
+    assertEquals(marker.getAnnotation().getStartLine(),
+                 marker.getDescription().getStartLine());
+    assertEquals(startCharno, marker.getDescription().getPositionOnStartLine());
+    assertEquals(endLineno, marker.getDescription().getEndLine());
+    assertEquals(endCharno, marker.getDescription().getPositionOnEndLine());
 
     return marker;
   }
 
   /**
    * Asserts that a type field exists on the given marker.
    *
    * @param typeName The name of the type expected in the type field.
    * @param startCharno The starting character of the type declaration.
    * @param hasBrackets Whether the type in the type field is expected
    *     to have brackets.
    * @return The marker, for chaining purposes.
    */
-  private JSDocInfo.Marker assertTypeInMarker(JSDocInfo.Marker marker,
-                                            String typeName, int startCharno,
-                                            boolean hasBrackets) {
+  private JSDocInfo.Marker assertTypeInMarker(
+      JSDocInfo.Marker marker, String typeName,
+      int startLineno, int startCharno, int endLineno, int endCharno,
+      boolean hasBrackets) {
 
-    assertTrue(marker.type != null);
-    assertTrue(marker.type.getItem().getType() == Token.STRING);
+    assertTrue(marker.getType() != null);
+    assertTrue(marker.getType().getItem().getType() == Token.STRING);
 
     // Match the name and brackets information.
-    String foundName = marker.type.getItem().getString();
+    String foundName = marker.getType().getItem().getString();
 
     assertEquals(typeName, foundName);
-    assertEquals(hasBrackets, marker.type.hasBrackets);
+    assertEquals(hasBrackets, marker.getType().hasBrackets());
 
     // Match position information.
-    assertEquals(startCharno, marker.type.getPositionOnStartLine());
-
-    int endCharno = startCharno + foundName.length();
-
-    if (hasBrackets) {
-      endCharno += 1;
-    }
-
-    assertEquals(endCharno, marker.type.getPositionOnEndLine());
-    assertEquals(marker.annotation.getStartLine(), marker.type.getStartLine());
-    assertEquals(marker.annotation.getStartLine(), marker.type.getEndLine());
+    assertEquals(startCharno, marker.getType().getPositionOnStartLine());
+    assertEquals(endCharno, marker.getType().getPositionOnEndLine());
+    assertEquals(startLineno, marker.getType().getStartLine());
+    assertEquals(endLineno, marker.getType().getEndLine());
 
     return marker;
   }
 
   /**
    * Asserts that a name field exists on the given marker.
    *
    * @param name The name expected in the name field.
    * @param startCharno The starting character of the text.
    * @return The marker, for chaining purposes.
    */
   private JSDocInfo.Marker assertNameInMarker(JSDocInfo.Marker marker,
-                                            String name, int startCharno) {
-    assertTrue(marker.name != null);
-    assertEquals(name, marker.name.getItem());
+      String name, int startLine, int startCharno) {
+    assertTrue(marker.getName() != null);
+    assertEquals(name, marker.getName().getItem());
 
-    assertEquals(startCharno, marker.name.getPositionOnStartLine());
+    assertEquals(startCharno, marker.getName().getPositionOnStartLine());
     assertEquals(startCharno + name.length(),
-                 marker.name.getPositionOnEndLine());
+                 marker.getName().getPositionOnEndLine());
 
-    assertEquals(marker.annotation.getStartLine(), marker.name.getStartLine());
-    assertEquals(marker.annotation.getStartLine(), marker.name.getEndLine());
+    assertEquals(startLine, marker.getName().getStartLine());
+    assertEquals(startLine, marker.getName().getEndLine());
 
     return marker;
   }
 
   /**
    * Asserts that an annotation marker of a given annotation name
    * is found in the given JSDocInfo.
    *
    * @param jsdoc The JSDocInfo in which to search for the annotation marker.
    * @param annotationName The name/type of the annotation for which to
    *   search. Example: "author" for an "@author" annotation.
    * @param startLineno The expected starting line number of the marker.
    * @param startCharno The expected character on the starting line.
    * @return The marker found, for further testing.
    */
   private JSDocInfo.Marker assertAnnotationMarker(JSDocInfo jsdoc,
                                                   String annotationName,
                                                   int startLineno,
                                                   int startCharno) {
     return assertAnnotationMarker(jsdoc, annotationName, startLineno,
                                   startCharno, 0);
   }
 
   /**
    * Asserts that the index-th annotation marker of a given annotation name
    * is found in the given JSDocInfo.
    *
    * @param jsdoc The JSDocInfo in which to search for the annotation marker.
    * @param annotationName The name/type of the annotation for which to
    *   search. Example: "author" for an "@author" annotation.
    * @param startLineno The expected starting line number of the marker.
    * @param startCharno The expected character on the starting line.
    * @param index The index of the marker.
    * @return The marker found, for further testing.
    */
   private JSDocInfo.Marker assertAnnotationMarker(JSDocInfo jsdoc,
                                                   String annotationName,
                                                   int startLineno,
                                                   int startCharno,
                                                   int index) {
 
     Collection<JSDocInfo.Marker> markers = jsdoc.getMarkers();
 
     assertTrue(markers.size() > 0);
 
     int counter = 0;
 
     for (JSDocInfo.Marker marker : markers) {
-      if (marker.annotation != null) {
-        if (annotationName.equals(marker.annotation.getItem())) {
+      if (marker.getAnnotation() != null) {
+        if (annotationName.equals(marker.getAnnotation().getItem())) {
 
           if (counter == index) {
-            assertEquals(startLineno, marker.annotation.getStartLine());
+            assertEquals(startLineno, marker.getAnnotation().getStartLine());
             assertEquals(startCharno,
-                         marker.annotation.getPositionOnStartLine());
-            assertEquals(startLineno, marker.annotation.getEndLine());
+                         marker.getAnnotation().getPositionOnStartLine());
+            assertEquals(startLineno, marker.getAnnotation().getEndLine());
             assertEquals(startCharno + annotationName.length(),
-                         marker.annotation.getPositionOnEndLine());
+                         marker.getAnnotation().getPositionOnEndLine());
 
             return marker;
           }
 
           counter++;
         }
       }
     }
 
     fail("No marker found");
     return null;
   }
 
   private <T> void assertContains(Collection<T> collection, T item) {
     assertTrue(collection.contains(item));
   }
 

commit 3924ff1e4a236d68a0b5448d185537d90ca04419
Author: nicholas.j.santos@gmail.com <nicholas.j.santos@gmail.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Wed Dec 2 20:12:42 2009

    Warn about all with statements, unless there's an explicit
    /** @suppress {with} */ tag
    
    Refactor a bunch of stuff into PassConfigs
    
    Add a bunch of parser tests.
    
    Up-integrate John and Norris' latest changes to Rhino at trunk
    
    Minor type-tightening bug fixes.
    
    
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@18 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
--- /dev/null
+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
@@ -0,0 +2067,158 @@
+  /**
+   * Asserts that a documentation field exists on the given marker.
+   *
+   * @param description The text of the documentation field expected.
+   * @param startCharno The starting character of the text.
+   * @param endLineno The ending line of the text.
+   * @param endCharno The ending character of the text.
+   * @return The marker, for chaining purposes.
+   */
+  private JSDocInfo.Marker assertDocumentationInMarker(JSDocInfo.Marker marker,
+                                                       String description,
+                                                       int startCharno,
+                                                       int endLineno,
+                                                       int endCharno) {
+    assertTrue(marker.description != null);
+    assertEquals(description, marker.description.getItem());
+
+    // Match positional information.
+    assertEquals(marker.annotation.getStartLine(),
+                 marker.description.getStartLine());
+    assertEquals(startCharno, marker.description.getPositionOnStartLine());
+    assertEquals(endLineno, marker.description.getEndLine());
+    assertEquals(endCharno, marker.description.getPositionOnEndLine());
+
+    return marker;
+  }
+
+  /**
+   * Asserts that a type field exists on the given marker.
+   *
+   * @param typeName The name of the type expected in the type field.
+   * @param startCharno The starting character of the type declaration.
+   * @param hasBrackets Whether the type in the type field is expected
+   *     to have brackets.
+   * @return The marker, for chaining purposes.
+   */
+  private JSDocInfo.Marker assertTypeInMarker(JSDocInfo.Marker marker,
+                                            String typeName, int startCharno,
+                                            boolean hasBrackets) {
+
+    assertTrue(marker.type != null);
+    assertTrue(marker.type.getItem().getType() == Token.STRING);
+
+    // Match the name and brackets information.
+    String foundName = marker.type.getItem().getString();
+
+    assertEquals(typeName, foundName);
+    assertEquals(hasBrackets, marker.type.hasBrackets);
+
+    // Match position information.
+    assertEquals(startCharno, marker.type.getPositionOnStartLine());
+
+    int endCharno = startCharno + foundName.length();
+
+    if (hasBrackets) {
+      endCharno += 1;
+    }
+
+    assertEquals(endCharno, marker.type.getPositionOnEndLine());
+    assertEquals(marker.annotation.getStartLine(), marker.type.getStartLine());
+    assertEquals(marker.annotation.getStartLine(), marker.type.getEndLine());
+
+    return marker;
+  }
+
+  /**
+   * Asserts that a name field exists on the given marker.
+   *
+   * @param name The name expected in the name field.
+   * @param startCharno The starting character of the text.
+   * @return The marker, for chaining purposes.
+   */
+  private JSDocInfo.Marker assertNameInMarker(JSDocInfo.Marker marker,
+                                            String name, int startCharno) {
+    assertTrue(marker.name != null);
+    assertEquals(name, marker.name.getItem());
+
+    assertEquals(startCharno, marker.name.getPositionOnStartLine());
+    assertEquals(startCharno + name.length(),
+                 marker.name.getPositionOnEndLine());
+
+    assertEquals(marker.annotation.getStartLine(), marker.name.getStartLine());
+    assertEquals(marker.annotation.getStartLine(), marker.name.getEndLine());
+
+    return marker;
+  }
+
+  /**
+   * Asserts that an annotation marker of a given annotation name
+   * is found in the given JSDocInfo.
+   *
+   * @param jsdoc The JSDocInfo in which to search for the annotation marker.
+   * @param annotationName The name/type of the annotation for which to
+   *   search. Example: "author" for an "@author" annotation.
+   * @param startLineno The expected starting line number of the marker.
+   * @param startCharno The expected character on the starting line.
+   * @return The marker found, for further testing.
+   */
+  private JSDocInfo.Marker assertAnnotationMarker(JSDocInfo jsdoc,
+                                                  String annotationName,
+                                                  int startLineno,
+                                                  int startCharno) {
+    return assertAnnotationMarker(jsdoc, annotationName, startLineno,
+                                  startCharno, 0);
+  }
+
+  /**
+   * Asserts that the index-th annotation marker of a given annotation name
+   * is found in the given JSDocInfo.
+   *
+   * @param jsdoc The JSDocInfo in which to search for the annotation marker.
+   * @param annotationName The name/type of the annotation for which to
+   *   search. Example: "author" for an "@author" annotation.
+   * @param startLineno The expected starting line number of the marker.
+   * @param startCharno The expected character on the starting line.
+   * @param index The index of the marker.
+   * @return The marker found, for further testing.
+   */
+  private JSDocInfo.Marker assertAnnotationMarker(JSDocInfo jsdoc,
+                                                  String annotationName,
+                                                  int startLineno,
+                                                  int startCharno,
+                                                  int index) {
+
+    Collection<JSDocInfo.Marker> markers = jsdoc.getMarkers();
+
+    assertTrue(markers.size() > 0);
+
+    int counter = 0;
+
+    for (JSDocInfo.Marker marker : markers) {
+      if (marker.annotation != null) {
+        if (annotationName.equals(marker.annotation.getItem())) {
+
+          if (counter == index) {
+            assertEquals(startLineno, marker.annotation.getStartLine());
+            assertEquals(startCharno,
+                         marker.annotation.getPositionOnStartLine());
+            assertEquals(startLineno, marker.annotation.getEndLine());
+            assertEquals(startCharno + annotationName.length(),
+                         marker.annotation.getPositionOnEndLine());
+
+            return marker;
+          }
+
+          counter++;
+        }
+      }
+    }
+
+    fail("No marker found");
+    return null;
+  }
+
+  private <T> void assertContains(Collection<T> collection, T item) {
+    assertTrue(collection.contains(item));
+  }
+
