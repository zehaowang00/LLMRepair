commit 465282f1ca28a208b06c47b55fd292d4631c55da
Author: Nicholas.J.Santos <Nicholas.J.Santos@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Tue Jun 22 20:19:37 2010

    Change on 2010/06/22 by nicksantos
    
            Inferred return types.
            Fixes issue 143.
            I eventually decided that it was wrong for the subtype's method
            to affect the supertype's method, since this will make incremental
            compilation a lot harder in the long run.
    
            R=moedinger
            DELTA=481  (313 added, 38 deleted, 130 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=34007
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@249 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
@@ -6486,19 +6489,19 @@
   public void testPrototypePropertyReference() throws Exception {
     TypeCheckResult p = parseAndTypeCheckWithScope(""
         + "/** @constructor */\n"
         + "function Foo() {}\n"
         + "/** @param {number} a */\n"
         + "Foo.prototype.bar = function(a){};\n"
         + "/** @param {Foo} f */\n"
         + "function baz(f) {\n"
         + "  Foo.prototype.bar.call(f, 3);\n"
         + "}");
     assertEquals(0, compiler.getErrorCount());
     assertEquals(0, compiler.getWarningCount());
 
     assertTrue(p.scope.getVar("Foo").getType() instanceof FunctionType);
     FunctionType fooType = (FunctionType) p.scope.getVar("Foo").getType();
-    assertEquals("function (this:Foo, number): ?",
+    assertEquals("function (this:Foo, number): undefined",
                  fooType.getPrototype().getPropertyType("bar").toString());
   }
 

commit de13c3313c05f4449c50c560324389d6905a214d
Author: Nicholas.J.Santos <Nicholas.J.Santos@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Tue Apr 13 17:39:25 2010

    Change on 2010/04/13 by john
    
            Experimental option: Flag to change named object references from "Object|null" to "Object|null|undefined".
    
            R=alan,nick
            DELTA=7144  (7131 added, 5 deleted, 8 changed)
    
    Change on 2010/04/13 by nicksantos
    
            get rid of some backdoor gmail apis.
    
            R=john
            DELTA=44  (0 added, 33 deleted, 11 changed)
    
    Change on 2010/04/13 by nicksantos
    
            fix TypeCheckTest to parse externs files properly.
            i still need to merge the TypeCheckTest-forking cl into this one.
    
            R=john
            DELTA=42  (12 added, 0 deleted, 30 changed)
    
    Change on 2010/04/13 by john
    
            Enable expression decomposition for function inlining by default.
    
            R=nick
            DELTA=1  (0 added, 0 deleted, 1 changed)
    
    Change on 2010/04/13 by john
    
            Move ReplaceCssNames to allow type checking of goog.getCssName.
    
            R=mark
            DELTA=39  (35 added, 4 deleted, 0 changed)
    
    Change on 2010/04/13 by john
    
            Maintain source and type information during ReplaceCssNames.
    
            R=mark
            DELTA=31  (30 added, 0 deleted, 1 changed)
    
    Change on 2010/04/13 by nick
    
            fix up type information on event listener functions.
    
            R=alan
            DELTA=2  (0 added, 0 deleted, 2 changed)
    
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=wescxy
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@182 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
--- /dev/null
+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java
@@ -0,0 +6485,19 @@
+  public void testPrototypePropertyReference() throws Exception {
+    TypeCheckResult p = parseAndTypeCheckWithScope(""
+        + "/** @constructor */\n"
+        + "function Foo() {}\n"
+        + "/** @param {number} a */\n"
+        + "Foo.prototype.bar = function(a){};\n"
+        + "/** @param {Foo} f */\n"
+        + "function baz(f) {\n"
+        + "  Foo.prototype.bar.call(f, 3);\n"
+        + "}");
+    assertEquals(0, compiler.getErrorCount());
+    assertEquals(0, compiler.getWarningCount());
+
+    assertTrue(p.scope.getVar("Foo").getType() instanceof FunctionType);
+    FunctionType fooType = (FunctionType) p.scope.getVar("Foo").getType();
+    assertEquals("function (this:Foo, number): ?",
+                 fooType.getPrototype().getPropertyType("bar").toString());
+  }
+
