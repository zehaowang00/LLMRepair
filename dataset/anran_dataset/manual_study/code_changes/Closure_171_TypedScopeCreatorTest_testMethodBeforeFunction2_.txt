commit 6d38965a1e0a3a61435b9bebc91ff1ba0a64013a
Author: Nick Santos <nicholas.j.santos@gmail.com>
Date:   Tue Jun 18 05:52:07 2013

    Handle prototype assignments much better. Fixes issue #1023.
    
    R=blickly

diff --git a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
--- a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
+++ b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
@@ -437,19 +437,19 @@
   public void testMethodBeforeFunction2() throws Exception {
     testSame(
         "var y = Window.prototype;" +
         "Window.prototype = {alert: function(message) {}};" +
         "/** @constructor */ function Window() {}\n" +
         "var window = new Window(); \n" +
         "var x = window;");
     ObjectType x = (ObjectType) findNameType("x", globalScope);
     assertEquals("Window", x.toString());
     assertTrue(x.getImplicitPrototype().hasOwnProperty("alert"));
     assertEquals("function (this:Window, ?): undefined",
         x.getPropertyType("alert").toString());
     assertFalse(x.isPropertyTypeDeclared("alert"));
 
     ObjectType y = (ObjectType) findNameType("y", globalScope);
-    assertEquals("?",
+    assertEquals("function (this:Window, ?): undefined",
         y.getPropertyType("alert").toString());
   }
 

commit a2dd1662d90524a12a99a9fa7d4308568938d963
Author: nicksantos@google.com <nicksantos@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Wed Aug 31 11:11:21 2011

    Do much better at "this" inference.
    
    
    Tested:
    yes
    
    R=acleung
    DELTA=119  (64 added, 37 deleted, 18 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=3171
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1399 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
--- a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
+++ b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
@@ -399,19 +399,19 @@
   public void testMethodBeforeFunction2() throws Exception {
     testSame(
         "var y = Window.prototype;" +
         "Window.prototype = {alert: function(message) {}};" +
         "/** @constructor */ function Window() {}\n" +
         "var window = new Window(); \n" +
         "var x = window;");
     ObjectType x = (ObjectType) findNameType("x", globalScope);
     assertEquals("Window", x.toString());
     assertTrue(x.getImplicitPrototype().hasOwnProperty("alert"));
-    assertEquals("function (?): undefined",
+    assertEquals("function (this:Window, ?): undefined",
         x.getPropertyType("alert").toString());
     assertFalse(x.isPropertyTypeDeclared("alert"));
 
     ObjectType y = (ObjectType) findNameType("y", globalScope);
     assertEquals("?",
         y.getPropertyType("alert").toString());
   }
 

commit 5fa514bee8f76534232e4653eaf16cd416e08012
Author: nicksantos@google.com <nicksantos@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Thu Aug 25 11:10:53 2011

    Change how Function prototypes are represented in the type
    system.  This fixes lots of bugs when an anonymous object is
    the prototype, and will make life a lot easier for IDEs.
    
    R=johnlenz
    DELTA=370  (129 added, 177 deleted, 64 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=3135
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1389 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
--- a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
+++ b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
@@ -400,22 +399,19 @@
   public void testMethodBeforeFunction2() throws Exception {
     testSame(
         "var y = Window.prototype;" +
         "Window.prototype = {alert: function(message) {}};" +
         "/** @constructor */ function Window() {}\n" +
         "var window = new Window(); \n" +
         "var x = window;");
     ObjectType x = (ObjectType) findNameType("x", globalScope);
     assertEquals("Window", x.toString());
-    // This should be TRUE
-    assertFalse(x.getImplicitPrototype().hasOwnProperty("alert"));
-    /*
-    assertEquals("function (this:Window, ?): undefined",
+    assertTrue(x.getImplicitPrototype().hasOwnProperty("alert"));
+    assertEquals("function (?): undefined",
         x.getPropertyType("alert").toString());
-    assertTrue(x.isPropertyTypeDeclared("alert"));
+    assertFalse(x.isPropertyTypeDeclared("alert"));
 
     ObjectType y = (ObjectType) findNameType("y", globalScope);
-    assertEquals("function (this:Window, ?): undefined",
+    assertEquals("?",
         y.getPropertyType("alert").toString());
-    */
   }
 

commit 70f817ae4f80ac11dd2dfe97babf5896c690fb48
Author: johnlenz@google.com <johnlenz@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Thu Jan 27 13:33:55 2011

    Add basic getters and setters support to TypeInference.
    
    R=nicksantos
    DELTA=573  (533 added, 15 deleted, 25 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=366
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@735 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
--- a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
+++ b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java
@@ -308,0 +398,22 @@
+  public void testMethodBeforeFunction2() throws Exception {
+    testSame(
+        "var y = Window.prototype;" +
+        "Window.prototype = {alert: function(message) {}};" +
+        "/** @constructor */ function Window() {}\n" +
+        "var window = new Window(); \n" +
+        "var x = window;");
+    ObjectType x = (ObjectType) findNameType("x", globalScope);
+    assertEquals("Window", x.toString());
+    // This should be TRUE
+    assertFalse(x.getImplicitPrototype().hasOwnProperty("alert"));
+    /*
+    assertEquals("function (this:Window, ?): undefined",
+        x.getPropertyType("alert").toString());
+    assertTrue(x.isPropertyTypeDeclared("alert"));
+
+    ObjectType y = (ObjectType) findNameType("y", globalScope);
+    assertEquals("function (this:Window, ?): undefined",
+        y.getPropertyType("alert").toString());
+    */
+  }
+
