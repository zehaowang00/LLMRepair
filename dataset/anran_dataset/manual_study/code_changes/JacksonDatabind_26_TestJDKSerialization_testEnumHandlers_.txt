commit 2ea6e402d4cf86c3f7e9a16e667a40bab61cf11c
Author: Cowtowncoder <tatu.saloranta@iki.fi>
Date:   Fri Aug 14 18:44:02 2015

    Fix #899

diff --git a/src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java b/src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java
--- a/src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java
+++ b/src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java
@@ -71,35 +71,33 @@
     public void testEnumHandlers() throws IOException
     {
         ObjectMapper mapper = new ObjectMapper();
         // ensure we have serializers and/or deserializers, first
         String json = mapper.writerFor(EnumPOJO.class)
                 .writeValueAsString(new EnumPOJO());
         EnumPOJO result = mapper.readerFor(EnumPOJO.class)
                 .readValue(json);
         assertNotNull(result);
 
         // and then use JDK serialization to freeze/thaw objects
         byte[] bytes = jdkSerialize(mapper);
         ObjectMapper mapper2 = jdkDeserialize(bytes);
         assertNotNull(mapper2);
 
         bytes = jdkSerialize(mapper.readerFor(EnumPOJO.class));
         ObjectReader r = jdkDeserialize(bytes);
         assertNotNull(r);
 
         /* 14-Aug-2015, tatu: Looks like pre-loading JsonSerializer is problematic
          *    at this point; comment out for now. Try to fix later on.
          */
-        
-//        bytes = jdkSerialize(mapper.writerFor(EnumPOJO.class));
-        bytes = jdkSerialize(mapper.writer());
+        bytes = jdkSerialize(mapper.writerFor(EnumPOJO.class));
         ObjectWriter w = jdkDeserialize(bytes);
         assertNotNull(w);
 
         // plus, ensure objects are usable:
         String json2 = w.writeValueAsString(new EnumPOJO());
         assertEquals(json, json2);
         EnumPOJO result2 = r.readValue(json2);
         assertNotNull(result2);
     }
 

commit eda66cc8173c8e359d68a07bbc8adbbef5f8e7f6
Author: Cowtowncoder <tatu.saloranta@iki.fi>
Date:   Fri Aug 14 17:47:04 2015

    clean up the test

diff --git a/src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java b/src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java
--- a/src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java
+++ b/src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java
@@ -75,35 +71,35 @@
     public void testEnumHandlers() throws IOException
     {
         ObjectMapper mapper = new ObjectMapper();
         // ensure we have serializers and/or deserializers, first
         String json = mapper.writerFor(EnumPOJO.class)
                 .writeValueAsString(new EnumPOJO());
-        EnumPOJO result = mapper.reader(EnumPOJO.class)
+        EnumPOJO result = mapper.readerFor(EnumPOJO.class)
                 .readValue(json);
         assertNotNull(result);
 
         // and then use JDK serialization to freeze/thaw objects
         byte[] bytes = jdkSerialize(mapper);
         ObjectMapper mapper2 = jdkDeserialize(bytes);
         assertNotNull(mapper2);
 
-        bytes = jdkSerialize(mapper.reader(EnumPOJO.class));
+        bytes = jdkSerialize(mapper.readerFor(EnumPOJO.class));
         ObjectReader r = jdkDeserialize(bytes);
         assertNotNull(r);
 
         /* 14-Aug-2015, tatu: Looks like pre-loading JsonSerializer is problematic
          *    at this point; comment out for now. Try to fix later on.
          */
         
 //        bytes = jdkSerialize(mapper.writerFor(EnumPOJO.class));
         bytes = jdkSerialize(mapper.writer());
         ObjectWriter w = jdkDeserialize(bytes);
         assertNotNull(w);
 
         // plus, ensure objects are usable:
         String json2 = w.writeValueAsString(new EnumPOJO());
         assertEquals(json, json2);
         EnumPOJO result2 = r.readValue(json2);
         assertNotNull(result2);
     }
 

commit 73f54a6495fe09fc6840a1193df1d37d76e6d782
Author: Cowtowncoder <tatu.saloranta@iki.fi>
Date:   Fri Aug 14 17:35:08 2015

    Try to reproduce #899

diff --git a/src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java b/src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java
--- a/src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java
+++ b/src/test/java/com/fasterxml/jackson/databind/TestJDKSerialization.java
@@ -66,0 +75,35 @@
+    public void testEnumHandlers() throws IOException
+    {
+        ObjectMapper mapper = new ObjectMapper();
+        // ensure we have serializers and/or deserializers, first
+        String json = mapper.writerFor(EnumPOJO.class)
+                .writeValueAsString(new EnumPOJO());
+        EnumPOJO result = mapper.reader(EnumPOJO.class)
+                .readValue(json);
+        assertNotNull(result);
+
+        // and then use JDK serialization to freeze/thaw objects
+        byte[] bytes = jdkSerialize(mapper);
+        ObjectMapper mapper2 = jdkDeserialize(bytes);
+        assertNotNull(mapper2);
+
+        bytes = jdkSerialize(mapper.reader(EnumPOJO.class));
+        ObjectReader r = jdkDeserialize(bytes);
+        assertNotNull(r);
+
+        /* 14-Aug-2015, tatu: Looks like pre-loading JsonSerializer is problematic
+         *    at this point; comment out for now. Try to fix later on.
+         */
+        
+//        bytes = jdkSerialize(mapper.writerFor(EnumPOJO.class));
+        bytes = jdkSerialize(mapper.writer());
+        ObjectWriter w = jdkDeserialize(bytes);
+        assertNotNull(w);
+
+        // plus, ensure objects are usable:
+        String json2 = w.writeValueAsString(new EnumPOJO());
+        assertEquals(json, json2);
+        EnumPOJO result2 = r.readValue(json2);
+        assertNotNull(result2);
+    }
+
