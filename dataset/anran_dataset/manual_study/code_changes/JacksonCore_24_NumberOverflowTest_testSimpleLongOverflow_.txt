commit c4dd84e4d505baa90d8d1675c1f60f8d6ce90db8
Author: Tatu Saloranta <tatu.saloranta@iki.fi>
Date:   Wed Jan 16 23:42:31 2019

    Fix #508

diff --git a/src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java b/src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java
--- a/src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java
+++ b/src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java
@@ -26,37 +27,37 @@
     public void testSimpleLongOverflow() throws Exception
     {
         BigInteger below = BigInteger.valueOf(Long.MIN_VALUE);
         below = below.subtract(BigInteger.ONE);
         BigInteger above = BigInteger.valueOf(Long.MAX_VALUE);
         above = above.add(BigInteger.ONE);
 
         String DOC_BELOW = below.toString() + " ";
         String DOC_ABOVE = below.toString() + " ";
 
         for (int mode : ALL_MODES) {
             JsonParser p = createParser(FACTORY, mode, DOC_BELOW);
             p.nextToken();
             try {
                 long x = p.getLongValue();
                 fail("Expected an exception for underflow (input "+p.getText()+"): instead, got long value: "+x);
-            } catch (JsonParseException e) {
+            } catch (InputCoercionException e) {
                 verifyException(e, "out of range of long");
             }
             p.close();
 
             p = createParser(mode, DOC_ABOVE);
             p.nextToken();
             try {
                 long x = p.getLongValue();
                 fail("Expected an exception for underflow (input "+p.getText()+"): instead, got long value: "+x);
-            } catch (JsonParseException e) {
+            } catch (InputCoercionException e) {
                 verifyException(e, "out of range of long");
             }
             p.close();
         }
     }
 
     // Note: only 4 cardinal types; `short`, `byte` and `char` use same code paths
     // Note: due to [jackson-core#493], we'll skip DataInput-backed parser
 
     // [jackson-core#488]

commit 4f48dbb1b38cfd0bc4be61779c006039821ad8b8
Author: Tatu Saloranta <tatu.saloranta@iki.fi>
Date:   Sat Oct 20 19:00:51 2018

    Improvements to error message wrt nr overflow

diff --git a/src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java b/src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java
--- a/src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java
+++ b/src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java
@@ -26,38 +26,37 @@
     public void testSimpleLongOverflow() throws Exception
     {
         BigInteger below = BigInteger.valueOf(Long.MIN_VALUE);
         below = below.subtract(BigInteger.ONE);
         BigInteger above = BigInteger.valueOf(Long.MAX_VALUE);
         above = above.add(BigInteger.ONE);
 
         String DOC_BELOW = below.toString() + " ";
         String DOC_ABOVE = below.toString() + " ";
 
         for (int mode : ALL_MODES) {
             JsonParser p = createParser(FACTORY, mode, DOC_BELOW);
             p.nextToken();
             try {
                 long x = p.getLongValue();
                 fail("Expected an exception for underflow (input "+p.getText()+"): instead, got long value: "+x);
             } catch (JsonParseException e) {
                 verifyException(e, "out of range of long");
             }
             p.close();
 
             p = createParser(mode, DOC_ABOVE);
             p.nextToken();
             try {
                 long x = p.getLongValue();
                 fail("Expected an exception for underflow (input "+p.getText()+"): instead, got long value: "+x);
             } catch (JsonParseException e) {
                 verifyException(e, "out of range of long");
             }
             p.close();
-            
         }
     }
 
     // Note: only 4 cardinal types; `short`, `byte` and `char` use same code paths
     // Note: due to [jackson-core#493], we'll skip DataInput-backed parser
-    
+
     // [jackson-core#488]

commit b6c54cf06167b7ef8b45a67e8ddfa427e63c6c20
Author: Tatu Saloranta <tatu.saloranta@iki.fi>
Date:   Sat Oct 20 17:22:07 2018

    More work for #488, now handling coercions to `double`, `float` better to avoid drastic performance issue as per suggestions by @wujimin

diff --git a/src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java b/src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java
--- /dev/null
+++ b/src/test/java/com/fasterxml/jackson/core/read/NumberOverflowTest.java
@@ -0,0 +26,38 @@
+    public void testSimpleLongOverflow() throws Exception
+    {
+        BigInteger below = BigInteger.valueOf(Long.MIN_VALUE);
+        below = below.subtract(BigInteger.ONE);
+        BigInteger above = BigInteger.valueOf(Long.MAX_VALUE);
+        above = above.add(BigInteger.ONE);
+
+        String DOC_BELOW = below.toString() + " ";
+        String DOC_ABOVE = below.toString() + " ";
+
+        for (int mode : ALL_MODES) {
+            JsonParser p = createParser(FACTORY, mode, DOC_BELOW);
+            p.nextToken();
+            try {
+                long x = p.getLongValue();
+                fail("Expected an exception for underflow (input "+p.getText()+"): instead, got long value: "+x);
+            } catch (JsonParseException e) {
+                verifyException(e, "out of range of long");
+            }
+            p.close();
+
+            p = createParser(mode, DOC_ABOVE);
+            p.nextToken();
+            try {
+                long x = p.getLongValue();
+                fail("Expected an exception for underflow (input "+p.getText()+"): instead, got long value: "+x);
+            } catch (JsonParseException e) {
+                verifyException(e, "out of range of long");
+            }
+            p.close();
+            
+        }
+    }
+
+    // Note: only 4 cardinal types; `short`, `byte` and `char` use same code paths
+    // Note: due to [jackson-core#493], we'll skip DataInput-backed parser
+    
+    // [jackson-core#488]
