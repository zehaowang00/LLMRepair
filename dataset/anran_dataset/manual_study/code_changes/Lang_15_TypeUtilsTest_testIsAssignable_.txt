commit 8dae958b420317773c7183b4a273e49b14e780ad
Author: Matthew Jason Benson <mbenson@apache.org>
Date:   Thu Nov 17 18:56:21 2011

    [LANG-776] reverse bad assertion to make failing test
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1203426 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
--- a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
@@ -108,336 +108,336 @@
     public void testIsAssignable() throws SecurityException, NoSuchMethodException,
             NoSuchFieldException {
         List list0 = null;
         List<Object> list1 = null;
         List<?> list2 = null;
         List<? super Object> list3 = null;
         List<String> list4 = null;
         List<? extends String> list5 = null;
         List<? super String> list6 = null;
         List[] list7 = null;
         List<Object>[] list8 = null;
         List<?>[] list9 = null;
         List<? super Object>[] list10 = null;
         List<String>[] list11 = null;
         List<? extends String>[] list12 = null;
         List<? super String>[] list13;
         Class<?> clazz = getClass();
         Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                 List.class, List.class, List.class, List.class, List[].class, List[].class,
                 List[].class, List[].class, List[].class, List[].class, List[].class);
         Type[] types = method.getGenericParameterTypes();
 //        list0 = list0;
         delegateBooleanAssertion(types, 0, 0, true);
         list1 = list0;
         delegateBooleanAssertion(types, 0, 1, true);
         list0 = list1;
         delegateBooleanAssertion(types, 1, 0, true);
         list2 = list0;
         delegateBooleanAssertion(types, 0, 2, true);
         list0 = list2;
         delegateBooleanAssertion(types, 2, 0, true);
         list3 = list0;
         delegateBooleanAssertion(types, 0, 3, true);
         list0 = list3;
         delegateBooleanAssertion(types, 3, 0, true);
         list4 = list0;
         delegateBooleanAssertion(types, 0, 4, true);
         list0 = list4;
         delegateBooleanAssertion(types, 4, 0, true);
         list5 = list0;
         delegateBooleanAssertion(types, 0, 5, true);
         list0 = list5;
         delegateBooleanAssertion(types, 5, 0, true);
         list6 = list0;
         delegateBooleanAssertion(types, 0, 6, true);
         list0 = list6;
         delegateBooleanAssertion(types, 6, 0, true);
 //        list1 = list1;
         delegateBooleanAssertion(types, 1, 1, true);
         list2 = list1;
         delegateBooleanAssertion(types, 1, 2, true);
         list1 = (List<Object>) list2;
         delegateBooleanAssertion(types, 2, 1, false);
         list3 = list1;
         delegateBooleanAssertion(types, 1, 3, true);
         list1 = (List<Object>) list3;
         delegateBooleanAssertion(types, 3, 1, false);
         // list4 = list1;
         delegateBooleanAssertion(types, 1, 4, false);
         // list1 = list4;
         delegateBooleanAssertion(types, 4, 1, false);
         // list5 = list1;
         delegateBooleanAssertion(types, 1, 5, false);
         // list1 = list5;
         delegateBooleanAssertion(types, 5, 1, false);
         list6 = list1;
         delegateBooleanAssertion(types, 1, 6, true);
         list1 = (List<Object>) list6;
         delegateBooleanAssertion(types, 6, 1, false);
 //        list2 = list2;
         delegateBooleanAssertion(types, 2, 2, true);
         list2 = list3;
         delegateBooleanAssertion(types, 2, 3, false);
         list2 = list4;
         delegateBooleanAssertion(types, 3, 2, true);
         list3 = (List<? super Object>) list2;
         delegateBooleanAssertion(types, 2, 4, false);
         list2 = list5;
         delegateBooleanAssertion(types, 4, 2, true);
         list4 = (List<String>) list2;
         delegateBooleanAssertion(types, 2, 5, false);
         list2 = list6;
         delegateBooleanAssertion(types, 5, 2, true);
         list5 = (List<? extends String>) list2;
         delegateBooleanAssertion(types, 2, 6, false);
 //        list3 = list3;
         delegateBooleanAssertion(types, 6, 2, true);
         list6 = (List<? super String>) list2;
         delegateBooleanAssertion(types, 3, 3, true);
         // list4 = list3;
         delegateBooleanAssertion(types, 3, 4, false);
         // list3 = list4;
         delegateBooleanAssertion(types, 4, 3, false);
         // list5 = list3;
         delegateBooleanAssertion(types, 3, 5, false);
         // list3 = list5;
         delegateBooleanAssertion(types, 5, 3, false);
         list6 = list3;
         delegateBooleanAssertion(types, 3, 6, true);
         list3 = (List<? super Object>) list6;
         delegateBooleanAssertion(types, 6, 3, false);
 //        list4 = list4;
         delegateBooleanAssertion(types, 4, 4, true);
         list5 = list4;
         delegateBooleanAssertion(types, 4, 5, true);
         list4 = (List<String>) list5;
         delegateBooleanAssertion(types, 5, 4, false);
         list6 = list4;
         delegateBooleanAssertion(types, 4, 6, true);
         list4 = (List<String>) list6;
         delegateBooleanAssertion(types, 6, 4, false);
 //        list5 = list5;
         delegateBooleanAssertion(types, 5, 5, true);
         list6 = (List<? super String>) list5;
         delegateBooleanAssertion(types, 5, 6, false);
         list5 = (List<? extends String>) list6;
         delegateBooleanAssertion(types, 6, 5, false);
 //        list6 = list6;
         delegateBooleanAssertion(types, 6, 6, true);
 
 //        list7 = list7;
         delegateBooleanAssertion(types, 7, 7, true);
         list8 = list7;
         delegateBooleanAssertion(types, 7, 8, true);
         list7 = list8;
         delegateBooleanAssertion(types, 8, 7, true);
         list9 = list7;
         delegateBooleanAssertion(types, 7, 9, true);
         list7 = list9;
         delegateBooleanAssertion(types, 9, 7, true);
         list10 = list7;
         delegateBooleanAssertion(types, 7, 10, true);
         list7 = list10;
         delegateBooleanAssertion(types, 10, 7, true);
         list11 = list7;
         delegateBooleanAssertion(types, 7, 11, true);
         list7 = list11;
         delegateBooleanAssertion(types, 11, 7, true);
         list12 = list7;
         delegateBooleanAssertion(types, 7, 12, true);
         list7 = list12;
         delegateBooleanAssertion(types, 12, 7, true);
         list13 = list7;
         delegateBooleanAssertion(types, 7, 13, true);
         list7 = list13;
         delegateBooleanAssertion(types, 13, 7, true);
 //        list8 = list8;
         delegateBooleanAssertion(types, 8, 8, true);
         list9 = list8;
         delegateBooleanAssertion(types, 8, 9, true);
         list8 = (List<Object>[]) list9;
         delegateBooleanAssertion(types, 9, 8, false);
         list10 = list8;
         delegateBooleanAssertion(types, 8, 10, true);
         list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
         delegateBooleanAssertion(types, 10, 8, false);
         // list11 = list8;
         delegateBooleanAssertion(types, 8, 11, false);
         // list8 = list11;
         delegateBooleanAssertion(types, 11, 8, false);
         // list12 = list8;
         delegateBooleanAssertion(types, 8, 12, false);
         // list8 = list12;
         delegateBooleanAssertion(types, 12, 8, false);
         list13 = list8;
         delegateBooleanAssertion(types, 8, 13, true);
         list8 = (List<Object>[]) list13;
         delegateBooleanAssertion(types, 13, 8, false);
 //        list9 = list9;
         delegateBooleanAssertion(types, 9, 9, true);
         list10 = (List<? super Object>[]) list9;
         delegateBooleanAssertion(types, 9, 10, false);
         list9 = list10;
         delegateBooleanAssertion(types, 10, 9, true);
         list11 = (List<String>[]) list9;
         delegateBooleanAssertion(types, 9, 11, false);
         list9 = list11;
         delegateBooleanAssertion(types, 11, 9, true);
         list12 = (List<? extends String>[]) list9;
         delegateBooleanAssertion(types, 9, 12, false);
         list9 = list12;
         delegateBooleanAssertion(types, 12, 9, true);
         list13 = (List<? super String>[]) list9;
         delegateBooleanAssertion(types, 9, 13, false);
         list9 = list13;
         delegateBooleanAssertion(types, 13, 9, true);
 //        list10 = list10;
         delegateBooleanAssertion(types, 10, 10, true);
         // list11 = list10;
         delegateBooleanAssertion(types, 10, 11, false);
         // list10 = list11;
         delegateBooleanAssertion(types, 11, 10, false);
         // list12 = list10;
         delegateBooleanAssertion(types, 10, 12, false);
         // list10 = list12;
         delegateBooleanAssertion(types, 12, 10, false);
         list13 = list10;
         delegateBooleanAssertion(types, 10, 13, true);
         list10 = (List<? super Object>[]) list13;
         delegateBooleanAssertion(types, 13, 10, false);
 //        list11 = list11;
         delegateBooleanAssertion(types, 11, 11, true);
         list12 = list11;
         delegateBooleanAssertion(types, 11, 12, true);
         list11 = (List<String>[]) list12;
         delegateBooleanAssertion(types, 12, 11, false);
         list13 = list11;
         delegateBooleanAssertion(types, 11, 13, true);
         list11 = (List<String>[]) list13;
         delegateBooleanAssertion(types, 13, 11, false);
 //        list12 = list12;
         delegateBooleanAssertion(types, 12, 12, true);
         list13 = (List<? super String>[]) list12;
         delegateBooleanAssertion(types, 12, 13, false);
         list12 = (List<? extends String>[]) list13;
         delegateBooleanAssertion(types, 13, 12, false);
 //        list13 = list13;
         delegateBooleanAssertion(types, 13, 13, true);
         Type disType = getClass().getField("dis").getGenericType();
         // Reporter.log( ( ( ParameterizedType ) disType
         // ).getOwnerType().getClass().toString() );
         Type datType = getClass().getField("dat").getGenericType();
         Type daType = getClass().getField("da").getGenericType();
         Type uhderType = getClass().getField("uhder").getGenericType();
         Type dingType = getClass().getField("ding").getGenericType();
         Type testerType = getClass().getField("tester").getGenericType();
         Type tester2Type = getClass().getField("tester2").getGenericType();
         Type dat2Type = getClass().getField("dat2").getGenericType();
         Type dat3Type = getClass().getField("dat3").getGenericType();
         dis = dat;
         Assert.assertTrue(TypeUtils.isAssignable(datType, disType));
         // dis = da;
         Assert.assertFalse(TypeUtils.isAssignable(daType, disType));
         dis = uhder;
         Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));
         dis = ding;
-        Assert.assertTrue(String.format("type %s not assignable to %s!", dingType, disType),
+        Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
                 TypeUtils.isAssignable(dingType, disType));
         dis = tester;
         Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));
         // dis = tester2;
         Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));
         // dat = dat2;
         Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));
         // dat2 = dat;
         Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));
         // dat = dat3;
         Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));
         char ch = 0;
         boolean bo = false;
         byte by = 0;
         short sh = 0;
         int in = 0;
         long lo = 0;
         float fl = 0;
         double du = 0;
         du = ch;
         Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));
         du = by;
         Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));
         du = sh;
         Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));
         du = in;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));
         du = lo;
         Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));
         du = fl;
         Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));
         lo = in;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));
         lo = Integer.valueOf(0);
         Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));
         // Long lngW = 1;
         Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));
         // lngW = Integer.valueOf( 0 );
         Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));
         in = Integer.valueOf(0);
         Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));
         Integer inte = in;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));
         Type intComparableType = getClass().getField("intComparable").getGenericType();
         intComparable = 1;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));
         Serializable ser = 1;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));
         Type longComparableType = getClass().getField("longComparable").getGenericType();
         // longComparable = 1;
         Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));
         // longComparable = Integer.valueOf( 0 );
         Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));
         // int[] ia;
         // long[] la = ia;
         Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));
         Integer[] ia = null;
         Type caType = getClass().getField("intWildcardComparable").getGenericType();
         intWildcardComparable = ia;
         Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));
         // int[] ina = ia;
         Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));
         int[] ina = null;
         Object[] oa;
         // oa = ina;
         Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));
         oa = new Integer[0];
         Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));
         Type bClassType = AClass.class.getField("bClass").getGenericType();
         Type cClassType = AClass.class.getField("cClass").getGenericType();
         Type dClassType = AClass.class.getField("dClass").getGenericType();
         Type eClassType = AClass.class.getField("eClass").getGenericType();
         Type fClassType = AClass.class.getField("fClass").getGenericType();
         AClass aClass = new AClass(new AAClass<String>());
         aClass.bClass = aClass.cClass;
         Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));
         aClass.bClass = aClass.dClass;
         Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));
         aClass.bClass = aClass.eClass;
         Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));
         aClass.bClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));
         aClass.cClass = aClass.dClass;
         Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));
         aClass.cClass = aClass.eClass;
         Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));
         aClass.cClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));
         aClass.dClass = aClass.eClass;
         Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));
         aClass.dClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));
         aClass.eClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));
     }
 

commit d6e2252bdd0f65afca000c900f149f38688a3ba5
Author: Matthew Jason Benson <mbenson@apache.org>
Date:   Thu Nov 17 13:26:55 2011

    original tests contained one message WRONG which seems to indicate a problem area in the code; elaborating message
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1203312 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
--- a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
@@ -108,335 +108,336 @@
     public void testIsAssignable() throws SecurityException, NoSuchMethodException,
             NoSuchFieldException {
         List list0 = null;
         List<Object> list1 = null;
         List<?> list2 = null;
         List<? super Object> list3 = null;
         List<String> list4 = null;
         List<? extends String> list5 = null;
         List<? super String> list6 = null;
         List[] list7 = null;
         List<Object>[] list8 = null;
         List<?>[] list9 = null;
         List<? super Object>[] list10 = null;
         List<String>[] list11 = null;
         List<? extends String>[] list12 = null;
         List<? super String>[] list13;
         Class<?> clazz = getClass();
         Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                 List.class, List.class, List.class, List.class, List[].class, List[].class,
                 List[].class, List[].class, List[].class, List[].class, List[].class);
         Type[] types = method.getGenericParameterTypes();
 //        list0 = list0;
         delegateBooleanAssertion(types, 0, 0, true);
         list1 = list0;
         delegateBooleanAssertion(types, 0, 1, true);
         list0 = list1;
         delegateBooleanAssertion(types, 1, 0, true);
         list2 = list0;
         delegateBooleanAssertion(types, 0, 2, true);
         list0 = list2;
         delegateBooleanAssertion(types, 2, 0, true);
         list3 = list0;
         delegateBooleanAssertion(types, 0, 3, true);
         list0 = list3;
         delegateBooleanAssertion(types, 3, 0, true);
         list4 = list0;
         delegateBooleanAssertion(types, 0, 4, true);
         list0 = list4;
         delegateBooleanAssertion(types, 4, 0, true);
         list5 = list0;
         delegateBooleanAssertion(types, 0, 5, true);
         list0 = list5;
         delegateBooleanAssertion(types, 5, 0, true);
         list6 = list0;
         delegateBooleanAssertion(types, 0, 6, true);
         list0 = list6;
         delegateBooleanAssertion(types, 6, 0, true);
 //        list1 = list1;
         delegateBooleanAssertion(types, 1, 1, true);
         list2 = list1;
         delegateBooleanAssertion(types, 1, 2, true);
         list1 = (List<Object>) list2;
         delegateBooleanAssertion(types, 2, 1, false);
         list3 = list1;
         delegateBooleanAssertion(types, 1, 3, true);
         list1 = (List<Object>) list3;
         delegateBooleanAssertion(types, 3, 1, false);
         // list4 = list1;
         delegateBooleanAssertion(types, 1, 4, false);
         // list1 = list4;
         delegateBooleanAssertion(types, 4, 1, false);
         // list5 = list1;
         delegateBooleanAssertion(types, 1, 5, false);
         // list1 = list5;
         delegateBooleanAssertion(types, 5, 1, false);
         list6 = list1;
         delegateBooleanAssertion(types, 1, 6, true);
         list1 = (List<Object>) list6;
         delegateBooleanAssertion(types, 6, 1, false);
 //        list2 = list2;
         delegateBooleanAssertion(types, 2, 2, true);
         list2 = list3;
         delegateBooleanAssertion(types, 2, 3, false);
         list2 = list4;
         delegateBooleanAssertion(types, 3, 2, true);
         list3 = (List<? super Object>) list2;
         delegateBooleanAssertion(types, 2, 4, false);
         list2 = list5;
         delegateBooleanAssertion(types, 4, 2, true);
         list4 = (List<String>) list2;
         delegateBooleanAssertion(types, 2, 5, false);
         list2 = list6;
         delegateBooleanAssertion(types, 5, 2, true);
         list5 = (List<? extends String>) list2;
         delegateBooleanAssertion(types, 2, 6, false);
 //        list3 = list3;
         delegateBooleanAssertion(types, 6, 2, true);
         list6 = (List<? super String>) list2;
         delegateBooleanAssertion(types, 3, 3, true);
         // list4 = list3;
         delegateBooleanAssertion(types, 3, 4, false);
         // list3 = list4;
         delegateBooleanAssertion(types, 4, 3, false);
         // list5 = list3;
         delegateBooleanAssertion(types, 3, 5, false);
         // list3 = list5;
         delegateBooleanAssertion(types, 5, 3, false);
         list6 = list3;
         delegateBooleanAssertion(types, 3, 6, true);
         list3 = (List<? super Object>) list6;
         delegateBooleanAssertion(types, 6, 3, false);
 //        list4 = list4;
         delegateBooleanAssertion(types, 4, 4, true);
         list5 = list4;
         delegateBooleanAssertion(types, 4, 5, true);
         list4 = (List<String>) list5;
         delegateBooleanAssertion(types, 5, 4, false);
         list6 = list4;
         delegateBooleanAssertion(types, 4, 6, true);
         list4 = (List<String>) list6;
         delegateBooleanAssertion(types, 6, 4, false);
 //        list5 = list5;
         delegateBooleanAssertion(types, 5, 5, true);
         list6 = (List<? super String>) list5;
         delegateBooleanAssertion(types, 5, 6, false);
         list5 = (List<? extends String>) list6;
         delegateBooleanAssertion(types, 6, 5, false);
 //        list6 = list6;
         delegateBooleanAssertion(types, 6, 6, true);
 
 //        list7 = list7;
         delegateBooleanAssertion(types, 7, 7, true);
         list8 = list7;
         delegateBooleanAssertion(types, 7, 8, true);
         list7 = list8;
         delegateBooleanAssertion(types, 8, 7, true);
         list9 = list7;
         delegateBooleanAssertion(types, 7, 9, true);
         list7 = list9;
         delegateBooleanAssertion(types, 9, 7, true);
         list10 = list7;
         delegateBooleanAssertion(types, 7, 10, true);
         list7 = list10;
         delegateBooleanAssertion(types, 10, 7, true);
         list11 = list7;
         delegateBooleanAssertion(types, 7, 11, true);
         list7 = list11;
         delegateBooleanAssertion(types, 11, 7, true);
         list12 = list7;
         delegateBooleanAssertion(types, 7, 12, true);
         list7 = list12;
         delegateBooleanAssertion(types, 12, 7, true);
         list13 = list7;
         delegateBooleanAssertion(types, 7, 13, true);
         list7 = list13;
         delegateBooleanAssertion(types, 13, 7, true);
 //        list8 = list8;
         delegateBooleanAssertion(types, 8, 8, true);
         list9 = list8;
         delegateBooleanAssertion(types, 8, 9, true);
         list8 = (List<Object>[]) list9;
         delegateBooleanAssertion(types, 9, 8, false);
         list10 = list8;
         delegateBooleanAssertion(types, 8, 10, true);
         list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
         delegateBooleanAssertion(types, 10, 8, false);
         // list11 = list8;
         delegateBooleanAssertion(types, 8, 11, false);
         // list8 = list11;
         delegateBooleanAssertion(types, 11, 8, false);
         // list12 = list8;
         delegateBooleanAssertion(types, 8, 12, false);
         // list8 = list12;
         delegateBooleanAssertion(types, 12, 8, false);
         list13 = list8;
         delegateBooleanAssertion(types, 8, 13, true);
         list8 = (List<Object>[]) list13;
         delegateBooleanAssertion(types, 13, 8, false);
 //        list9 = list9;
         delegateBooleanAssertion(types, 9, 9, true);
         list10 = (List<? super Object>[]) list9;
         delegateBooleanAssertion(types, 9, 10, false);
         list9 = list10;
         delegateBooleanAssertion(types, 10, 9, true);
         list11 = (List<String>[]) list9;
         delegateBooleanAssertion(types, 9, 11, false);
         list9 = list11;
         delegateBooleanAssertion(types, 11, 9, true);
         list12 = (List<? extends String>[]) list9;
         delegateBooleanAssertion(types, 9, 12, false);
         list9 = list12;
         delegateBooleanAssertion(types, 12, 9, true);
         list13 = (List<? super String>[]) list9;
         delegateBooleanAssertion(types, 9, 13, false);
         list9 = list13;
         delegateBooleanAssertion(types, 13, 9, true);
 //        list10 = list10;
         delegateBooleanAssertion(types, 10, 10, true);
         // list11 = list10;
         delegateBooleanAssertion(types, 10, 11, false);
         // list10 = list11;
         delegateBooleanAssertion(types, 11, 10, false);
         // list12 = list10;
         delegateBooleanAssertion(types, 10, 12, false);
         // list10 = list12;
         delegateBooleanAssertion(types, 12, 10, false);
         list13 = list10;
         delegateBooleanAssertion(types, 10, 13, true);
         list10 = (List<? super Object>[]) list13;
         delegateBooleanAssertion(types, 13, 10, false);
 //        list11 = list11;
         delegateBooleanAssertion(types, 11, 11, true);
         list12 = list11;
         delegateBooleanAssertion(types, 11, 12, true);
         list11 = (List<String>[]) list12;
         delegateBooleanAssertion(types, 12, 11, false);
         list13 = list11;
         delegateBooleanAssertion(types, 11, 13, true);
         list11 = (List<String>[]) list13;
         delegateBooleanAssertion(types, 13, 11, false);
 //        list12 = list12;
         delegateBooleanAssertion(types, 12, 12, true);
         list13 = (List<? super String>[]) list12;
         delegateBooleanAssertion(types, 12, 13, false);
         list12 = (List<? extends String>[]) list13;
         delegateBooleanAssertion(types, 13, 12, false);
 //        list13 = list13;
         delegateBooleanAssertion(types, 13, 13, true);
         Type disType = getClass().getField("dis").getGenericType();
         // Reporter.log( ( ( ParameterizedType ) disType
         // ).getOwnerType().getClass().toString() );
         Type datType = getClass().getField("dat").getGenericType();
         Type daType = getClass().getField("da").getGenericType();
         Type uhderType = getClass().getField("uhder").getGenericType();
         Type dingType = getClass().getField("ding").getGenericType();
         Type testerType = getClass().getField("tester").getGenericType();
         Type tester2Type = getClass().getField("tester2").getGenericType();
         Type dat2Type = getClass().getField("dat2").getGenericType();
         Type dat3Type = getClass().getField("dat3").getGenericType();
         dis = dat;
         Assert.assertTrue(TypeUtils.isAssignable(datType, disType));
         // dis = da;
         Assert.assertFalse(TypeUtils.isAssignable(daType, disType));
         dis = uhder;
         Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));
         dis = ding;
-        Assert.assertTrue("WRONG!", TypeUtils.isAssignable(dingType, disType));
+        Assert.assertTrue(String.format("type %s not assignable to %s!", dingType, disType),
+                TypeUtils.isAssignable(dingType, disType));
         dis = tester;
         Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));
         // dis = tester2;
         Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));
         // dat = dat2;
         Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));
         // dat2 = dat;
         Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));
         // dat = dat3;
         Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));
         char ch = 0;
         boolean bo = false;
         byte by = 0;
         short sh = 0;
         int in = 0;
         long lo = 0;
         float fl = 0;
         double du = 0;
         du = ch;
         Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));
         du = by;
         Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));
         du = sh;
         Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));
         du = in;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));
         du = lo;
         Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));
         du = fl;
         Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));
         lo = in;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));
         lo = Integer.valueOf(0);
         Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));
         // Long lngW = 1;
         Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));
         // lngW = Integer.valueOf( 0 );
         Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));
         in = Integer.valueOf(0);
         Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));
         Integer inte = in;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));
         Type intComparableType = getClass().getField("intComparable").getGenericType();
         intComparable = 1;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));
         Serializable ser = 1;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));
         Type longComparableType = getClass().getField("longComparable").getGenericType();
         // longComparable = 1;
         Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));
         // longComparable = Integer.valueOf( 0 );
         Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));
         // int[] ia;
         // long[] la = ia;
         Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));
         Integer[] ia = null;
         Type caType = getClass().getField("intWildcardComparable").getGenericType();
         intWildcardComparable = ia;
         Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));
         // int[] ina = ia;
         Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));
         int[] ina = null;
         Object[] oa;
         // oa = ina;
         Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));
         oa = new Integer[0];
         Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));
         Type bClassType = AClass.class.getField("bClass").getGenericType();
         Type cClassType = AClass.class.getField("cClass").getGenericType();
         Type dClassType = AClass.class.getField("dClass").getGenericType();
         Type eClassType = AClass.class.getField("eClass").getGenericType();
         Type fClassType = AClass.class.getField("fClass").getGenericType();
         AClass aClass = new AClass(new AAClass<String>());
         aClass.bClass = aClass.cClass;
         Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));
         aClass.bClass = aClass.dClass;
         Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));
         aClass.bClass = aClass.eClass;
         Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));
         aClass.bClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));
         aClass.cClass = aClass.dClass;
         Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));
         aClass.cClass = aClass.eClass;
         Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));
         aClass.cClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));
         aClass.dClass = aClass.eClass;
         Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));
         aClass.dClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));
         aClass.eClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));
     }
 

commit 5c1a57a6f8144aee9736f01f3b27d45ad95c3371
Author: Gary D. Gregory <ggregory@apache.org>
Date:   Wed Aug 3 09:39:42 2011

    Use more efficient Integer cache: Use "Integer.valueOf(int)" instead of "new Integer(int)".
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1153484 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
--- a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
@@ -108,335 +108,335 @@
     public void testIsAssignable() throws SecurityException, NoSuchMethodException,
             NoSuchFieldException {
         List list0 = null;
         List<Object> list1 = null;
         List<?> list2 = null;
         List<? super Object> list3 = null;
         List<String> list4 = null;
         List<? extends String> list5 = null;
         List<? super String> list6 = null;
         List[] list7 = null;
         List<Object>[] list8 = null;
         List<?>[] list9 = null;
         List<? super Object>[] list10 = null;
         List<String>[] list11 = null;
         List<? extends String>[] list12 = null;
         List<? super String>[] list13;
         Class<?> clazz = getClass();
         Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                 List.class, List.class, List.class, List.class, List[].class, List[].class,
                 List[].class, List[].class, List[].class, List[].class, List[].class);
         Type[] types = method.getGenericParameterTypes();
 //        list0 = list0;
         delegateBooleanAssertion(types, 0, 0, true);
         list1 = list0;
         delegateBooleanAssertion(types, 0, 1, true);
         list0 = list1;
         delegateBooleanAssertion(types, 1, 0, true);
         list2 = list0;
         delegateBooleanAssertion(types, 0, 2, true);
         list0 = list2;
         delegateBooleanAssertion(types, 2, 0, true);
         list3 = list0;
         delegateBooleanAssertion(types, 0, 3, true);
         list0 = list3;
         delegateBooleanAssertion(types, 3, 0, true);
         list4 = list0;
         delegateBooleanAssertion(types, 0, 4, true);
         list0 = list4;
         delegateBooleanAssertion(types, 4, 0, true);
         list5 = list0;
         delegateBooleanAssertion(types, 0, 5, true);
         list0 = list5;
         delegateBooleanAssertion(types, 5, 0, true);
         list6 = list0;
         delegateBooleanAssertion(types, 0, 6, true);
         list0 = list6;
         delegateBooleanAssertion(types, 6, 0, true);
 //        list1 = list1;
         delegateBooleanAssertion(types, 1, 1, true);
         list2 = list1;
         delegateBooleanAssertion(types, 1, 2, true);
         list1 = (List<Object>) list2;
         delegateBooleanAssertion(types, 2, 1, false);
         list3 = list1;
         delegateBooleanAssertion(types, 1, 3, true);
         list1 = (List<Object>) list3;
         delegateBooleanAssertion(types, 3, 1, false);
         // list4 = list1;
         delegateBooleanAssertion(types, 1, 4, false);
         // list1 = list4;
         delegateBooleanAssertion(types, 4, 1, false);
         // list5 = list1;
         delegateBooleanAssertion(types, 1, 5, false);
         // list1 = list5;
         delegateBooleanAssertion(types, 5, 1, false);
         list6 = list1;
         delegateBooleanAssertion(types, 1, 6, true);
         list1 = (List<Object>) list6;
         delegateBooleanAssertion(types, 6, 1, false);
 //        list2 = list2;
         delegateBooleanAssertion(types, 2, 2, true);
         list2 = list3;
         delegateBooleanAssertion(types, 2, 3, false);
         list2 = list4;
         delegateBooleanAssertion(types, 3, 2, true);
         list3 = (List<? super Object>) list2;
         delegateBooleanAssertion(types, 2, 4, false);
         list2 = list5;
         delegateBooleanAssertion(types, 4, 2, true);
         list4 = (List<String>) list2;
         delegateBooleanAssertion(types, 2, 5, false);
         list2 = list6;
         delegateBooleanAssertion(types, 5, 2, true);
         list5 = (List<? extends String>) list2;
         delegateBooleanAssertion(types, 2, 6, false);
 //        list3 = list3;
         delegateBooleanAssertion(types, 6, 2, true);
         list6 = (List<? super String>) list2;
         delegateBooleanAssertion(types, 3, 3, true);
         // list4 = list3;
         delegateBooleanAssertion(types, 3, 4, false);
         // list3 = list4;
         delegateBooleanAssertion(types, 4, 3, false);
         // list5 = list3;
         delegateBooleanAssertion(types, 3, 5, false);
         // list3 = list5;
         delegateBooleanAssertion(types, 5, 3, false);
         list6 = list3;
         delegateBooleanAssertion(types, 3, 6, true);
         list3 = (List<? super Object>) list6;
         delegateBooleanAssertion(types, 6, 3, false);
 //        list4 = list4;
         delegateBooleanAssertion(types, 4, 4, true);
         list5 = list4;
         delegateBooleanAssertion(types, 4, 5, true);
         list4 = (List<String>) list5;
         delegateBooleanAssertion(types, 5, 4, false);
         list6 = list4;
         delegateBooleanAssertion(types, 4, 6, true);
         list4 = (List<String>) list6;
         delegateBooleanAssertion(types, 6, 4, false);
 //        list5 = list5;
         delegateBooleanAssertion(types, 5, 5, true);
         list6 = (List<? super String>) list5;
         delegateBooleanAssertion(types, 5, 6, false);
         list5 = (List<? extends String>) list6;
         delegateBooleanAssertion(types, 6, 5, false);
 //        list6 = list6;
         delegateBooleanAssertion(types, 6, 6, true);
 
 //        list7 = list7;
         delegateBooleanAssertion(types, 7, 7, true);
         list8 = list7;
         delegateBooleanAssertion(types, 7, 8, true);
         list7 = list8;
         delegateBooleanAssertion(types, 8, 7, true);
         list9 = list7;
         delegateBooleanAssertion(types, 7, 9, true);
         list7 = list9;
         delegateBooleanAssertion(types, 9, 7, true);
         list10 = list7;
         delegateBooleanAssertion(types, 7, 10, true);
         list7 = list10;
         delegateBooleanAssertion(types, 10, 7, true);
         list11 = list7;
         delegateBooleanAssertion(types, 7, 11, true);
         list7 = list11;
         delegateBooleanAssertion(types, 11, 7, true);
         list12 = list7;
         delegateBooleanAssertion(types, 7, 12, true);
         list7 = list12;
         delegateBooleanAssertion(types, 12, 7, true);
         list13 = list7;
         delegateBooleanAssertion(types, 7, 13, true);
         list7 = list13;
         delegateBooleanAssertion(types, 13, 7, true);
 //        list8 = list8;
         delegateBooleanAssertion(types, 8, 8, true);
         list9 = list8;
         delegateBooleanAssertion(types, 8, 9, true);
         list8 = (List<Object>[]) list9;
         delegateBooleanAssertion(types, 9, 8, false);
         list10 = list8;
         delegateBooleanAssertion(types, 8, 10, true);
         list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
         delegateBooleanAssertion(types, 10, 8, false);
         // list11 = list8;
         delegateBooleanAssertion(types, 8, 11, false);
         // list8 = list11;
         delegateBooleanAssertion(types, 11, 8, false);
         // list12 = list8;
         delegateBooleanAssertion(types, 8, 12, false);
         // list8 = list12;
         delegateBooleanAssertion(types, 12, 8, false);
         list13 = list8;
         delegateBooleanAssertion(types, 8, 13, true);
         list8 = (List<Object>[]) list13;
         delegateBooleanAssertion(types, 13, 8, false);
 //        list9 = list9;
         delegateBooleanAssertion(types, 9, 9, true);
         list10 = (List<? super Object>[]) list9;
         delegateBooleanAssertion(types, 9, 10, false);
         list9 = list10;
         delegateBooleanAssertion(types, 10, 9, true);
         list11 = (List<String>[]) list9;
         delegateBooleanAssertion(types, 9, 11, false);
         list9 = list11;
         delegateBooleanAssertion(types, 11, 9, true);
         list12 = (List<? extends String>[]) list9;
         delegateBooleanAssertion(types, 9, 12, false);
         list9 = list12;
         delegateBooleanAssertion(types, 12, 9, true);
         list13 = (List<? super String>[]) list9;
         delegateBooleanAssertion(types, 9, 13, false);
         list9 = list13;
         delegateBooleanAssertion(types, 13, 9, true);
 //        list10 = list10;
         delegateBooleanAssertion(types, 10, 10, true);
         // list11 = list10;
         delegateBooleanAssertion(types, 10, 11, false);
         // list10 = list11;
         delegateBooleanAssertion(types, 11, 10, false);
         // list12 = list10;
         delegateBooleanAssertion(types, 10, 12, false);
         // list10 = list12;
         delegateBooleanAssertion(types, 12, 10, false);
         list13 = list10;
         delegateBooleanAssertion(types, 10, 13, true);
         list10 = (List<? super Object>[]) list13;
         delegateBooleanAssertion(types, 13, 10, false);
 //        list11 = list11;
         delegateBooleanAssertion(types, 11, 11, true);
         list12 = list11;
         delegateBooleanAssertion(types, 11, 12, true);
         list11 = (List<String>[]) list12;
         delegateBooleanAssertion(types, 12, 11, false);
         list13 = list11;
         delegateBooleanAssertion(types, 11, 13, true);
         list11 = (List<String>[]) list13;
         delegateBooleanAssertion(types, 13, 11, false);
 //        list12 = list12;
         delegateBooleanAssertion(types, 12, 12, true);
         list13 = (List<? super String>[]) list12;
         delegateBooleanAssertion(types, 12, 13, false);
         list12 = (List<? extends String>[]) list13;
         delegateBooleanAssertion(types, 13, 12, false);
 //        list13 = list13;
         delegateBooleanAssertion(types, 13, 13, true);
         Type disType = getClass().getField("dis").getGenericType();
         // Reporter.log( ( ( ParameterizedType ) disType
         // ).getOwnerType().getClass().toString() );
         Type datType = getClass().getField("dat").getGenericType();
         Type daType = getClass().getField("da").getGenericType();
         Type uhderType = getClass().getField("uhder").getGenericType();
         Type dingType = getClass().getField("ding").getGenericType();
         Type testerType = getClass().getField("tester").getGenericType();
         Type tester2Type = getClass().getField("tester2").getGenericType();
         Type dat2Type = getClass().getField("dat2").getGenericType();
         Type dat3Type = getClass().getField("dat3").getGenericType();
         dis = dat;
         Assert.assertTrue(TypeUtils.isAssignable(datType, disType));
         // dis = da;
         Assert.assertFalse(TypeUtils.isAssignable(daType, disType));
         dis = uhder;
         Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));
         dis = ding;
         Assert.assertTrue("WRONG!", TypeUtils.isAssignable(dingType, disType));
         dis = tester;
         Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));
         // dis = tester2;
         Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));
         // dat = dat2;
         Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));
         // dat2 = dat;
         Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));
         // dat = dat3;
         Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));
         char ch = 0;
         boolean bo = false;
         byte by = 0;
         short sh = 0;
         int in = 0;
         long lo = 0;
         float fl = 0;
         double du = 0;
         du = ch;
         Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));
         du = by;
         Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));
         du = sh;
         Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));
         du = in;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));
         du = lo;
         Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));
         du = fl;
         Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));
         lo = in;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));
-        lo = new Integer(0);
+        lo = Integer.valueOf(0);
         Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));
         // Long lngW = 1;
         Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));
-        // lngW = new Integer( 0 );
+        // lngW = Integer.valueOf( 0 );
         Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));
-        in = new Integer(0);
+        in = Integer.valueOf(0);
         Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));
         Integer inte = in;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));
         Type intComparableType = getClass().getField("intComparable").getGenericType();
         intComparable = 1;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));
         Serializable ser = 1;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));
         Type longComparableType = getClass().getField("longComparable").getGenericType();
         // longComparable = 1;
         Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));
-        // longComparable = new Integer( 0 );
+        // longComparable = Integer.valueOf( 0 );
         Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));
         // int[] ia;
         // long[] la = ia;
         Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));
         Integer[] ia = null;
         Type caType = getClass().getField("intWildcardComparable").getGenericType();
         intWildcardComparable = ia;
         Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));
         // int[] ina = ia;
         Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));
         int[] ina = null;
         Object[] oa;
         // oa = ina;
         Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));
         oa = new Integer[0];
         Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));
         Type bClassType = AClass.class.getField("bClass").getGenericType();
         Type cClassType = AClass.class.getField("cClass").getGenericType();
         Type dClassType = AClass.class.getField("dClass").getGenericType();
         Type eClassType = AClass.class.getField("eClass").getGenericType();
         Type fClassType = AClass.class.getField("fClass").getGenericType();
         AClass aClass = new AClass(new AAClass<String>());
         aClass.bClass = aClass.cClass;
         Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));
         aClass.bClass = aClass.dClass;
         Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));
         aClass.bClass = aClass.eClass;
         Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));
         aClass.bClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));
         aClass.cClass = aClass.dClass;
         Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));
         aClass.cClass = aClass.eClass;
         Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));
         aClass.cClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));
         aClass.dClass = aClass.eClass;
         Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));
         aClass.dClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));
         aClass.eClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));
     }
 

commit 4106d9d040a3d3f07a47ad8f8332e173cdd5b1c0
Author: Sebastian Bazley <sebb@apache.org>
Date:   Wed May 4 07:44:41 2011

    Suppress boxing warnings that are deliberate
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1099422 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
--- a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
@@ -107,335 +108,335 @@
     public void testIsAssignable() throws SecurityException, NoSuchMethodException,
             NoSuchFieldException {
         List list0 = null;
         List<Object> list1 = null;
         List<?> list2 = null;
         List<? super Object> list3 = null;
         List<String> list4 = null;
         List<? extends String> list5 = null;
         List<? super String> list6 = null;
         List[] list7 = null;
         List<Object>[] list8 = null;
         List<?>[] list9 = null;
         List<? super Object>[] list10 = null;
         List<String>[] list11 = null;
         List<? extends String>[] list12 = null;
         List<? super String>[] list13;
         Class<?> clazz = getClass();
         Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                 List.class, List.class, List.class, List.class, List[].class, List[].class,
                 List[].class, List[].class, List[].class, List[].class, List[].class);
         Type[] types = method.getGenericParameterTypes();
 //        list0 = list0;
         delegateBooleanAssertion(types, 0, 0, true);
         list1 = list0;
         delegateBooleanAssertion(types, 0, 1, true);
         list0 = list1;
         delegateBooleanAssertion(types, 1, 0, true);
         list2 = list0;
         delegateBooleanAssertion(types, 0, 2, true);
         list0 = list2;
         delegateBooleanAssertion(types, 2, 0, true);
         list3 = list0;
         delegateBooleanAssertion(types, 0, 3, true);
         list0 = list3;
         delegateBooleanAssertion(types, 3, 0, true);
         list4 = list0;
         delegateBooleanAssertion(types, 0, 4, true);
         list0 = list4;
         delegateBooleanAssertion(types, 4, 0, true);
         list5 = list0;
         delegateBooleanAssertion(types, 0, 5, true);
         list0 = list5;
         delegateBooleanAssertion(types, 5, 0, true);
         list6 = list0;
         delegateBooleanAssertion(types, 0, 6, true);
         list0 = list6;
         delegateBooleanAssertion(types, 6, 0, true);
 //        list1 = list1;
         delegateBooleanAssertion(types, 1, 1, true);
         list2 = list1;
         delegateBooleanAssertion(types, 1, 2, true);
         list1 = (List<Object>) list2;
         delegateBooleanAssertion(types, 2, 1, false);
         list3 = list1;
         delegateBooleanAssertion(types, 1, 3, true);
         list1 = (List<Object>) list3;
         delegateBooleanAssertion(types, 3, 1, false);
         // list4 = list1;
         delegateBooleanAssertion(types, 1, 4, false);
         // list1 = list4;
         delegateBooleanAssertion(types, 4, 1, false);
         // list5 = list1;
         delegateBooleanAssertion(types, 1, 5, false);
         // list1 = list5;
         delegateBooleanAssertion(types, 5, 1, false);
         list6 = list1;
         delegateBooleanAssertion(types, 1, 6, true);
         list1 = (List<Object>) list6;
         delegateBooleanAssertion(types, 6, 1, false);
 //        list2 = list2;
         delegateBooleanAssertion(types, 2, 2, true);
         list2 = list3;
         delegateBooleanAssertion(types, 2, 3, false);
         list2 = list4;
         delegateBooleanAssertion(types, 3, 2, true);
         list3 = (List<? super Object>) list2;
         delegateBooleanAssertion(types, 2, 4, false);
         list2 = list5;
         delegateBooleanAssertion(types, 4, 2, true);
         list4 = (List<String>) list2;
         delegateBooleanAssertion(types, 2, 5, false);
         list2 = list6;
         delegateBooleanAssertion(types, 5, 2, true);
         list5 = (List<? extends String>) list2;
         delegateBooleanAssertion(types, 2, 6, false);
 //        list3 = list3;
         delegateBooleanAssertion(types, 6, 2, true);
         list6 = (List<? super String>) list2;
         delegateBooleanAssertion(types, 3, 3, true);
         // list4 = list3;
         delegateBooleanAssertion(types, 3, 4, false);
         // list3 = list4;
         delegateBooleanAssertion(types, 4, 3, false);
         // list5 = list3;
         delegateBooleanAssertion(types, 3, 5, false);
         // list3 = list5;
         delegateBooleanAssertion(types, 5, 3, false);
         list6 = list3;
         delegateBooleanAssertion(types, 3, 6, true);
         list3 = (List<? super Object>) list6;
         delegateBooleanAssertion(types, 6, 3, false);
 //        list4 = list4;
         delegateBooleanAssertion(types, 4, 4, true);
         list5 = list4;
         delegateBooleanAssertion(types, 4, 5, true);
         list4 = (List<String>) list5;
         delegateBooleanAssertion(types, 5, 4, false);
         list6 = list4;
         delegateBooleanAssertion(types, 4, 6, true);
         list4 = (List<String>) list6;
         delegateBooleanAssertion(types, 6, 4, false);
 //        list5 = list5;
         delegateBooleanAssertion(types, 5, 5, true);
         list6 = (List<? super String>) list5;
         delegateBooleanAssertion(types, 5, 6, false);
         list5 = (List<? extends String>) list6;
         delegateBooleanAssertion(types, 6, 5, false);
 //        list6 = list6;
         delegateBooleanAssertion(types, 6, 6, true);
 
 //        list7 = list7;
         delegateBooleanAssertion(types, 7, 7, true);
         list8 = list7;
         delegateBooleanAssertion(types, 7, 8, true);
         list7 = list8;
         delegateBooleanAssertion(types, 8, 7, true);
         list9 = list7;
         delegateBooleanAssertion(types, 7, 9, true);
         list7 = list9;
         delegateBooleanAssertion(types, 9, 7, true);
         list10 = list7;
         delegateBooleanAssertion(types, 7, 10, true);
         list7 = list10;
         delegateBooleanAssertion(types, 10, 7, true);
         list11 = list7;
         delegateBooleanAssertion(types, 7, 11, true);
         list7 = list11;
         delegateBooleanAssertion(types, 11, 7, true);
         list12 = list7;
         delegateBooleanAssertion(types, 7, 12, true);
         list7 = list12;
         delegateBooleanAssertion(types, 12, 7, true);
         list13 = list7;
         delegateBooleanAssertion(types, 7, 13, true);
         list7 = list13;
         delegateBooleanAssertion(types, 13, 7, true);
 //        list8 = list8;
         delegateBooleanAssertion(types, 8, 8, true);
         list9 = list8;
         delegateBooleanAssertion(types, 8, 9, true);
         list8 = (List<Object>[]) list9;
         delegateBooleanAssertion(types, 9, 8, false);
         list10 = list8;
         delegateBooleanAssertion(types, 8, 10, true);
-        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Jave, but not by Eclipse
+        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse
         delegateBooleanAssertion(types, 10, 8, false);
         // list11 = list8;
         delegateBooleanAssertion(types, 8, 11, false);
         // list8 = list11;
         delegateBooleanAssertion(types, 11, 8, false);
         // list12 = list8;
         delegateBooleanAssertion(types, 8, 12, false);
         // list8 = list12;
         delegateBooleanAssertion(types, 12, 8, false);
         list13 = list8;
         delegateBooleanAssertion(types, 8, 13, true);
         list8 = (List<Object>[]) list13;
         delegateBooleanAssertion(types, 13, 8, false);
 //        list9 = list9;
         delegateBooleanAssertion(types, 9, 9, true);
         list10 = (List<? super Object>[]) list9;
         delegateBooleanAssertion(types, 9, 10, false);
         list9 = list10;
         delegateBooleanAssertion(types, 10, 9, true);
         list11 = (List<String>[]) list9;
         delegateBooleanAssertion(types, 9, 11, false);
         list9 = list11;
         delegateBooleanAssertion(types, 11, 9, true);
         list12 = (List<? extends String>[]) list9;
         delegateBooleanAssertion(types, 9, 12, false);
         list9 = list12;
         delegateBooleanAssertion(types, 12, 9, true);
         list13 = (List<? super String>[]) list9;
         delegateBooleanAssertion(types, 9, 13, false);
         list9 = list13;
         delegateBooleanAssertion(types, 13, 9, true);
 //        list10 = list10;
         delegateBooleanAssertion(types, 10, 10, true);
         // list11 = list10;
         delegateBooleanAssertion(types, 10, 11, false);
         // list10 = list11;
         delegateBooleanAssertion(types, 11, 10, false);
         // list12 = list10;
         delegateBooleanAssertion(types, 10, 12, false);
         // list10 = list12;
         delegateBooleanAssertion(types, 12, 10, false);
         list13 = list10;
         delegateBooleanAssertion(types, 10, 13, true);
         list10 = (List<? super Object>[]) list13;
         delegateBooleanAssertion(types, 13, 10, false);
 //        list11 = list11;
         delegateBooleanAssertion(types, 11, 11, true);
         list12 = list11;
         delegateBooleanAssertion(types, 11, 12, true);
         list11 = (List<String>[]) list12;
         delegateBooleanAssertion(types, 12, 11, false);
         list13 = list11;
         delegateBooleanAssertion(types, 11, 13, true);
         list11 = (List<String>[]) list13;
         delegateBooleanAssertion(types, 13, 11, false);
 //        list12 = list12;
         delegateBooleanAssertion(types, 12, 12, true);
         list13 = (List<? super String>[]) list12;
         delegateBooleanAssertion(types, 12, 13, false);
         list12 = (List<? extends String>[]) list13;
         delegateBooleanAssertion(types, 13, 12, false);
 //        list13 = list13;
         delegateBooleanAssertion(types, 13, 13, true);
         Type disType = getClass().getField("dis").getGenericType();
         // Reporter.log( ( ( ParameterizedType ) disType
         // ).getOwnerType().getClass().toString() );
         Type datType = getClass().getField("dat").getGenericType();
         Type daType = getClass().getField("da").getGenericType();
         Type uhderType = getClass().getField("uhder").getGenericType();
         Type dingType = getClass().getField("ding").getGenericType();
         Type testerType = getClass().getField("tester").getGenericType();
         Type tester2Type = getClass().getField("tester2").getGenericType();
         Type dat2Type = getClass().getField("dat2").getGenericType();
         Type dat3Type = getClass().getField("dat3").getGenericType();
         dis = dat;
         Assert.assertTrue(TypeUtils.isAssignable(datType, disType));
         // dis = da;
         Assert.assertFalse(TypeUtils.isAssignable(daType, disType));
         dis = uhder;
         Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));
         dis = ding;
         Assert.assertTrue("WRONG!", TypeUtils.isAssignable(dingType, disType));
         dis = tester;
         Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));
         // dis = tester2;
         Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));
         // dat = dat2;
         Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));
         // dat2 = dat;
         Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));
         // dat = dat3;
         Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));
         char ch = 0;
         boolean bo = false;
         byte by = 0;
         short sh = 0;
         int in = 0;
         long lo = 0;
         float fl = 0;
         double du = 0;
         du = ch;
         Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));
         du = by;
         Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));
         du = sh;
         Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));
         du = in;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));
         du = lo;
         Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));
         du = fl;
         Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));
-        // du = bo;
+        lo = in;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));
         lo = new Integer(0);
         Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));
         // Long lngW = 1;
         Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));
         // lngW = new Integer( 0 );
         Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));
         in = new Integer(0);
         Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));
         Integer inte = in;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));
         Type intComparableType = getClass().getField("intComparable").getGenericType();
         intComparable = 1;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));
         Serializable ser = 1;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));
         Type longComparableType = getClass().getField("longComparable").getGenericType();
         // longComparable = 1;
         Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));
         // longComparable = new Integer( 0 );
         Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));
         // int[] ia;
         // long[] la = ia;
         Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));
         Integer[] ia = null;
         Type caType = getClass().getField("intWildcardComparable").getGenericType();
         intWildcardComparable = ia;
         Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));
         // int[] ina = ia;
         Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));
         int[] ina = null;
         Object[] oa;
         // oa = ina;
         Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));
         oa = new Integer[0];
         Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));
         Type bClassType = AClass.class.getField("bClass").getGenericType();
         Type cClassType = AClass.class.getField("cClass").getGenericType();
         Type dClassType = AClass.class.getField("dClass").getGenericType();
         Type eClassType = AClass.class.getField("eClass").getGenericType();
         Type fClassType = AClass.class.getField("fClass").getGenericType();
         AClass aClass = new AClass(new AAClass<String>());
         aClass.bClass = aClass.cClass;
         Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));
         aClass.bClass = aClass.dClass;
         Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));
         aClass.bClass = aClass.eClass;
         Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));
         aClass.bClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));
         aClass.cClass = aClass.dClass;
         Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));
         aClass.cClass = aClass.eClass;
         Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));
         aClass.cClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));
         aClass.dClass = aClass.eClass;
         Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));
         aClass.dClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));
         aClass.eClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));
     }
 

commit eaab72853010bb8bd290900a8bf5c0e131b791be
Author: Sebastian Bazley <sebb@apache.org>
Date:   Thu Apr 7 16:57:08 2011

    Fix broken test - Sun Java and Eclipse casting nasturtiums at each other
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1090006 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
--- a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
@@ -107,335 +107,335 @@
     public void testIsAssignable() throws SecurityException, NoSuchMethodException,
             NoSuchFieldException {
         List list0 = null;
         List<Object> list1 = null;
         List<?> list2 = null;
         List<? super Object> list3 = null;
         List<String> list4 = null;
         List<? extends String> list5 = null;
         List<? super String> list6 = null;
         List[] list7 = null;
         List<Object>[] list8 = null;
         List<?>[] list9 = null;
         List<? super Object>[] list10 = null;
         List<String>[] list11 = null;
         List<? extends String>[] list12 = null;
         List<? super String>[] list13;
         Class<?> clazz = getClass();
         Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                 List.class, List.class, List.class, List.class, List[].class, List[].class,
                 List[].class, List[].class, List[].class, List[].class, List[].class);
         Type[] types = method.getGenericParameterTypes();
 //        list0 = list0;
         delegateBooleanAssertion(types, 0, 0, true);
         list1 = list0;
         delegateBooleanAssertion(types, 0, 1, true);
         list0 = list1;
         delegateBooleanAssertion(types, 1, 0, true);
         list2 = list0;
         delegateBooleanAssertion(types, 0, 2, true);
         list0 = list2;
         delegateBooleanAssertion(types, 2, 0, true);
         list3 = list0;
         delegateBooleanAssertion(types, 0, 3, true);
         list0 = list3;
         delegateBooleanAssertion(types, 3, 0, true);
         list4 = list0;
         delegateBooleanAssertion(types, 0, 4, true);
         list0 = list4;
         delegateBooleanAssertion(types, 4, 0, true);
         list5 = list0;
         delegateBooleanAssertion(types, 0, 5, true);
         list0 = list5;
         delegateBooleanAssertion(types, 5, 0, true);
         list6 = list0;
         delegateBooleanAssertion(types, 0, 6, true);
         list0 = list6;
         delegateBooleanAssertion(types, 6, 0, true);
 //        list1 = list1;
         delegateBooleanAssertion(types, 1, 1, true);
         list2 = list1;
         delegateBooleanAssertion(types, 1, 2, true);
         list1 = (List<Object>) list2;
         delegateBooleanAssertion(types, 2, 1, false);
         list3 = list1;
         delegateBooleanAssertion(types, 1, 3, true);
         list1 = (List<Object>) list3;
         delegateBooleanAssertion(types, 3, 1, false);
         // list4 = list1;
         delegateBooleanAssertion(types, 1, 4, false);
         // list1 = list4;
         delegateBooleanAssertion(types, 4, 1, false);
         // list5 = list1;
         delegateBooleanAssertion(types, 1, 5, false);
         // list1 = list5;
         delegateBooleanAssertion(types, 5, 1, false);
         list6 = list1;
         delegateBooleanAssertion(types, 1, 6, true);
         list1 = (List<Object>) list6;
         delegateBooleanAssertion(types, 6, 1, false);
 //        list2 = list2;
         delegateBooleanAssertion(types, 2, 2, true);
         list2 = list3;
         delegateBooleanAssertion(types, 2, 3, false);
         list2 = list4;
         delegateBooleanAssertion(types, 3, 2, true);
         list3 = (List<? super Object>) list2;
         delegateBooleanAssertion(types, 2, 4, false);
         list2 = list5;
         delegateBooleanAssertion(types, 4, 2, true);
         list4 = (List<String>) list2;
         delegateBooleanAssertion(types, 2, 5, false);
         list2 = list6;
         delegateBooleanAssertion(types, 5, 2, true);
         list5 = (List<? extends String>) list2;
         delegateBooleanAssertion(types, 2, 6, false);
 //        list3 = list3;
         delegateBooleanAssertion(types, 6, 2, true);
         list6 = (List<? super String>) list2;
         delegateBooleanAssertion(types, 3, 3, true);
         // list4 = list3;
         delegateBooleanAssertion(types, 3, 4, false);
         // list3 = list4;
         delegateBooleanAssertion(types, 4, 3, false);
         // list5 = list3;
         delegateBooleanAssertion(types, 3, 5, false);
         // list3 = list5;
         delegateBooleanAssertion(types, 5, 3, false);
         list6 = list3;
         delegateBooleanAssertion(types, 3, 6, true);
         list3 = (List<? super Object>) list6;
         delegateBooleanAssertion(types, 6, 3, false);
 //        list4 = list4;
         delegateBooleanAssertion(types, 4, 4, true);
         list5 = list4;
         delegateBooleanAssertion(types, 4, 5, true);
         list4 = (List<String>) list5;
         delegateBooleanAssertion(types, 5, 4, false);
         list6 = list4;
         delegateBooleanAssertion(types, 4, 6, true);
         list4 = (List<String>) list6;
         delegateBooleanAssertion(types, 6, 4, false);
 //        list5 = list5;
         delegateBooleanAssertion(types, 5, 5, true);
         list6 = (List<? super String>) list5;
         delegateBooleanAssertion(types, 5, 6, false);
         list5 = (List<? extends String>) list6;
         delegateBooleanAssertion(types, 6, 5, false);
 //        list6 = list6;
         delegateBooleanAssertion(types, 6, 6, true);
 
 //        list7 = list7;
         delegateBooleanAssertion(types, 7, 7, true);
         list8 = list7;
         delegateBooleanAssertion(types, 7, 8, true);
         list7 = list8;
         delegateBooleanAssertion(types, 8, 7, true);
         list9 = list7;
         delegateBooleanAssertion(types, 7, 9, true);
         list7 = list9;
         delegateBooleanAssertion(types, 9, 7, true);
         list10 = list7;
         delegateBooleanAssertion(types, 7, 10, true);
         list7 = list10;
         delegateBooleanAssertion(types, 10, 7, true);
         list11 = list7;
         delegateBooleanAssertion(types, 7, 11, true);
         list7 = list11;
         delegateBooleanAssertion(types, 11, 7, true);
         list12 = list7;
         delegateBooleanAssertion(types, 7, 12, true);
         list7 = list12;
         delegateBooleanAssertion(types, 12, 7, true);
         list13 = list7;
         delegateBooleanAssertion(types, 7, 13, true);
         list7 = list13;
         delegateBooleanAssertion(types, 13, 7, true);
 //        list8 = list8;
         delegateBooleanAssertion(types, 8, 8, true);
         list9 = list8;
         delegateBooleanAssertion(types, 8, 9, true);
         list8 = (List<Object>[]) list9;
         delegateBooleanAssertion(types, 9, 8, false);
         list10 = list8;
         delegateBooleanAssertion(types, 8, 10, true);
-        list8 = list10;
+        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Jave, but not by Eclipse
         delegateBooleanAssertion(types, 10, 8, false);
         // list11 = list8;
         delegateBooleanAssertion(types, 8, 11, false);
         // list8 = list11;
         delegateBooleanAssertion(types, 11, 8, false);
         // list12 = list8;
         delegateBooleanAssertion(types, 8, 12, false);
         // list8 = list12;
         delegateBooleanAssertion(types, 12, 8, false);
         list13 = list8;
         delegateBooleanAssertion(types, 8, 13, true);
         list8 = (List<Object>[]) list13;
         delegateBooleanAssertion(types, 13, 8, false);
 //        list9 = list9;
         delegateBooleanAssertion(types, 9, 9, true);
         list10 = (List<? super Object>[]) list9;
         delegateBooleanAssertion(types, 9, 10, false);
         list9 = list10;
         delegateBooleanAssertion(types, 10, 9, true);
         list11 = (List<String>[]) list9;
         delegateBooleanAssertion(types, 9, 11, false);
         list9 = list11;
         delegateBooleanAssertion(types, 11, 9, true);
         list12 = (List<? extends String>[]) list9;
         delegateBooleanAssertion(types, 9, 12, false);
         list9 = list12;
         delegateBooleanAssertion(types, 12, 9, true);
         list13 = (List<? super String>[]) list9;
         delegateBooleanAssertion(types, 9, 13, false);
         list9 = list13;
         delegateBooleanAssertion(types, 13, 9, true);
 //        list10 = list10;
         delegateBooleanAssertion(types, 10, 10, true);
         // list11 = list10;
         delegateBooleanAssertion(types, 10, 11, false);
         // list10 = list11;
         delegateBooleanAssertion(types, 11, 10, false);
         // list12 = list10;
         delegateBooleanAssertion(types, 10, 12, false);
         // list10 = list12;
         delegateBooleanAssertion(types, 12, 10, false);
         list13 = list10;
         delegateBooleanAssertion(types, 10, 13, true);
         list10 = (List<? super Object>[]) list13;
         delegateBooleanAssertion(types, 13, 10, false);
 //        list11 = list11;
         delegateBooleanAssertion(types, 11, 11, true);
         list12 = list11;
         delegateBooleanAssertion(types, 11, 12, true);
         list11 = (List<String>[]) list12;
         delegateBooleanAssertion(types, 12, 11, false);
         list13 = list11;
         delegateBooleanAssertion(types, 11, 13, true);
         list11 = (List<String>[]) list13;
         delegateBooleanAssertion(types, 13, 11, false);
 //        list12 = list12;
         delegateBooleanAssertion(types, 12, 12, true);
         list13 = (List<? super String>[]) list12;
         delegateBooleanAssertion(types, 12, 13, false);
         list12 = (List<? extends String>[]) list13;
         delegateBooleanAssertion(types, 13, 12, false);
 //        list13 = list13;
         delegateBooleanAssertion(types, 13, 13, true);
         Type disType = getClass().getField("dis").getGenericType();
         // Reporter.log( ( ( ParameterizedType ) disType
         // ).getOwnerType().getClass().toString() );
         Type datType = getClass().getField("dat").getGenericType();
         Type daType = getClass().getField("da").getGenericType();
         Type uhderType = getClass().getField("uhder").getGenericType();
         Type dingType = getClass().getField("ding").getGenericType();
         Type testerType = getClass().getField("tester").getGenericType();
         Type tester2Type = getClass().getField("tester2").getGenericType();
         Type dat2Type = getClass().getField("dat2").getGenericType();
         Type dat3Type = getClass().getField("dat3").getGenericType();
         dis = dat;
         Assert.assertTrue(TypeUtils.isAssignable(datType, disType));
         // dis = da;
         Assert.assertFalse(TypeUtils.isAssignable(daType, disType));
         dis = uhder;
         Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));
         dis = ding;
         Assert.assertTrue("WRONG!", TypeUtils.isAssignable(dingType, disType));
         dis = tester;
         Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));
         // dis = tester2;
         Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));
         // dat = dat2;
         Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));
         // dat2 = dat;
         Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));
         // dat = dat3;
         Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));
         char ch = 0;
         boolean bo = false;
         byte by = 0;
         short sh = 0;
         int in = 0;
         long lo = 0;
         float fl = 0;
         double du = 0;
         du = ch;
         Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));
         du = by;
         Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));
         du = sh;
         Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));
         du = in;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));
         du = lo;
         Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));
         du = fl;
         Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));
         // du = bo;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));
         lo = new Integer(0);
         Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));
         // Long lngW = 1;
         Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));
         // lngW = new Integer( 0 );
         Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));
         in = new Integer(0);
         Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));
         Integer inte = in;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));
         Type intComparableType = getClass().getField("intComparable").getGenericType();
         intComparable = 1;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));
         Serializable ser = 1;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));
         Type longComparableType = getClass().getField("longComparable").getGenericType();
         // longComparable = 1;
         Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));
         // longComparable = new Integer( 0 );
         Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));
         // int[] ia;
         // long[] la = ia;
         Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));
         Integer[] ia = null;
         Type caType = getClass().getField("intWildcardComparable").getGenericType();
         intWildcardComparable = ia;
         Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));
         // int[] ina = ia;
         Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));
         int[] ina = null;
         Object[] oa;
         // oa = ina;
         Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));
         oa = new Integer[0];
         Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));
         Type bClassType = AClass.class.getField("bClass").getGenericType();
         Type cClassType = AClass.class.getField("cClass").getGenericType();
         Type dClassType = AClass.class.getField("dClass").getGenericType();
         Type eClassType = AClass.class.getField("eClass").getGenericType();
         Type fClassType = AClass.class.getField("fClass").getGenericType();
         AClass aClass = new AClass(new AAClass<String>());
         aClass.bClass = aClass.cClass;
         Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));
         aClass.bClass = aClass.dClass;
         Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));
         aClass.bClass = aClass.eClass;
         Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));
         aClass.bClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));
         aClass.cClass = aClass.dClass;
         Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));
         aClass.cClass = aClass.eClass;
         Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));
         aClass.cClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));
         aClass.dClass = aClass.eClass;
         Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));
         aClass.dClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));
         aClass.eClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));
     }
 

commit 91224ed22b6956b97d9a4bc035c3da1804019d0c
Author: Henri Yandell <bayard@apache.org>
Date:   Thu Apr 7 16:55:43 2011

    My screwup. Rolling back didn't fix, so rolling forward again. No idea still why the build fails; needs investigation
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1090004 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
--- a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
@@ -107,335 +107,335 @@
     public void testIsAssignable() throws SecurityException, NoSuchMethodException,
             NoSuchFieldException {
         List list0 = null;
         List<Object> list1 = null;
         List<?> list2 = null;
         List<? super Object> list3 = null;
         List<String> list4 = null;
         List<? extends String> list5 = null;
         List<? super String> list6 = null;
         List[] list7 = null;
         List<Object>[] list8 = null;
         List<?>[] list9 = null;
         List<? super Object>[] list10 = null;
         List<String>[] list11 = null;
         List<? extends String>[] list12 = null;
         List<? super String>[] list13;
         Class<?> clazz = getClass();
         Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                 List.class, List.class, List.class, List.class, List[].class, List[].class,
                 List[].class, List[].class, List[].class, List[].class, List[].class);
         Type[] types = method.getGenericParameterTypes();
-        list0 = list0;
+//        list0 = list0;
         delegateBooleanAssertion(types, 0, 0, true);
         list1 = list0;
         delegateBooleanAssertion(types, 0, 1, true);
         list0 = list1;
         delegateBooleanAssertion(types, 1, 0, true);
         list2 = list0;
         delegateBooleanAssertion(types, 0, 2, true);
         list0 = list2;
         delegateBooleanAssertion(types, 2, 0, true);
         list3 = list0;
         delegateBooleanAssertion(types, 0, 3, true);
         list0 = list3;
         delegateBooleanAssertion(types, 3, 0, true);
         list4 = list0;
         delegateBooleanAssertion(types, 0, 4, true);
         list0 = list4;
         delegateBooleanAssertion(types, 4, 0, true);
         list5 = list0;
         delegateBooleanAssertion(types, 0, 5, true);
         list0 = list5;
         delegateBooleanAssertion(types, 5, 0, true);
         list6 = list0;
         delegateBooleanAssertion(types, 0, 6, true);
         list0 = list6;
         delegateBooleanAssertion(types, 6, 0, true);
-        list1 = list1;
+//        list1 = list1;
         delegateBooleanAssertion(types, 1, 1, true);
         list2 = list1;
         delegateBooleanAssertion(types, 1, 2, true);
         list1 = (List<Object>) list2;
         delegateBooleanAssertion(types, 2, 1, false);
         list3 = list1;
         delegateBooleanAssertion(types, 1, 3, true);
         list1 = (List<Object>) list3;
         delegateBooleanAssertion(types, 3, 1, false);
         // list4 = list1;
         delegateBooleanAssertion(types, 1, 4, false);
         // list1 = list4;
         delegateBooleanAssertion(types, 4, 1, false);
         // list5 = list1;
         delegateBooleanAssertion(types, 1, 5, false);
         // list1 = list5;
         delegateBooleanAssertion(types, 5, 1, false);
         list6 = list1;
         delegateBooleanAssertion(types, 1, 6, true);
         list1 = (List<Object>) list6;
         delegateBooleanAssertion(types, 6, 1, false);
-        list2 = list2;
+//        list2 = list2;
         delegateBooleanAssertion(types, 2, 2, true);
         list2 = list3;
         delegateBooleanAssertion(types, 2, 3, false);
         list2 = list4;
         delegateBooleanAssertion(types, 3, 2, true);
         list3 = (List<? super Object>) list2;
         delegateBooleanAssertion(types, 2, 4, false);
         list2 = list5;
         delegateBooleanAssertion(types, 4, 2, true);
         list4 = (List<String>) list2;
         delegateBooleanAssertion(types, 2, 5, false);
         list2 = list6;
         delegateBooleanAssertion(types, 5, 2, true);
         list5 = (List<? extends String>) list2;
         delegateBooleanAssertion(types, 2, 6, false);
-        list3 = list3;
+//        list3 = list3;
         delegateBooleanAssertion(types, 6, 2, true);
         list6 = (List<? super String>) list2;
         delegateBooleanAssertion(types, 3, 3, true);
         // list4 = list3;
         delegateBooleanAssertion(types, 3, 4, false);
         // list3 = list4;
         delegateBooleanAssertion(types, 4, 3, false);
         // list5 = list3;
         delegateBooleanAssertion(types, 3, 5, false);
         // list3 = list5;
         delegateBooleanAssertion(types, 5, 3, false);
         list6 = list3;
         delegateBooleanAssertion(types, 3, 6, true);
         list3 = (List<? super Object>) list6;
         delegateBooleanAssertion(types, 6, 3, false);
-        list4 = list4;
+//        list4 = list4;
         delegateBooleanAssertion(types, 4, 4, true);
         list5 = list4;
         delegateBooleanAssertion(types, 4, 5, true);
         list4 = (List<String>) list5;
         delegateBooleanAssertion(types, 5, 4, false);
         list6 = list4;
         delegateBooleanAssertion(types, 4, 6, true);
         list4 = (List<String>) list6;
         delegateBooleanAssertion(types, 6, 4, false);
-        list5 = list5;
+//        list5 = list5;
         delegateBooleanAssertion(types, 5, 5, true);
         list6 = (List<? super String>) list5;
         delegateBooleanAssertion(types, 5, 6, false);
         list5 = (List<? extends String>) list6;
         delegateBooleanAssertion(types, 6, 5, false);
-        list6 = list6;
+//        list6 = list6;
         delegateBooleanAssertion(types, 6, 6, true);
 
-        list7 = list7;
+//        list7 = list7;
         delegateBooleanAssertion(types, 7, 7, true);
         list8 = list7;
         delegateBooleanAssertion(types, 7, 8, true);
         list7 = list8;
         delegateBooleanAssertion(types, 8, 7, true);
         list9 = list7;
         delegateBooleanAssertion(types, 7, 9, true);
         list7 = list9;
         delegateBooleanAssertion(types, 9, 7, true);
         list10 = list7;
         delegateBooleanAssertion(types, 7, 10, true);
         list7 = list10;
         delegateBooleanAssertion(types, 10, 7, true);
         list11 = list7;
         delegateBooleanAssertion(types, 7, 11, true);
         list7 = list11;
         delegateBooleanAssertion(types, 11, 7, true);
         list12 = list7;
         delegateBooleanAssertion(types, 7, 12, true);
         list7 = list12;
         delegateBooleanAssertion(types, 12, 7, true);
         list13 = list7;
         delegateBooleanAssertion(types, 7, 13, true);
         list7 = list13;
         delegateBooleanAssertion(types, 13, 7, true);
-        list8 = list8;
+//        list8 = list8;
         delegateBooleanAssertion(types, 8, 8, true);
         list9 = list8;
         delegateBooleanAssertion(types, 8, 9, true);
         list8 = (List<Object>[]) list9;
         delegateBooleanAssertion(types, 9, 8, false);
         list10 = list8;
         delegateBooleanAssertion(types, 8, 10, true);
         list8 = list10;
         delegateBooleanAssertion(types, 10, 8, false);
         // list11 = list8;
         delegateBooleanAssertion(types, 8, 11, false);
         // list8 = list11;
         delegateBooleanAssertion(types, 11, 8, false);
         // list12 = list8;
         delegateBooleanAssertion(types, 8, 12, false);
         // list8 = list12;
         delegateBooleanAssertion(types, 12, 8, false);
         list13 = list8;
         delegateBooleanAssertion(types, 8, 13, true);
         list8 = (List<Object>[]) list13;
         delegateBooleanAssertion(types, 13, 8, false);
-        list9 = list9;
+//        list9 = list9;
         delegateBooleanAssertion(types, 9, 9, true);
         list10 = (List<? super Object>[]) list9;
         delegateBooleanAssertion(types, 9, 10, false);
         list9 = list10;
         delegateBooleanAssertion(types, 10, 9, true);
         list11 = (List<String>[]) list9;
         delegateBooleanAssertion(types, 9, 11, false);
         list9 = list11;
         delegateBooleanAssertion(types, 11, 9, true);
         list12 = (List<? extends String>[]) list9;
         delegateBooleanAssertion(types, 9, 12, false);
         list9 = list12;
         delegateBooleanAssertion(types, 12, 9, true);
         list13 = (List<? super String>[]) list9;
         delegateBooleanAssertion(types, 9, 13, false);
         list9 = list13;
         delegateBooleanAssertion(types, 13, 9, true);
-        list10 = list10;
+//        list10 = list10;
         delegateBooleanAssertion(types, 10, 10, true);
         // list11 = list10;
         delegateBooleanAssertion(types, 10, 11, false);
         // list10 = list11;
         delegateBooleanAssertion(types, 11, 10, false);
         // list12 = list10;
         delegateBooleanAssertion(types, 10, 12, false);
         // list10 = list12;
         delegateBooleanAssertion(types, 12, 10, false);
         list13 = list10;
         delegateBooleanAssertion(types, 10, 13, true);
         list10 = (List<? super Object>[]) list13;
         delegateBooleanAssertion(types, 13, 10, false);
-        list11 = list11;
+//        list11 = list11;
         delegateBooleanAssertion(types, 11, 11, true);
         list12 = list11;
         delegateBooleanAssertion(types, 11, 12, true);
         list11 = (List<String>[]) list12;
         delegateBooleanAssertion(types, 12, 11, false);
         list13 = list11;
         delegateBooleanAssertion(types, 11, 13, true);
         list11 = (List<String>[]) list13;
         delegateBooleanAssertion(types, 13, 11, false);
-        list12 = list12;
+//        list12 = list12;
         delegateBooleanAssertion(types, 12, 12, true);
         list13 = (List<? super String>[]) list12;
         delegateBooleanAssertion(types, 12, 13, false);
         list12 = (List<? extends String>[]) list13;
         delegateBooleanAssertion(types, 13, 12, false);
-        list13 = list13;
+//        list13 = list13;
         delegateBooleanAssertion(types, 13, 13, true);
         Type disType = getClass().getField("dis").getGenericType();
         // Reporter.log( ( ( ParameterizedType ) disType
         // ).getOwnerType().getClass().toString() );
         Type datType = getClass().getField("dat").getGenericType();
         Type daType = getClass().getField("da").getGenericType();
         Type uhderType = getClass().getField("uhder").getGenericType();
         Type dingType = getClass().getField("ding").getGenericType();
         Type testerType = getClass().getField("tester").getGenericType();
         Type tester2Type = getClass().getField("tester2").getGenericType();
         Type dat2Type = getClass().getField("dat2").getGenericType();
         Type dat3Type = getClass().getField("dat3").getGenericType();
         dis = dat;
         Assert.assertTrue(TypeUtils.isAssignable(datType, disType));
         // dis = da;
         Assert.assertFalse(TypeUtils.isAssignable(daType, disType));
         dis = uhder;
         Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));
         dis = ding;
         Assert.assertTrue("WRONG!", TypeUtils.isAssignable(dingType, disType));
         dis = tester;
         Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));
         // dis = tester2;
         Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));
         // dat = dat2;
         Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));
         // dat2 = dat;
         Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));
         // dat = dat3;
         Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));
         char ch = 0;
         boolean bo = false;
         byte by = 0;
         short sh = 0;
         int in = 0;
         long lo = 0;
         float fl = 0;
         double du = 0;
         du = ch;
         Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));
         du = by;
         Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));
         du = sh;
         Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));
         du = in;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));
         du = lo;
         Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));
         du = fl;
         Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));
         // du = bo;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));
         lo = new Integer(0);
         Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));
         // Long lngW = 1;
         Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));
         // lngW = new Integer( 0 );
         Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));
         in = new Integer(0);
         Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));
         Integer inte = in;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));
         Type intComparableType = getClass().getField("intComparable").getGenericType();
         intComparable = 1;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));
         Serializable ser = 1;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));
         Type longComparableType = getClass().getField("longComparable").getGenericType();
         // longComparable = 1;
         Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));
         // longComparable = new Integer( 0 );
         Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));
         // int[] ia;
         // long[] la = ia;
         Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));
         Integer[] ia = null;
         Type caType = getClass().getField("intWildcardComparable").getGenericType();
         intWildcardComparable = ia;
         Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));
         // int[] ina = ia;
         Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));
         int[] ina = null;
         Object[] oa;
         // oa = ina;
         Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));
         oa = new Integer[0];
         Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));
         Type bClassType = AClass.class.getField("bClass").getGenericType();
         Type cClassType = AClass.class.getField("cClass").getGenericType();
         Type dClassType = AClass.class.getField("dClass").getGenericType();
         Type eClassType = AClass.class.getField("eClass").getGenericType();
         Type fClassType = AClass.class.getField("fClass").getGenericType();
         AClass aClass = new AClass(new AAClass<String>());
         aClass.bClass = aClass.cClass;
         Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));
         aClass.bClass = aClass.dClass;
         Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));
         aClass.bClass = aClass.eClass;
         Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));
         aClass.bClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));
         aClass.cClass = aClass.dClass;
         Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));
         aClass.cClass = aClass.eClass;
         Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));
         aClass.cClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));
         aClass.dClass = aClass.eClass;
         Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));
         aClass.dClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));
         aClass.eClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));
     }
 

commit fa524f56d58c6d85a36aee0e5a7e7ade4279ec00
Author: Henri Yandell <bayard@apache.org>
Date:   Thu Apr 7 16:47:48 2011

    Rolling back the TypeUtilsTest change in r1089973 as it breaks the build. Unsure why.
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1090000 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
--- a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
@@ -107,335 +107,335 @@
     public void testIsAssignable() throws SecurityException, NoSuchMethodException,
             NoSuchFieldException {
         List list0 = null;
         List<Object> list1 = null;
         List<?> list2 = null;
         List<? super Object> list3 = null;
         List<String> list4 = null;
         List<? extends String> list5 = null;
         List<? super String> list6 = null;
         List[] list7 = null;
         List<Object>[] list8 = null;
         List<?>[] list9 = null;
         List<? super Object>[] list10 = null;
         List<String>[] list11 = null;
         List<? extends String>[] list12 = null;
         List<? super String>[] list13;
         Class<?> clazz = getClass();
         Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                 List.class, List.class, List.class, List.class, List[].class, List[].class,
                 List[].class, List[].class, List[].class, List[].class, List[].class);
         Type[] types = method.getGenericParameterTypes();
-//        list0 = list0;
+        list0 = list0;
         delegateBooleanAssertion(types, 0, 0, true);
         list1 = list0;
         delegateBooleanAssertion(types, 0, 1, true);
         list0 = list1;
         delegateBooleanAssertion(types, 1, 0, true);
         list2 = list0;
         delegateBooleanAssertion(types, 0, 2, true);
         list0 = list2;
         delegateBooleanAssertion(types, 2, 0, true);
         list3 = list0;
         delegateBooleanAssertion(types, 0, 3, true);
         list0 = list3;
         delegateBooleanAssertion(types, 3, 0, true);
         list4 = list0;
         delegateBooleanAssertion(types, 0, 4, true);
         list0 = list4;
         delegateBooleanAssertion(types, 4, 0, true);
         list5 = list0;
         delegateBooleanAssertion(types, 0, 5, true);
         list0 = list5;
         delegateBooleanAssertion(types, 5, 0, true);
         list6 = list0;
         delegateBooleanAssertion(types, 0, 6, true);
         list0 = list6;
         delegateBooleanAssertion(types, 6, 0, true);
-//        list1 = list1;
+        list1 = list1;
         delegateBooleanAssertion(types, 1, 1, true);
         list2 = list1;
         delegateBooleanAssertion(types, 1, 2, true);
         list1 = (List<Object>) list2;
         delegateBooleanAssertion(types, 2, 1, false);
         list3 = list1;
         delegateBooleanAssertion(types, 1, 3, true);
         list1 = (List<Object>) list3;
         delegateBooleanAssertion(types, 3, 1, false);
         // list4 = list1;
         delegateBooleanAssertion(types, 1, 4, false);
         // list1 = list4;
         delegateBooleanAssertion(types, 4, 1, false);
         // list5 = list1;
         delegateBooleanAssertion(types, 1, 5, false);
         // list1 = list5;
         delegateBooleanAssertion(types, 5, 1, false);
         list6 = list1;
         delegateBooleanAssertion(types, 1, 6, true);
         list1 = (List<Object>) list6;
         delegateBooleanAssertion(types, 6, 1, false);
-//        list2 = list2;
+        list2 = list2;
         delegateBooleanAssertion(types, 2, 2, true);
         list2 = list3;
         delegateBooleanAssertion(types, 2, 3, false);
         list2 = list4;
         delegateBooleanAssertion(types, 3, 2, true);
         list3 = (List<? super Object>) list2;
         delegateBooleanAssertion(types, 2, 4, false);
         list2 = list5;
         delegateBooleanAssertion(types, 4, 2, true);
         list4 = (List<String>) list2;
         delegateBooleanAssertion(types, 2, 5, false);
         list2 = list6;
         delegateBooleanAssertion(types, 5, 2, true);
         list5 = (List<? extends String>) list2;
         delegateBooleanAssertion(types, 2, 6, false);
-//        list3 = list3;
+        list3 = list3;
         delegateBooleanAssertion(types, 6, 2, true);
         list6 = (List<? super String>) list2;
         delegateBooleanAssertion(types, 3, 3, true);
         // list4 = list3;
         delegateBooleanAssertion(types, 3, 4, false);
         // list3 = list4;
         delegateBooleanAssertion(types, 4, 3, false);
         // list5 = list3;
         delegateBooleanAssertion(types, 3, 5, false);
         // list3 = list5;
         delegateBooleanAssertion(types, 5, 3, false);
         list6 = list3;
         delegateBooleanAssertion(types, 3, 6, true);
         list3 = (List<? super Object>) list6;
         delegateBooleanAssertion(types, 6, 3, false);
-//        list4 = list4;
+        list4 = list4;
         delegateBooleanAssertion(types, 4, 4, true);
         list5 = list4;
         delegateBooleanAssertion(types, 4, 5, true);
         list4 = (List<String>) list5;
         delegateBooleanAssertion(types, 5, 4, false);
         list6 = list4;
         delegateBooleanAssertion(types, 4, 6, true);
         list4 = (List<String>) list6;
         delegateBooleanAssertion(types, 6, 4, false);
-//        list5 = list5;
+        list5 = list5;
         delegateBooleanAssertion(types, 5, 5, true);
         list6 = (List<? super String>) list5;
         delegateBooleanAssertion(types, 5, 6, false);
         list5 = (List<? extends String>) list6;
         delegateBooleanAssertion(types, 6, 5, false);
-//        list6 = list6;
+        list6 = list6;
         delegateBooleanAssertion(types, 6, 6, true);
 
-//        list7 = list7;
+        list7 = list7;
         delegateBooleanAssertion(types, 7, 7, true);
         list8 = list7;
         delegateBooleanAssertion(types, 7, 8, true);
         list7 = list8;
         delegateBooleanAssertion(types, 8, 7, true);
         list9 = list7;
         delegateBooleanAssertion(types, 7, 9, true);
         list7 = list9;
         delegateBooleanAssertion(types, 9, 7, true);
         list10 = list7;
         delegateBooleanAssertion(types, 7, 10, true);
         list7 = list10;
         delegateBooleanAssertion(types, 10, 7, true);
         list11 = list7;
         delegateBooleanAssertion(types, 7, 11, true);
         list7 = list11;
         delegateBooleanAssertion(types, 11, 7, true);
         list12 = list7;
         delegateBooleanAssertion(types, 7, 12, true);
         list7 = list12;
         delegateBooleanAssertion(types, 12, 7, true);
         list13 = list7;
         delegateBooleanAssertion(types, 7, 13, true);
         list7 = list13;
         delegateBooleanAssertion(types, 13, 7, true);
-//        list8 = list8;
+        list8 = list8;
         delegateBooleanAssertion(types, 8, 8, true);
         list9 = list8;
         delegateBooleanAssertion(types, 8, 9, true);
         list8 = (List<Object>[]) list9;
         delegateBooleanAssertion(types, 9, 8, false);
         list10 = list8;
         delegateBooleanAssertion(types, 8, 10, true);
         list8 = list10;
         delegateBooleanAssertion(types, 10, 8, false);
         // list11 = list8;
         delegateBooleanAssertion(types, 8, 11, false);
         // list8 = list11;
         delegateBooleanAssertion(types, 11, 8, false);
         // list12 = list8;
         delegateBooleanAssertion(types, 8, 12, false);
         // list8 = list12;
         delegateBooleanAssertion(types, 12, 8, false);
         list13 = list8;
         delegateBooleanAssertion(types, 8, 13, true);
         list8 = (List<Object>[]) list13;
         delegateBooleanAssertion(types, 13, 8, false);
-//        list9 = list9;
+        list9 = list9;
         delegateBooleanAssertion(types, 9, 9, true);
         list10 = (List<? super Object>[]) list9;
         delegateBooleanAssertion(types, 9, 10, false);
         list9 = list10;
         delegateBooleanAssertion(types, 10, 9, true);
         list11 = (List<String>[]) list9;
         delegateBooleanAssertion(types, 9, 11, false);
         list9 = list11;
         delegateBooleanAssertion(types, 11, 9, true);
         list12 = (List<? extends String>[]) list9;
         delegateBooleanAssertion(types, 9, 12, false);
         list9 = list12;
         delegateBooleanAssertion(types, 12, 9, true);
         list13 = (List<? super String>[]) list9;
         delegateBooleanAssertion(types, 9, 13, false);
         list9 = list13;
         delegateBooleanAssertion(types, 13, 9, true);
-//        list10 = list10;
+        list10 = list10;
         delegateBooleanAssertion(types, 10, 10, true);
         // list11 = list10;
         delegateBooleanAssertion(types, 10, 11, false);
         // list10 = list11;
         delegateBooleanAssertion(types, 11, 10, false);
         // list12 = list10;
         delegateBooleanAssertion(types, 10, 12, false);
         // list10 = list12;
         delegateBooleanAssertion(types, 12, 10, false);
         list13 = list10;
         delegateBooleanAssertion(types, 10, 13, true);
         list10 = (List<? super Object>[]) list13;
         delegateBooleanAssertion(types, 13, 10, false);
-//        list11 = list11;
+        list11 = list11;
         delegateBooleanAssertion(types, 11, 11, true);
         list12 = list11;
         delegateBooleanAssertion(types, 11, 12, true);
         list11 = (List<String>[]) list12;
         delegateBooleanAssertion(types, 12, 11, false);
         list13 = list11;
         delegateBooleanAssertion(types, 11, 13, true);
         list11 = (List<String>[]) list13;
         delegateBooleanAssertion(types, 13, 11, false);
-//        list12 = list12;
+        list12 = list12;
         delegateBooleanAssertion(types, 12, 12, true);
         list13 = (List<? super String>[]) list12;
         delegateBooleanAssertion(types, 12, 13, false);
         list12 = (List<? extends String>[]) list13;
         delegateBooleanAssertion(types, 13, 12, false);
-//        list13 = list13;
+        list13 = list13;
         delegateBooleanAssertion(types, 13, 13, true);
         Type disType = getClass().getField("dis").getGenericType();
         // Reporter.log( ( ( ParameterizedType ) disType
         // ).getOwnerType().getClass().toString() );
         Type datType = getClass().getField("dat").getGenericType();
         Type daType = getClass().getField("da").getGenericType();
         Type uhderType = getClass().getField("uhder").getGenericType();
         Type dingType = getClass().getField("ding").getGenericType();
         Type testerType = getClass().getField("tester").getGenericType();
         Type tester2Type = getClass().getField("tester2").getGenericType();
         Type dat2Type = getClass().getField("dat2").getGenericType();
         Type dat3Type = getClass().getField("dat3").getGenericType();
         dis = dat;
         Assert.assertTrue(TypeUtils.isAssignable(datType, disType));
         // dis = da;
         Assert.assertFalse(TypeUtils.isAssignable(daType, disType));
         dis = uhder;
         Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));
         dis = ding;
         Assert.assertTrue("WRONG!", TypeUtils.isAssignable(dingType, disType));
         dis = tester;
         Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));
         // dis = tester2;
         Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));
         // dat = dat2;
         Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));
         // dat2 = dat;
         Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));
         // dat = dat3;
         Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));
         char ch = 0;
         boolean bo = false;
         byte by = 0;
         short sh = 0;
         int in = 0;
         long lo = 0;
         float fl = 0;
         double du = 0;
         du = ch;
         Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));
         du = by;
         Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));
         du = sh;
         Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));
         du = in;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));
         du = lo;
         Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));
         du = fl;
         Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));
         // du = bo;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));
         lo = new Integer(0);
         Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));
         // Long lngW = 1;
         Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));
         // lngW = new Integer( 0 );
         Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));
         in = new Integer(0);
         Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));
         Integer inte = in;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));
         Type intComparableType = getClass().getField("intComparable").getGenericType();
         intComparable = 1;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));
         Serializable ser = 1;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));
         Type longComparableType = getClass().getField("longComparable").getGenericType();
         // longComparable = 1;
         Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));
         // longComparable = new Integer( 0 );
         Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));
         // int[] ia;
         // long[] la = ia;
         Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));
         Integer[] ia = null;
         Type caType = getClass().getField("intWildcardComparable").getGenericType();
         intWildcardComparable = ia;
         Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));
         // int[] ina = ia;
         Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));
         int[] ina = null;
         Object[] oa;
         // oa = ina;
         Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));
         oa = new Integer[0];
         Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));
         Type bClassType = AClass.class.getField("bClass").getGenericType();
         Type cClassType = AClass.class.getField("cClass").getGenericType();
         Type dClassType = AClass.class.getField("dClass").getGenericType();
         Type eClassType = AClass.class.getField("eClass").getGenericType();
         Type fClassType = AClass.class.getField("fClass").getGenericType();
         AClass aClass = new AClass(new AAClass<String>());
         aClass.bClass = aClass.cClass;
         Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));
         aClass.bClass = aClass.dClass;
         Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));
         aClass.bClass = aClass.eClass;
         Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));
         aClass.bClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));
         aClass.cClass = aClass.dClass;
         Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));
         aClass.cClass = aClass.eClass;
         Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));
         aClass.cClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));
         aClass.dClass = aClass.eClass;
         Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));
         aClass.dClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));
         aClass.eClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));
     }
 

commit 5bf2ec5d1c22d386f9e014f60824f2bde44ef63e
Author: Sebastian Bazley <sebb@apache.org>
Date:   Thu Apr 7 16:09:31 2011

    Comment out useless self-assigns
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1089973 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
--- a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
@@ -107,335 +107,335 @@
     public void testIsAssignable() throws SecurityException, NoSuchMethodException,
             NoSuchFieldException {
         List list0 = null;
         List<Object> list1 = null;
         List<?> list2 = null;
         List<? super Object> list3 = null;
         List<String> list4 = null;
         List<? extends String> list5 = null;
         List<? super String> list6 = null;
         List[] list7 = null;
         List<Object>[] list8 = null;
         List<?>[] list9 = null;
         List<? super Object>[] list10 = null;
         List<String>[] list11 = null;
         List<? extends String>[] list12 = null;
         List<? super String>[] list13;
         Class<?> clazz = getClass();
         Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
                 List.class, List.class, List.class, List.class, List[].class, List[].class,
                 List[].class, List[].class, List[].class, List[].class, List[].class);
         Type[] types = method.getGenericParameterTypes();
-        list0 = list0;
+//        list0 = list0;
         delegateBooleanAssertion(types, 0, 0, true);
         list1 = list0;
         delegateBooleanAssertion(types, 0, 1, true);
         list0 = list1;
         delegateBooleanAssertion(types, 1, 0, true);
         list2 = list0;
         delegateBooleanAssertion(types, 0, 2, true);
         list0 = list2;
         delegateBooleanAssertion(types, 2, 0, true);
         list3 = list0;
         delegateBooleanAssertion(types, 0, 3, true);
         list0 = list3;
         delegateBooleanAssertion(types, 3, 0, true);
         list4 = list0;
         delegateBooleanAssertion(types, 0, 4, true);
         list0 = list4;
         delegateBooleanAssertion(types, 4, 0, true);
         list5 = list0;
         delegateBooleanAssertion(types, 0, 5, true);
         list0 = list5;
         delegateBooleanAssertion(types, 5, 0, true);
         list6 = list0;
         delegateBooleanAssertion(types, 0, 6, true);
         list0 = list6;
         delegateBooleanAssertion(types, 6, 0, true);
-        list1 = list1;
+//        list1 = list1;
         delegateBooleanAssertion(types, 1, 1, true);
         list2 = list1;
         delegateBooleanAssertion(types, 1, 2, true);
         list1 = (List<Object>) list2;
         delegateBooleanAssertion(types, 2, 1, false);
         list3 = list1;
         delegateBooleanAssertion(types, 1, 3, true);
         list1 = (List<Object>) list3;
         delegateBooleanAssertion(types, 3, 1, false);
         // list4 = list1;
         delegateBooleanAssertion(types, 1, 4, false);
         // list1 = list4;
         delegateBooleanAssertion(types, 4, 1, false);
         // list5 = list1;
         delegateBooleanAssertion(types, 1, 5, false);
         // list1 = list5;
         delegateBooleanAssertion(types, 5, 1, false);
         list6 = list1;
         delegateBooleanAssertion(types, 1, 6, true);
         list1 = (List<Object>) list6;
         delegateBooleanAssertion(types, 6, 1, false);
-        list2 = list2;
+//        list2 = list2;
         delegateBooleanAssertion(types, 2, 2, true);
         list2 = list3;
         delegateBooleanAssertion(types, 2, 3, false);
         list2 = list4;
         delegateBooleanAssertion(types, 3, 2, true);
         list3 = (List<? super Object>) list2;
         delegateBooleanAssertion(types, 2, 4, false);
         list2 = list5;
         delegateBooleanAssertion(types, 4, 2, true);
         list4 = (List<String>) list2;
         delegateBooleanAssertion(types, 2, 5, false);
         list2 = list6;
         delegateBooleanAssertion(types, 5, 2, true);
         list5 = (List<? extends String>) list2;
         delegateBooleanAssertion(types, 2, 6, false);
-        list3 = list3;
+//        list3 = list3;
         delegateBooleanAssertion(types, 6, 2, true);
         list6 = (List<? super String>) list2;
         delegateBooleanAssertion(types, 3, 3, true);
         // list4 = list3;
         delegateBooleanAssertion(types, 3, 4, false);
         // list3 = list4;
         delegateBooleanAssertion(types, 4, 3, false);
         // list5 = list3;
         delegateBooleanAssertion(types, 3, 5, false);
         // list3 = list5;
         delegateBooleanAssertion(types, 5, 3, false);
         list6 = list3;
         delegateBooleanAssertion(types, 3, 6, true);
         list3 = (List<? super Object>) list6;
         delegateBooleanAssertion(types, 6, 3, false);
-        list4 = list4;
+//        list4 = list4;
         delegateBooleanAssertion(types, 4, 4, true);
         list5 = list4;
         delegateBooleanAssertion(types, 4, 5, true);
         list4 = (List<String>) list5;
         delegateBooleanAssertion(types, 5, 4, false);
         list6 = list4;
         delegateBooleanAssertion(types, 4, 6, true);
         list4 = (List<String>) list6;
         delegateBooleanAssertion(types, 6, 4, false);
-        list5 = list5;
+//        list5 = list5;
         delegateBooleanAssertion(types, 5, 5, true);
         list6 = (List<? super String>) list5;
         delegateBooleanAssertion(types, 5, 6, false);
         list5 = (List<? extends String>) list6;
         delegateBooleanAssertion(types, 6, 5, false);
-        list6 = list6;
+//        list6 = list6;
         delegateBooleanAssertion(types, 6, 6, true);
 
-        list7 = list7;
+//        list7 = list7;
         delegateBooleanAssertion(types, 7, 7, true);
         list8 = list7;
         delegateBooleanAssertion(types, 7, 8, true);
         list7 = list8;
         delegateBooleanAssertion(types, 8, 7, true);
         list9 = list7;
         delegateBooleanAssertion(types, 7, 9, true);
         list7 = list9;
         delegateBooleanAssertion(types, 9, 7, true);
         list10 = list7;
         delegateBooleanAssertion(types, 7, 10, true);
         list7 = list10;
         delegateBooleanAssertion(types, 10, 7, true);
         list11 = list7;
         delegateBooleanAssertion(types, 7, 11, true);
         list7 = list11;
         delegateBooleanAssertion(types, 11, 7, true);
         list12 = list7;
         delegateBooleanAssertion(types, 7, 12, true);
         list7 = list12;
         delegateBooleanAssertion(types, 12, 7, true);
         list13 = list7;
         delegateBooleanAssertion(types, 7, 13, true);
         list7 = list13;
         delegateBooleanAssertion(types, 13, 7, true);
-        list8 = list8;
+//        list8 = list8;
         delegateBooleanAssertion(types, 8, 8, true);
         list9 = list8;
         delegateBooleanAssertion(types, 8, 9, true);
         list8 = (List<Object>[]) list9;
         delegateBooleanAssertion(types, 9, 8, false);
         list10 = list8;
         delegateBooleanAssertion(types, 8, 10, true);
-        list8 = (List<Object>[]) list10;
+        list8 = list10;
         delegateBooleanAssertion(types, 10, 8, false);
         // list11 = list8;
         delegateBooleanAssertion(types, 8, 11, false);
         // list8 = list11;
         delegateBooleanAssertion(types, 11, 8, false);
         // list12 = list8;
         delegateBooleanAssertion(types, 8, 12, false);
         // list8 = list12;
         delegateBooleanAssertion(types, 12, 8, false);
         list13 = list8;
         delegateBooleanAssertion(types, 8, 13, true);
         list8 = (List<Object>[]) list13;
         delegateBooleanAssertion(types, 13, 8, false);
-        list9 = list9;
+//        list9 = list9;
         delegateBooleanAssertion(types, 9, 9, true);
         list10 = (List<? super Object>[]) list9;
         delegateBooleanAssertion(types, 9, 10, false);
         list9 = list10;
         delegateBooleanAssertion(types, 10, 9, true);
         list11 = (List<String>[]) list9;
         delegateBooleanAssertion(types, 9, 11, false);
         list9 = list11;
         delegateBooleanAssertion(types, 11, 9, true);
         list12 = (List<? extends String>[]) list9;
         delegateBooleanAssertion(types, 9, 12, false);
         list9 = list12;
         delegateBooleanAssertion(types, 12, 9, true);
         list13 = (List<? super String>[]) list9;
         delegateBooleanAssertion(types, 9, 13, false);
         list9 = list13;
         delegateBooleanAssertion(types, 13, 9, true);
-        list10 = list10;
+//        list10 = list10;
         delegateBooleanAssertion(types, 10, 10, true);
         // list11 = list10;
         delegateBooleanAssertion(types, 10, 11, false);
         // list10 = list11;
         delegateBooleanAssertion(types, 11, 10, false);
         // list12 = list10;
         delegateBooleanAssertion(types, 10, 12, false);
         // list10 = list12;
         delegateBooleanAssertion(types, 12, 10, false);
         list13 = list10;
         delegateBooleanAssertion(types, 10, 13, true);
         list10 = (List<? super Object>[]) list13;
         delegateBooleanAssertion(types, 13, 10, false);
-        list11 = list11;
+//        list11 = list11;
         delegateBooleanAssertion(types, 11, 11, true);
         list12 = list11;
         delegateBooleanAssertion(types, 11, 12, true);
         list11 = (List<String>[]) list12;
         delegateBooleanAssertion(types, 12, 11, false);
         list13 = list11;
         delegateBooleanAssertion(types, 11, 13, true);
         list11 = (List<String>[]) list13;
         delegateBooleanAssertion(types, 13, 11, false);
-        list12 = list12;
+//        list12 = list12;
         delegateBooleanAssertion(types, 12, 12, true);
         list13 = (List<? super String>[]) list12;
         delegateBooleanAssertion(types, 12, 13, false);
         list12 = (List<? extends String>[]) list13;
         delegateBooleanAssertion(types, 13, 12, false);
-        list13 = list13;
+//        list13 = list13;
         delegateBooleanAssertion(types, 13, 13, true);
         Type disType = getClass().getField("dis").getGenericType();
         // Reporter.log( ( ( ParameterizedType ) disType
         // ).getOwnerType().getClass().toString() );
         Type datType = getClass().getField("dat").getGenericType();
         Type daType = getClass().getField("da").getGenericType();
         Type uhderType = getClass().getField("uhder").getGenericType();
         Type dingType = getClass().getField("ding").getGenericType();
         Type testerType = getClass().getField("tester").getGenericType();
         Type tester2Type = getClass().getField("tester2").getGenericType();
         Type dat2Type = getClass().getField("dat2").getGenericType();
         Type dat3Type = getClass().getField("dat3").getGenericType();
         dis = dat;
         Assert.assertTrue(TypeUtils.isAssignable(datType, disType));
         // dis = da;
         Assert.assertFalse(TypeUtils.isAssignable(daType, disType));
         dis = uhder;
         Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));
         dis = ding;
         Assert.assertTrue("WRONG!", TypeUtils.isAssignable(dingType, disType));
         dis = tester;
         Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));
         // dis = tester2;
         Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));
         // dat = dat2;
         Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));
         // dat2 = dat;
         Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));
         // dat = dat3;
         Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));
         char ch = 0;
         boolean bo = false;
         byte by = 0;
         short sh = 0;
         int in = 0;
         long lo = 0;
         float fl = 0;
         double du = 0;
         du = ch;
         Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));
         du = by;
         Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));
         du = sh;
         Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));
         du = in;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));
         du = lo;
         Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));
         du = fl;
         Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));
         // du = bo;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));
         lo = new Integer(0);
         Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));
         // Long lngW = 1;
         Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));
         // lngW = new Integer( 0 );
         Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));
         in = new Integer(0);
         Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));
         Integer inte = in;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));
         Type intComparableType = getClass().getField("intComparable").getGenericType();
         intComparable = 1;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));
         Serializable ser = 1;
         Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));
         Type longComparableType = getClass().getField("longComparable").getGenericType();
         // longComparable = 1;
         Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));
         // longComparable = new Integer( 0 );
         Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));
         // int[] ia;
         // long[] la = ia;
         Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));
         Integer[] ia = null;
         Type caType = getClass().getField("intWildcardComparable").getGenericType();
         intWildcardComparable = ia;
         Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));
         // int[] ina = ia;
         Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));
         int[] ina = null;
         Object[] oa;
         // oa = ina;
         Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));
         oa = new Integer[0];
         Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));
         Type bClassType = AClass.class.getField("bClass").getGenericType();
         Type cClassType = AClass.class.getField("cClass").getGenericType();
         Type dClassType = AClass.class.getField("dClass").getGenericType();
         Type eClassType = AClass.class.getField("eClass").getGenericType();
         Type fClassType = AClass.class.getField("fClass").getGenericType();
         AClass aClass = new AClass(new AAClass<String>());
         aClass.bClass = aClass.cClass;
         Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));
         aClass.bClass = aClass.dClass;
         Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));
         aClass.bClass = aClass.eClass;
         Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));
         aClass.bClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));
         aClass.cClass = aClass.dClass;
         Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));
         aClass.cClass = aClass.eClass;
         Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));
         aClass.cClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));
         aClass.dClass = aClass.eClass;
         Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));
         aClass.dClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));
         aClass.eClass = aClass.fClass;
         Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));
     }
 

commit f34b4cc34aff20638b56dcebc51601ccc61dae8f
Author: Matthew Jason Benson <mbenson@apache.org>
Date:   Tue Jul 13 15:56:45 2010

    [LANG-597] vastly expanded TypeUtils
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@963845 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
--- a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java
@@ -55,2 +111,335 @@
-    public void testGetRawTypeClass() throws Exception {
-        assertEquals(GenericParent.class, TypeUtils.getRawType(null, GenericParent.class));
+    public void testIsAssignable() throws SecurityException, NoSuchMethodException,
+            NoSuchFieldException {
+        List list0 = null;
+        List<Object> list1 = null;
+        List<?> list2 = null;
+        List<? super Object> list3 = null;
+        List<String> list4 = null;
+        List<? extends String> list5 = null;
+        List<? super String> list6 = null;
+        List[] list7 = null;
+        List<Object>[] list8 = null;
+        List<?>[] list9 = null;
+        List<? super Object>[] list10 = null;
+        List<String>[] list11 = null;
+        List<? extends String>[] list12 = null;
+        List<? super String>[] list13;
+        Class<?> clazz = getClass();
+        Method method = clazz.getMethod("dummyMethod", List.class, List.class, List.class,
+                List.class, List.class, List.class, List.class, List[].class, List[].class,
+                List[].class, List[].class, List[].class, List[].class, List[].class);
+        Type[] types = method.getGenericParameterTypes();
+        list0 = list0;
+        delegateBooleanAssertion(types, 0, 0, true);
+        list1 = list0;
+        delegateBooleanAssertion(types, 0, 1, true);
+        list0 = list1;
+        delegateBooleanAssertion(types, 1, 0, true);
+        list2 = list0;
+        delegateBooleanAssertion(types, 0, 2, true);
+        list0 = list2;
+        delegateBooleanAssertion(types, 2, 0, true);
+        list3 = list0;
+        delegateBooleanAssertion(types, 0, 3, true);
+        list0 = list3;
+        delegateBooleanAssertion(types, 3, 0, true);
+        list4 = list0;
+        delegateBooleanAssertion(types, 0, 4, true);
+        list0 = list4;
+        delegateBooleanAssertion(types, 4, 0, true);
+        list5 = list0;
+        delegateBooleanAssertion(types, 0, 5, true);
+        list0 = list5;
+        delegateBooleanAssertion(types, 5, 0, true);
+        list6 = list0;
+        delegateBooleanAssertion(types, 0, 6, true);
+        list0 = list6;
+        delegateBooleanAssertion(types, 6, 0, true);
+        list1 = list1;
+        delegateBooleanAssertion(types, 1, 1, true);
+        list2 = list1;
+        delegateBooleanAssertion(types, 1, 2, true);
+        list1 = (List<Object>) list2;
+        delegateBooleanAssertion(types, 2, 1, false);
+        list3 = list1;
+        delegateBooleanAssertion(types, 1, 3, true);
+        list1 = (List<Object>) list3;
+        delegateBooleanAssertion(types, 3, 1, false);
+        // list4 = list1;
+        delegateBooleanAssertion(types, 1, 4, false);
+        // list1 = list4;
+        delegateBooleanAssertion(types, 4, 1, false);
+        // list5 = list1;
+        delegateBooleanAssertion(types, 1, 5, false);
+        // list1 = list5;
+        delegateBooleanAssertion(types, 5, 1, false);
+        list6 = list1;
+        delegateBooleanAssertion(types, 1, 6, true);
+        list1 = (List<Object>) list6;
+        delegateBooleanAssertion(types, 6, 1, false);
+        list2 = list2;
+        delegateBooleanAssertion(types, 2, 2, true);
+        list2 = list3;
+        delegateBooleanAssertion(types, 2, 3, false);
+        list2 = list4;
+        delegateBooleanAssertion(types, 3, 2, true);
+        list3 = (List<? super Object>) list2;
+        delegateBooleanAssertion(types, 2, 4, false);
+        list2 = list5;
+        delegateBooleanAssertion(types, 4, 2, true);
+        list4 = (List<String>) list2;
+        delegateBooleanAssertion(types, 2, 5, false);
+        list2 = list6;
+        delegateBooleanAssertion(types, 5, 2, true);
+        list5 = (List<? extends String>) list2;
+        delegateBooleanAssertion(types, 2, 6, false);
+        list3 = list3;
+        delegateBooleanAssertion(types, 6, 2, true);
+        list6 = (List<? super String>) list2;
+        delegateBooleanAssertion(types, 3, 3, true);
+        // list4 = list3;
+        delegateBooleanAssertion(types, 3, 4, false);
+        // list3 = list4;
+        delegateBooleanAssertion(types, 4, 3, false);
+        // list5 = list3;
+        delegateBooleanAssertion(types, 3, 5, false);
+        // list3 = list5;
+        delegateBooleanAssertion(types, 5, 3, false);
+        list6 = list3;
+        delegateBooleanAssertion(types, 3, 6, true);
+        list3 = (List<? super Object>) list6;
+        delegateBooleanAssertion(types, 6, 3, false);
+        list4 = list4;
+        delegateBooleanAssertion(types, 4, 4, true);
+        list5 = list4;
+        delegateBooleanAssertion(types, 4, 5, true);
+        list4 = (List<String>) list5;
+        delegateBooleanAssertion(types, 5, 4, false);
+        list6 = list4;
+        delegateBooleanAssertion(types, 4, 6, true);
+        list4 = (List<String>) list6;
+        delegateBooleanAssertion(types, 6, 4, false);
+        list5 = list5;
+        delegateBooleanAssertion(types, 5, 5, true);
+        list6 = (List<? super String>) list5;
+        delegateBooleanAssertion(types, 5, 6, false);
+        list5 = (List<? extends String>) list6;
+        delegateBooleanAssertion(types, 6, 5, false);
+        list6 = list6;
+        delegateBooleanAssertion(types, 6, 6, true);
+
+        list7 = list7;
+        delegateBooleanAssertion(types, 7, 7, true);
+        list8 = list7;
+        delegateBooleanAssertion(types, 7, 8, true);
+        list7 = list8;
+        delegateBooleanAssertion(types, 8, 7, true);
+        list9 = list7;
+        delegateBooleanAssertion(types, 7, 9, true);
+        list7 = list9;
+        delegateBooleanAssertion(types, 9, 7, true);
+        list10 = list7;
+        delegateBooleanAssertion(types, 7, 10, true);
+        list7 = list10;
+        delegateBooleanAssertion(types, 10, 7, true);
+        list11 = list7;
+        delegateBooleanAssertion(types, 7, 11, true);
+        list7 = list11;
+        delegateBooleanAssertion(types, 11, 7, true);
+        list12 = list7;
+        delegateBooleanAssertion(types, 7, 12, true);
+        list7 = list12;
+        delegateBooleanAssertion(types, 12, 7, true);
+        list13 = list7;
+        delegateBooleanAssertion(types, 7, 13, true);
+        list7 = list13;
+        delegateBooleanAssertion(types, 13, 7, true);
+        list8 = list8;
+        delegateBooleanAssertion(types, 8, 8, true);
+        list9 = list8;
+        delegateBooleanAssertion(types, 8, 9, true);
+        list8 = (List<Object>[]) list9;
+        delegateBooleanAssertion(types, 9, 8, false);
+        list10 = list8;
+        delegateBooleanAssertion(types, 8, 10, true);
+        list8 = (List<Object>[]) list10;
+        delegateBooleanAssertion(types, 10, 8, false);
+        // list11 = list8;
+        delegateBooleanAssertion(types, 8, 11, false);
+        // list8 = list11;
+        delegateBooleanAssertion(types, 11, 8, false);
+        // list12 = list8;
+        delegateBooleanAssertion(types, 8, 12, false);
+        // list8 = list12;
+        delegateBooleanAssertion(types, 12, 8, false);
+        list13 = list8;
+        delegateBooleanAssertion(types, 8, 13, true);
+        list8 = (List<Object>[]) list13;
+        delegateBooleanAssertion(types, 13, 8, false);
+        list9 = list9;
+        delegateBooleanAssertion(types, 9, 9, true);
+        list10 = (List<? super Object>[]) list9;
+        delegateBooleanAssertion(types, 9, 10, false);
+        list9 = list10;
+        delegateBooleanAssertion(types, 10, 9, true);
+        list11 = (List<String>[]) list9;
+        delegateBooleanAssertion(types, 9, 11, false);
+        list9 = list11;
+        delegateBooleanAssertion(types, 11, 9, true);
+        list12 = (List<? extends String>[]) list9;
+        delegateBooleanAssertion(types, 9, 12, false);
+        list9 = list12;
+        delegateBooleanAssertion(types, 12, 9, true);
+        list13 = (List<? super String>[]) list9;
+        delegateBooleanAssertion(types, 9, 13, false);
+        list9 = list13;
+        delegateBooleanAssertion(types, 13, 9, true);
+        list10 = list10;
+        delegateBooleanAssertion(types, 10, 10, true);
+        // list11 = list10;
+        delegateBooleanAssertion(types, 10, 11, false);
+        // list10 = list11;
+        delegateBooleanAssertion(types, 11, 10, false);
+        // list12 = list10;
+        delegateBooleanAssertion(types, 10, 12, false);
+        // list10 = list12;
+        delegateBooleanAssertion(types, 12, 10, false);
+        list13 = list10;
+        delegateBooleanAssertion(types, 10, 13, true);
+        list10 = (List<? super Object>[]) list13;
+        delegateBooleanAssertion(types, 13, 10, false);
+        list11 = list11;
+        delegateBooleanAssertion(types, 11, 11, true);
+        list12 = list11;
+        delegateBooleanAssertion(types, 11, 12, true);
+        list11 = (List<String>[]) list12;
+        delegateBooleanAssertion(types, 12, 11, false);
+        list13 = list11;
+        delegateBooleanAssertion(types, 11, 13, true);
+        list11 = (List<String>[]) list13;
+        delegateBooleanAssertion(types, 13, 11, false);
+        list12 = list12;
+        delegateBooleanAssertion(types, 12, 12, true);
+        list13 = (List<? super String>[]) list12;
+        delegateBooleanAssertion(types, 12, 13, false);
+        list12 = (List<? extends String>[]) list13;
+        delegateBooleanAssertion(types, 13, 12, false);
+        list13 = list13;
+        delegateBooleanAssertion(types, 13, 13, true);
+        Type disType = getClass().getField("dis").getGenericType();
+        // Reporter.log( ( ( ParameterizedType ) disType
+        // ).getOwnerType().getClass().toString() );
+        Type datType = getClass().getField("dat").getGenericType();
+        Type daType = getClass().getField("da").getGenericType();
+        Type uhderType = getClass().getField("uhder").getGenericType();
+        Type dingType = getClass().getField("ding").getGenericType();
+        Type testerType = getClass().getField("tester").getGenericType();
+        Type tester2Type = getClass().getField("tester2").getGenericType();
+        Type dat2Type = getClass().getField("dat2").getGenericType();
+        Type dat3Type = getClass().getField("dat3").getGenericType();
+        dis = dat;
+        Assert.assertTrue(TypeUtils.isAssignable(datType, disType));
+        // dis = da;
+        Assert.assertFalse(TypeUtils.isAssignable(daType, disType));
+        dis = uhder;
+        Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));
+        dis = ding;
+        Assert.assertTrue("WRONG!", TypeUtils.isAssignable(dingType, disType));
+        dis = tester;
+        Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));
+        // dis = tester2;
+        Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));
+        // dat = dat2;
+        Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));
+        // dat2 = dat;
+        Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));
+        // dat = dat3;
+        Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));
+        char ch = 0;
+        boolean bo = false;
+        byte by = 0;
+        short sh = 0;
+        int in = 0;
+        long lo = 0;
+        float fl = 0;
+        double du = 0;
+        du = ch;
+        Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));
+        du = by;
+        Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));
+        du = sh;
+        Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));
+        du = in;
+        Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));
+        du = lo;
+        Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));
+        du = fl;
+        Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));
+        // du = bo;
+        Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));
+        lo = new Integer(0);
+        Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));
+        // Long lngW = 1;
+        Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));
+        // lngW = new Integer( 0 );
+        Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));
+        in = new Integer(0);
+        Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));
+        Integer inte = in;
+        Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));
+        Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));
+        Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));
+        Type intComparableType = getClass().getField("intComparable").getGenericType();
+        intComparable = 1;
+        Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));
+        Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));
+        Serializable ser = 1;
+        Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));
+        Type longComparableType = getClass().getField("longComparable").getGenericType();
+        // longComparable = 1;
+        Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));
+        // longComparable = new Integer( 0 );
+        Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));
+        // int[] ia;
+        // long[] la = ia;
+        Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));
+        Integer[] ia = null;
+        Type caType = getClass().getField("intWildcardComparable").getGenericType();
+        intWildcardComparable = ia;
+        Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));
+        // int[] ina = ia;
+        Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));
+        int[] ina = null;
+        Object[] oa;
+        // oa = ina;
+        Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));
+        oa = new Integer[0];
+        Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));
+        Type bClassType = AClass.class.getField("bClass").getGenericType();
+        Type cClassType = AClass.class.getField("cClass").getGenericType();
+        Type dClassType = AClass.class.getField("dClass").getGenericType();
+        Type eClassType = AClass.class.getField("eClass").getGenericType();
+        Type fClassType = AClass.class.getField("fClass").getGenericType();
+        AClass aClass = new AClass(new AAClass<String>());
+        aClass.bClass = aClass.cClass;
+        Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));
+        aClass.bClass = aClass.dClass;
+        Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));
+        aClass.bClass = aClass.eClass;
+        Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));
+        aClass.bClass = aClass.fClass;
+        Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));
+        aClass.cClass = aClass.dClass;
+        Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));
+        aClass.cClass = aClass.eClass;
+        Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));
+        aClass.cClass = aClass.fClass;
+        Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));
+        aClass.dClass = aClass.eClass;
+        Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));
+        aClass.dClass = aClass.fClass;
+        Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));
+        aClass.eClass = aClass.fClass;
+        Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));
+    }
+

commit ef3ceb82630eb2e0244780e6f5281bacf5f88191
Author: Matthew Jason Benson <mbenson@apache.org>
Date:   Fri Nov 13 15:17:47 2009

    [LANG-553] Add TypeUtils
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@835975 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java b/src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java
--- /dev/null
+++ b/src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java
@@ -0,0 +55,2 @@
+    public void testGetRawTypeClass() throws Exception {
+        assertEquals(GenericParent.class, TypeUtils.getRawType(null, GenericParent.class));
