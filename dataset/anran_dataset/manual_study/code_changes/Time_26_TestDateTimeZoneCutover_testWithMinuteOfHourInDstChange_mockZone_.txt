commit c7a581e55fc988bd90fa4bb1b0acece5181b7c5f
Author: Stephen Colebourne <scolebourne@joda.org>
Date:   Sun Dec 5 16:27:36 2010

    DateTimeZone.convertLocalToUTC [bugs 3102760,2182444,2553453]
    New method now retains the offset wherever possible during calculations
    This affects higher methods like withHourOfDay/withMinuteOfHour/withSecondOfMinute/withMillisOfSecond which now do not change offset when called within a DST overlap
    
    git-svn-id: https://joda-time.svn.sourceforge.net/svnroot/joda-time/trunk@1595 1e1cfbb7-5c0e-0410-a2f0-f98d92ec03a1

diff --git a/JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java b/JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java
--- a/JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java
+++ b/JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java
@@ -1061,0 +1063,20 @@
+    public void testWithMinuteOfHourInDstChange_mockZone() {
+        DateTime cutover = new DateTime(2010, 10, 31, 1, 15, DateTimeZone.forOffsetHoursMinutes(0, 30));
+        assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString());
+        DateTimeZone halfHourZone = new MockZone(cutover.getMillis(), 3600000, -1800);
+        DateTime pre = new DateTime(2010, 10, 31, 1, 0, halfHourZone);
+        assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString());
+        DateTime post = new DateTime(2010, 10, 31, 1, 59, halfHourZone);
+        assertEquals("2010-10-31T01:59:00.000+00:30", post.toString());
+        
+        DateTime testPre1 = pre.withMinuteOfHour(30);
+        assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString());  // retain offset
+        DateTime testPre2 = pre.withMinuteOfHour(50);
+        assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString());
+        
+        DateTime testPost1 = post.withMinuteOfHour(30);
+        assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString());  // retain offset
+        DateTime testPost2 = post.withMinuteOfHour(10);
+        assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString());
+    }
+
