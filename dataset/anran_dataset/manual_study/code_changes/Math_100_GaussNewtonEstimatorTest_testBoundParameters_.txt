commit 876d133334e8dde309cc11f884c0dd4cc9ce530e
Author: Luc Maisonobe <luc@apache.org>
Date:   Fri Mar 28 16:06:54 2008

    fixed crashes in AbstractEstimator when some parameters are bound.
    getCovariances() and guessParametersErrors() now only give result
    about unbound parameters
    JIRA: MATH-200
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@642357 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java b/src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java
--- a/src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java
+++ b/src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java
@@ -451,0 +451,38 @@
+  public void testBoundParameters() throws EstimationException {
+      EstimatedParameter[] p = {
+        new EstimatedParameter("unbound0", 2, false),
+        new EstimatedParameter("unbound1", 2, false),
+        new EstimatedParameter("bound",    2, true)
+      };
+      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {
+        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },
+                              new EstimatedParameter[] { p[0], p[1], p[2] },
+                              3.0),
+        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },
+                              new EstimatedParameter[] { p[0], p[1], p[2] },
+                              1.0),
+        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },
+                              new EstimatedParameter[] { p[0], p[1], p[2] },
+                              7.0)
+      });
+
+      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);
+      estimator.estimate(problem);
+      assertTrue(estimator.getRMS(problem) < 1.0e-10);
+      double[][] covariances = estimator.getCovariances(problem);
+      int i0 = 0, i1 = 1;
+      if (problem.getUnboundParameters()[0].getName().endsWith("1")) {
+          i0 = 1;
+          i1 = 0;
+      }
+      assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);
+      assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);
+      assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);
+      assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);
+
+      double[] errors = estimator.guessParametersErrors(problem);
+      assertEquals(0, errors[i0], 1.0e-10);
+      assertEquals(0, errors[i1], 1.0e-10);
+
+  }
+
