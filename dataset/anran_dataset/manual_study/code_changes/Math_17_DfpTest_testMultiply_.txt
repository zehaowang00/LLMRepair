commit 621806b796bc416f00341feca894ebae07be5ed0
Author: Thomas Neidhart <tn@apache.org>
Date:   Sun Oct 21 12:22:50 2012

    [MATH-778] Allow unlimited input values for Dfp#multiply.
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1400671 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/math3/dfp/DfpTest.java b/src/test/java/org/apache/commons/math3/dfp/DfpTest.java
--- a/src/test/java/org/apache/commons/math3/dfp/DfpTest.java
+++ b/src/test/java/org/apache/commons/math3/dfp/DfpTest.java
@@ -756,163 +756,167 @@
     public void testMultiply()
     {
         test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
              field.newDfp("1"),
              0, "Multiply #1");
 
         test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
              field.newDfp("1"),
              0, "Multiply #2");
 
         test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
              field.newDfp("-1"),
              0, "Multiply #3");
 
         test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
              field.newDfp("-1"),
              0, "Multiply #4");
 
         // basic tests with integers
         test(field.newDfp("2").multiply(field.newDfp("3")),
              field.newDfp("6"),
              0, "Multiply #5");
 
         test(field.newDfp("2").multiply(3),
              field.newDfp("6"),
              0, "Multiply #6");
 
         test(field.newDfp("-2").multiply(field.newDfp("3")),
              field.newDfp("-6"),
              0, "Multiply #7");
 
         test(field.newDfp("-2").multiply(3),
              field.newDfp("-6"),
              0, "Multiply #8");
 
         test(field.newDfp("2").multiply(field.newDfp("-3")),
              field.newDfp("-6"),
              0, "Multiply #9");
 
         test(field.newDfp("-2").multiply(field.newDfp("-3")),
              field.newDfp("6"),
              0, "Multiply #10");
 
         //multiply by zero
 
         test(field.newDfp("-2").multiply(field.newDfp("0")),
              field.newDfp("-0"),
              0, "Multiply #11");
 
         test(field.newDfp("-2").multiply(0),
              field.newDfp("-0"),
              0, "Multiply #12");
 
         test(field.newDfp("2").multiply(field.newDfp("0")),
              field.newDfp("0"),
              0, "Multiply #13");
 
         test(field.newDfp("2").multiply(0),
              field.newDfp("0"),
              0, "Multiply #14");
 
         test(field.newDfp("2").multiply(pinf),
              pinf,
              0, "Multiply #15");
 
         test(field.newDfp("2").multiply(ninf),
              ninf,
              0, "Multiply #16");
 
         test(field.newDfp("-2").multiply(pinf),
              ninf,
              0, "Multiply #17");
 
         test(field.newDfp("-2").multiply(ninf),
              pinf,
              0, "Multiply #18");
 
         test(ninf.multiply(field.newDfp("-2")),
              pinf,
              0, "Multiply #18.1");
 
         test(field.newDfp("5e131071").multiply(2),
              pinf,
              DfpField.FLAG_OVERFLOW, "Multiply #19");
 
         test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
              field.newDfp("9.9999999999999950000e131071"),
              0, "Multiply #20");
 
         test(field.newDfp("-5e131071").multiply(2),
              ninf,
              DfpField.FLAG_OVERFLOW, "Multiply #22");
 
         test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
              field.newDfp("-9.9999999999999950000e131071"),
              0, "Multiply #23");
 
         test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
              field.newDfp("1e-131078"),
              DfpField.FLAG_UNDERFLOW, "Multiply #24");
 
         test(field.newDfp("1").multiply(nan),
              nan,
              0, "Multiply #25");
 
         test(nan.multiply(field.newDfp("1")),
              nan,
              0, "Multiply #26");
 
         test(nan.multiply(pinf),
              nan,
              0, "Multiply #27");
 
         test(pinf.multiply(nan),
              nan,
              0, "Multiply #27");
 
         test(pinf.multiply(field.newDfp("0")),
              nan,
              DfpField.FLAG_INVALID, "Multiply #28");
 
         test(field.newDfp("0").multiply(pinf),
              nan,
              DfpField.FLAG_INVALID, "Multiply #29");
 
         test(pinf.multiply(pinf),
              pinf,
              0, "Multiply #30");
 
         test(ninf.multiply(pinf),
              ninf,
              0, "Multiply #31");
 
         test(pinf.multiply(ninf),
              ninf,
              0, "Multiply #32");
 
         test(ninf.multiply(ninf),
              pinf,
              0, "Multiply #33");
 
         test(pinf.multiply(1),
              pinf,
              0, "Multiply #34");
 
         test(pinf.multiply(0),
              nan,
              DfpField.FLAG_INVALID, "Multiply #35");
 
         test(nan.multiply(1),
              nan,
              0, "Multiply #36");
 
-        test(field.newDfp("1").multiply(10000),  // out of range
-             nan,
-             DfpField.FLAG_INVALID, "Multiply #37");
+        test(field.newDfp("1").multiply(10000),
+             field.newDfp("10000"),
+             0, "Multiply #37");
 
-        test(field.newDfp("1").multiply(-1),  // out of range
-             nan,
-             DfpField.FLAG_INVALID, "Multiply #38");
+        test(field.newDfp("2").multiply(1000000),
+             field.newDfp("2000000"),
+             0, "Multiply #38");
+
+        test(field.newDfp("1").multiply(-1),
+             field.newDfp("-1"),
+             0, "Multiply #39");
     }
 
     @Test

commit 60d96e0ee72180da2c9b89e1acc66033253f0237
Author: Sebastien Brisard <celestin@apache.org>
Date:   Sat Oct 8 00:21:00 2011

    Added FieldElement.negate() and FieldElement.reciprocal() (MATH-686).
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1180312 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/math/dfp/DfpTest.java b/src/test/java/org/apache/commons/math/dfp/DfpTest.java
--- a/src/test/java/org/apache/commons/math/dfp/DfpTest.java
+++ b/src/test/java/org/apache/commons/math/dfp/DfpTest.java
@@ -756,163 +756,163 @@
     public void testMultiply()
     {
         test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
-             field.newDfp("1"), 
+             field.newDfp("1"),
              0, "Multiply #1");
 
         test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
-             field.newDfp("1"), 
+             field.newDfp("1"),
              0, "Multiply #2");
 
         test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
-             field.newDfp("-1"), 
+             field.newDfp("-1"),
              0, "Multiply #3");
 
         test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
-             field.newDfp("-1"), 
+             field.newDfp("-1"),
              0, "Multiply #4");
 
         // basic tests with integers
         test(field.newDfp("2").multiply(field.newDfp("3")),
-             field.newDfp("6"), 
+             field.newDfp("6"),
              0, "Multiply #5");
 
         test(field.newDfp("2").multiply(3),
-             field.newDfp("6"), 
+             field.newDfp("6"),
              0, "Multiply #6");
 
         test(field.newDfp("-2").multiply(field.newDfp("3")),
-             field.newDfp("-6"), 
+             field.newDfp("-6"),
              0, "Multiply #7");
 
         test(field.newDfp("-2").multiply(3),
-             field.newDfp("-6"), 
+             field.newDfp("-6"),
              0, "Multiply #8");
 
         test(field.newDfp("2").multiply(field.newDfp("-3")),
-             field.newDfp("-6"), 
+             field.newDfp("-6"),
              0, "Multiply #9");
 
         test(field.newDfp("-2").multiply(field.newDfp("-3")),
-             field.newDfp("6"), 
+             field.newDfp("6"),
              0, "Multiply #10");
 
         //multiply by zero
 
         test(field.newDfp("-2").multiply(field.newDfp("0")),
-             field.newDfp("-0"), 
+             field.newDfp("-0"),
              0, "Multiply #11");
 
         test(field.newDfp("-2").multiply(0),
-             field.newDfp("-0"), 
+             field.newDfp("-0"),
              0, "Multiply #12");
 
         test(field.newDfp("2").multiply(field.newDfp("0")),
-             field.newDfp("0"), 
+             field.newDfp("0"),
              0, "Multiply #13");
 
         test(field.newDfp("2").multiply(0),
-             field.newDfp("0"), 
+             field.newDfp("0"),
              0, "Multiply #14");
 
         test(field.newDfp("2").multiply(pinf),
              pinf,
              0, "Multiply #15");
 
         test(field.newDfp("2").multiply(ninf),
              ninf,
              0, "Multiply #16");
 
         test(field.newDfp("-2").multiply(pinf),
              ninf,
              0, "Multiply #17");
 
         test(field.newDfp("-2").multiply(ninf),
              pinf,
              0, "Multiply #18");
 
         test(ninf.multiply(field.newDfp("-2")),
              pinf,
              0, "Multiply #18.1");
 
         test(field.newDfp("5e131071").multiply(2),
              pinf,
-             DfpField.FLAG_OVERFLOW, "Multiply #19");        
+             DfpField.FLAG_OVERFLOW, "Multiply #19");
 
         test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
              field.newDfp("9.9999999999999950000e131071"),
-             0, "Multiply #20");        
+             0, "Multiply #20");
 
         test(field.newDfp("-5e131071").multiply(2),
              ninf,
-             DfpField.FLAG_OVERFLOW, "Multiply #22");        
+             DfpField.FLAG_OVERFLOW, "Multiply #22");
 
         test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
              field.newDfp("-9.9999999999999950000e131071"),
-             0, "Multiply #23");        
+             0, "Multiply #23");
 
         test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
              field.newDfp("1e-131078"),
              DfpField.FLAG_UNDERFLOW, "Multiply #24");
 
         test(field.newDfp("1").multiply(nan),
              nan,
              0, "Multiply #25");
 
         test(nan.multiply(field.newDfp("1")),
              nan,
              0, "Multiply #26");
 
         test(nan.multiply(pinf),
              nan,
              0, "Multiply #27");
 
         test(pinf.multiply(nan),
              nan,
              0, "Multiply #27");
 
         test(pinf.multiply(field.newDfp("0")),
              nan,
              DfpField.FLAG_INVALID, "Multiply #28");
 
         test(field.newDfp("0").multiply(pinf),
              nan,
              DfpField.FLAG_INVALID, "Multiply #29");
 
         test(pinf.multiply(pinf),
              pinf,
              0, "Multiply #30");
 
         test(ninf.multiply(pinf),
              ninf,
              0, "Multiply #31");
 
         test(pinf.multiply(ninf),
              ninf,
              0, "Multiply #32");
 
         test(ninf.multiply(ninf),
              pinf,
              0, "Multiply #33");
 
         test(pinf.multiply(1),
              pinf,
              0, "Multiply #34");
 
         test(pinf.multiply(0),
              nan,
              DfpField.FLAG_INVALID, "Multiply #35");
 
         test(nan.multiply(1),
              nan,
              0, "Multiply #36");
 
         test(field.newDfp("1").multiply(10000),  // out of range
              nan,
              DfpField.FLAG_INVALID, "Multiply #37");
 
         test(field.newDfp("1").multiply(-1),  // out of range
              nan,
              DfpField.FLAG_INVALID, "Multiply #38");
     }
 
     @Test

commit 1eb0c0d7421823470de3a901643ae3be2c9e0a8e
Author: Luc Maisonobe <luc@apache.org>
Date:   Sat Sep 4 18:59:21 2010

    added the dfp library
    The Dfp class represent the high precision numbers, it implements our existing Field interface and hence each instance is associated with a DfpField that provides the constants at the required precision as well as factory methods. This allowed to remove the compile-time constraint in the library. Users can even use at the same time a field for 20 decimals digits precision and another field for 100 digits precision. Dfp instances with different precision CANNOT be mixed in the same computation (doing so creates a NaN). A few utility methods have been added, like constructors from integral types, isInfinite and isNaN methods, equal has been renames to equals and its signature changed to match the general Object method (a hashcode method has been added too).
    JIRA: MATH-412
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@992697 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/math/dfp/DfpTest.java b/src/test/java/org/apache/commons/math/dfp/DfpTest.java
--- /dev/null
+++ b/src/test/java/org/apache/commons/math/dfp/DfpTest.java
@@ -0,0 +754,163 @@
+    public void testMultiply()
+    {
+        test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
+             field.newDfp("1"), 
+             0, "Multiply #1");
+
+        test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
+             field.newDfp("1"), 
+             0, "Multiply #2");
+
+        test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
+             field.newDfp("-1"), 
+             0, "Multiply #3");
+
+        test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
+             field.newDfp("-1"), 
+             0, "Multiply #4");
+
+        // basic tests with integers
+        test(field.newDfp("2").multiply(field.newDfp("3")),
+             field.newDfp("6"), 
+             0, "Multiply #5");
+
+        test(field.newDfp("2").multiply(3),
+             field.newDfp("6"), 
+             0, "Multiply #6");
+
+        test(field.newDfp("-2").multiply(field.newDfp("3")),
+             field.newDfp("-6"), 
+             0, "Multiply #7");
+
+        test(field.newDfp("-2").multiply(3),
+             field.newDfp("-6"), 
+             0, "Multiply #8");
+
+        test(field.newDfp("2").multiply(field.newDfp("-3")),
+             field.newDfp("-6"), 
+             0, "Multiply #9");
+
+        test(field.newDfp("-2").multiply(field.newDfp("-3")),
+             field.newDfp("6"), 
+             0, "Multiply #10");
+
+        //multiply by zero
+
+        test(field.newDfp("-2").multiply(field.newDfp("0")),
+             field.newDfp("-0"), 
+             0, "Multiply #11");
+
+        test(field.newDfp("-2").multiply(0),
+             field.newDfp("-0"), 
+             0, "Multiply #12");
+
+        test(field.newDfp("2").multiply(field.newDfp("0")),
+             field.newDfp("0"), 
+             0, "Multiply #13");
+
+        test(field.newDfp("2").multiply(0),
+             field.newDfp("0"), 
+             0, "Multiply #14");
+
+        test(field.newDfp("2").multiply(pinf),
+             pinf,
+             0, "Multiply #15");
+
+        test(field.newDfp("2").multiply(ninf),
+             ninf,
+             0, "Multiply #16");
+
+        test(field.newDfp("-2").multiply(pinf),
+             ninf,
+             0, "Multiply #17");
+
+        test(field.newDfp("-2").multiply(ninf),
+             pinf,
+             0, "Multiply #18");
+
+        test(ninf.multiply(field.newDfp("-2")),
+             pinf,
+             0, "Multiply #18.1");
+
+        test(field.newDfp("5e131071").multiply(2),
+             pinf,
+             DfpField.FLAG_OVERFLOW, "Multiply #19");        
+
+        test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
+             field.newDfp("9.9999999999999950000e131071"),
+             0, "Multiply #20");        
+
+        test(field.newDfp("-5e131071").multiply(2),
+             ninf,
+             DfpField.FLAG_OVERFLOW, "Multiply #22");        
+
+        test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
+             field.newDfp("-9.9999999999999950000e131071"),
+             0, "Multiply #23");        
+
+        test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
+             field.newDfp("1e-131078"),
+             DfpField.FLAG_UNDERFLOW, "Multiply #24");
+
+        test(field.newDfp("1").multiply(nan),
+             nan,
+             0, "Multiply #25");
+
+        test(nan.multiply(field.newDfp("1")),
+             nan,
+             0, "Multiply #26");
+
+        test(nan.multiply(pinf),
+             nan,
+             0, "Multiply #27");
+
+        test(pinf.multiply(nan),
+             nan,
+             0, "Multiply #27");
+
+        test(pinf.multiply(field.newDfp("0")),
+             nan,
+             DfpField.FLAG_INVALID, "Multiply #28");
+
+        test(field.newDfp("0").multiply(pinf),
+             nan,
+             DfpField.FLAG_INVALID, "Multiply #29");
+
+        test(pinf.multiply(pinf),
+             pinf,
+             0, "Multiply #30");
+
+        test(ninf.multiply(pinf),
+             ninf,
+             0, "Multiply #31");
+
+        test(pinf.multiply(ninf),
+             ninf,
+             0, "Multiply #32");
+
+        test(ninf.multiply(ninf),
+             pinf,
+             0, "Multiply #33");
+
+        test(pinf.multiply(1),
+             pinf,
+             0, "Multiply #34");
+
+        test(pinf.multiply(0),
+             nan,
+             DfpField.FLAG_INVALID, "Multiply #35");
+
+        test(nan.multiply(1),
+             nan,
+             0, "Multiply #36");
+
+        test(field.newDfp("1").multiply(10000),  // out of range
+             nan,
+             DfpField.FLAG_INVALID, "Multiply #37");
+
+        test(field.newDfp("1").multiply(-1),  // out of range
+             nan,
+             DfpField.FLAG_INVALID, "Multiply #38");
+    }
+
+    @Test
