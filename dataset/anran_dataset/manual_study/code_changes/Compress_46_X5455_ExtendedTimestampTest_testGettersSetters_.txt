commit cd1d329dba95dae161317c123269c24282001a66
Author: Simon Spero <sesuncedu@gmail.com>
Date:   Mon Jul 3 19:10:10 2017

    COMPRESS-416 Use signed integers for extended timestamps, per spec
    
    Signed-off-by: Simon Spero <sesuncedu@gmail.com>

diff --git a/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java b/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java
--- a/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java
@@ -229,141 +197,143 @@
     public void testGettersSetters() {
         // X5455 is concerned with time, so let's
         // get a timestamp to play with (Jan 1st, 2000).
         final Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
         cal.set(Calendar.YEAR, 2000);
         cal.set(Calendar.MONTH, Calendar.JANUARY);
         cal.set(Calendar.DATE, 1);
         cal.set(Calendar.HOUR_OF_DAY, 0);
         cal.set(Calendar.MINUTE, 0);
+        cal.set(Calendar.SECOND, 0);
         cal.set(Calendar.MILLISECOND, 0);
-        final Date timeMillis = cal.getTime();
-        final ZipLong time = new ZipLong(timeMillis.getTime() / 1000);
+        final long timeMillis = cal.getTimeInMillis();
+        final ZipLong time = new ZipLong(timeMillis / 1000);
 
         // set too big
         try {
             // Java time is 1000 x larger (milliseconds).
             xf.setModifyJavaTime(new Date(1000L * (MAX_TIME_SECONDS.getValue() + 1L)));
             fail("Time too big for 32 bits!");
         } catch (final IllegalArgumentException iae) {
             // All is good.
         }
 
         // get/set modify time
         xf.setModifyTime(time);
         assertEquals(time, xf.getModifyTime());
-        assertEquals(timeMillis, xf.getModifyJavaTime());
-        xf.setModifyJavaTime(timeMillis);
+        Date xfModifyJavaTime = xf.getModifyJavaTime();
+        assertEquals(timeMillis, xfModifyJavaTime.getTime());
+        xf.setModifyJavaTime(new Date(timeMillis));
         assertEquals(time, xf.getModifyTime());
-        assertEquals(timeMillis, xf.getModifyJavaTime());
+        assertEquals(timeMillis, xf.getModifyJavaTime().getTime());
         // Make sure milliseconds get zeroed out:
-        xf.setModifyJavaTime(new Date(timeMillis.getTime() + 123));
+        xf.setModifyJavaTime(new Date(timeMillis + 123));
         assertEquals(time, xf.getModifyTime());
-        assertEquals(timeMillis, xf.getModifyJavaTime());
+        assertEquals(timeMillis, xf.getModifyJavaTime().getTime());
         // Null
         xf.setModifyTime(null);
         assertNull(xf.getModifyJavaTime());
         xf.setModifyJavaTime(null);
         assertNull(xf.getModifyTime());
 
         // get/set access time
         xf.setAccessTime(time);
         assertEquals(time, xf.getAccessTime());
-        assertEquals(timeMillis, xf.getAccessJavaTime());
-        xf.setAccessJavaTime(timeMillis);
+        assertEquals(timeMillis, xf.getAccessJavaTime().getTime());
+        xf.setAccessJavaTime(new Date(timeMillis));
         assertEquals(time, xf.getAccessTime());
-        assertEquals(timeMillis, xf.getAccessJavaTime());
+        assertEquals(timeMillis, xf.getAccessJavaTime().getTime());
         // Make sure milliseconds get zeroed out:
-        xf.setAccessJavaTime(new Date(timeMillis.getTime() + 123));
+        xf.setAccessJavaTime(new Date(timeMillis + 123));
         assertEquals(time, xf.getAccessTime());
-        assertEquals(timeMillis, xf.getAccessJavaTime());
+        assertEquals(timeMillis, xf.getAccessJavaTime().getTime());
         // Null
         xf.setAccessTime(null);
         assertNull(xf.getAccessJavaTime());
         xf.setAccessJavaTime(null);
         assertNull(xf.getAccessTime());
 
         // get/set create time
         xf.setCreateTime(time);
         assertEquals(time, xf.getCreateTime());
-        assertEquals(timeMillis, xf.getCreateJavaTime());
-        xf.setCreateJavaTime(timeMillis);
+        assertEquals(timeMillis, xf.getCreateJavaTime().getTime());
+        xf.setCreateJavaTime(new Date(timeMillis));
         assertEquals(time, xf.getCreateTime());
-        assertEquals(timeMillis, xf.getCreateJavaTime());
+        assertEquals(timeMillis, xf.getCreateJavaTime().getTime());
         // Make sure milliseconds get zeroed out:
-        xf.setCreateJavaTime(new Date(timeMillis.getTime() + 123));
+        xf.setCreateJavaTime(new Date(timeMillis + 123));
         assertEquals(time, xf.getCreateTime());
-        assertEquals(timeMillis, xf.getCreateJavaTime());
+        assertEquals(timeMillis, xf.getCreateJavaTime().getTime());
         // Null
         xf.setCreateTime(null);
         assertNull(xf.getCreateJavaTime());
         xf.setCreateJavaTime(null);
         assertNull(xf.getCreateTime());
 
 
         // initialize for flags
         xf.setModifyTime(time);
         xf.setAccessTime(time);
         xf.setCreateTime(time);
 
         // get/set flags: 000
         xf.setFlags((byte) 0);
         assertEquals(0, xf.getFlags());
         assertFalse(xf.isBit0_modifyTimePresent());
         assertFalse(xf.isBit1_accessTimePresent());
         assertFalse(xf.isBit2_createTimePresent());
         // Local length=1, Central length=1 (flags only!)
         assertEquals(1, xf.getLocalFileDataLength().getValue());
         assertEquals(1, xf.getCentralDirectoryLength().getValue());
 
         // get/set flags: 001
         xf.setFlags((byte) 1);
         assertEquals(1, xf.getFlags());
         assertTrue(xf.isBit0_modifyTimePresent());
         assertFalse(xf.isBit1_accessTimePresent());
         assertFalse(xf.isBit2_createTimePresent());
         // Local length=5, Central length=5 (flags + mod)
         assertEquals(5, xf.getLocalFileDataLength().getValue());
         assertEquals(5, xf.getCentralDirectoryLength().getValue());
 
         // get/set flags: 010
         xf.setFlags((byte) 2);
         assertEquals(2, xf.getFlags());
         assertFalse(xf.isBit0_modifyTimePresent());
         assertTrue(xf.isBit1_accessTimePresent());
         assertFalse(xf.isBit2_createTimePresent());
         // Local length=5, Central length=1
         assertEquals(5, xf.getLocalFileDataLength().getValue());
         assertEquals(1, xf.getCentralDirectoryLength().getValue());
 
         // get/set flags: 100
         xf.setFlags((byte) 4);
         assertEquals(4, xf.getFlags());
         assertFalse(xf.isBit0_modifyTimePresent());
         assertFalse(xf.isBit1_accessTimePresent());
         assertTrue(xf.isBit2_createTimePresent());
         // Local length=5, Central length=1
         assertEquals(5, xf.getLocalFileDataLength().getValue());
         assertEquals(1, xf.getCentralDirectoryLength().getValue());
 
         // get/set flags: 111
         xf.setFlags((byte) 7);
         assertEquals(7, xf.getFlags());
         assertTrue(xf.isBit0_modifyTimePresent());
         assertTrue(xf.isBit1_accessTimePresent());
         assertTrue(xf.isBit2_createTimePresent());
         // Local length=13, Central length=5
         assertEquals(13, xf.getLocalFileDataLength().getValue());
         assertEquals(5, xf.getCentralDirectoryLength().getValue());
 
         // get/set flags: 11111111
         xf.setFlags((byte) -1);
         assertEquals(-1, xf.getFlags());
         assertTrue(xf.isBit0_modifyTimePresent());
         assertTrue(xf.isBit1_accessTimePresent());
         assertTrue(xf.isBit2_createTimePresent());
         // Local length=13, Central length=5
         assertEquals(13, xf.getLocalFileDataLength().getValue());
         assertEquals(5, xf.getCentralDirectoryLength().getValue());
     }
 
     @Test

commit 3f2c760a4eb82d880e62a03cb9450d9dcf2793f7
Author: ggregory <ggregory@apache.org>
Date:   Sat Apr 9 13:10:28 2016

    Add final modifier to local variables.

diff --git a/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java b/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java
--- a/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java
+++ b/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java
@@ -229,141 +229,141 @@
     public void testGettersSetters() {
         // X5455 is concerned with time, so let's
         // get a timestamp to play with (Jan 1st, 2000).
-        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
+        final Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
         cal.set(Calendar.YEAR, 2000);
         cal.set(Calendar.MONTH, Calendar.JANUARY);
         cal.set(Calendar.DATE, 1);
         cal.set(Calendar.HOUR_OF_DAY, 0);
         cal.set(Calendar.MINUTE, 0);
         cal.set(Calendar.MILLISECOND, 0);
-        Date timeMillis = cal.getTime();
-        ZipLong time = new ZipLong(timeMillis.getTime() / 1000);
+        final Date timeMillis = cal.getTime();
+        final ZipLong time = new ZipLong(timeMillis.getTime() / 1000);
 
         // set too big
         try {
             // Java time is 1000 x larger (milliseconds).
             xf.setModifyJavaTime(new Date(1000L * (MAX_TIME_SECONDS.getValue() + 1L)));
             fail("Time too big for 32 bits!");
-        } catch (IllegalArgumentException iae) {
+        } catch (final IllegalArgumentException iae) {
             // All is good.
         }
 
         // get/set modify time
         xf.setModifyTime(time);
         assertEquals(time, xf.getModifyTime());
         assertEquals(timeMillis, xf.getModifyJavaTime());
         xf.setModifyJavaTime(timeMillis);
         assertEquals(time, xf.getModifyTime());
         assertEquals(timeMillis, xf.getModifyJavaTime());
         // Make sure milliseconds get zeroed out:
         xf.setModifyJavaTime(new Date(timeMillis.getTime() + 123));
         assertEquals(time, xf.getModifyTime());
         assertEquals(timeMillis, xf.getModifyJavaTime());
         // Null
         xf.setModifyTime(null);
         assertNull(xf.getModifyJavaTime());
         xf.setModifyJavaTime(null);
         assertNull(xf.getModifyTime());
 
         // get/set access time
         xf.setAccessTime(time);
         assertEquals(time, xf.getAccessTime());
         assertEquals(timeMillis, xf.getAccessJavaTime());
         xf.setAccessJavaTime(timeMillis);
         assertEquals(time, xf.getAccessTime());
         assertEquals(timeMillis, xf.getAccessJavaTime());
         // Make sure milliseconds get zeroed out:
         xf.setAccessJavaTime(new Date(timeMillis.getTime() + 123));
         assertEquals(time, xf.getAccessTime());
         assertEquals(timeMillis, xf.getAccessJavaTime());
         // Null
         xf.setAccessTime(null);
         assertNull(xf.getAccessJavaTime());
         xf.setAccessJavaTime(null);
         assertNull(xf.getAccessTime());
 
         // get/set create time
         xf.setCreateTime(time);
         assertEquals(time, xf.getCreateTime());
         assertEquals(timeMillis, xf.getCreateJavaTime());
         xf.setCreateJavaTime(timeMillis);
         assertEquals(time, xf.getCreateTime());
         assertEquals(timeMillis, xf.getCreateJavaTime());
         // Make sure milliseconds get zeroed out:
         xf.setCreateJavaTime(new Date(timeMillis.getTime() + 123));
         assertEquals(time, xf.getCreateTime());
         assertEquals(timeMillis, xf.getCreateJavaTime());
         // Null
         xf.setCreateTime(null);
         assertNull(xf.getCreateJavaTime());
         xf.setCreateJavaTime(null);
         assertNull(xf.getCreateTime());
 
 
         // initialize for flags
         xf.setModifyTime(time);
         xf.setAccessTime(time);
         xf.setCreateTime(time);
 
         // get/set flags: 000
         xf.setFlags((byte) 0);
         assertEquals(0, xf.getFlags());
         assertFalse(xf.isBit0_modifyTimePresent());
         assertFalse(xf.isBit1_accessTimePresent());
         assertFalse(xf.isBit2_createTimePresent());
         // Local length=1, Central length=1 (flags only!)
         assertEquals(1, xf.getLocalFileDataLength().getValue());
         assertEquals(1, xf.getCentralDirectoryLength().getValue());
 
         // get/set flags: 001
         xf.setFlags((byte) 1);
         assertEquals(1, xf.getFlags());
         assertTrue(xf.isBit0_modifyTimePresent());
         assertFalse(xf.isBit1_accessTimePresent());
         assertFalse(xf.isBit2_createTimePresent());
         // Local length=5, Central length=5 (flags + mod)
         assertEquals(5, xf.getLocalFileDataLength().getValue());
         assertEquals(5, xf.getCentralDirectoryLength().getValue());
 
         // get/set flags: 010
         xf.setFlags((byte) 2);
         assertEquals(2, xf.getFlags());
         assertFalse(xf.isBit0_modifyTimePresent());
         assertTrue(xf.isBit1_accessTimePresent());
         assertFalse(xf.isBit2_createTimePresent());
         // Local length=5, Central length=1
         assertEquals(5, xf.getLocalFileDataLength().getValue());
         assertEquals(1, xf.getCentralDirectoryLength().getValue());
 
         // get/set flags: 100
         xf.setFlags((byte) 4);
         assertEquals(4, xf.getFlags());
         assertFalse(xf.isBit0_modifyTimePresent());
         assertFalse(xf.isBit1_accessTimePresent());
         assertTrue(xf.isBit2_createTimePresent());
         // Local length=5, Central length=1
         assertEquals(5, xf.getLocalFileDataLength().getValue());
         assertEquals(1, xf.getCentralDirectoryLength().getValue());
 
         // get/set flags: 111
         xf.setFlags((byte) 7);
         assertEquals(7, xf.getFlags());
         assertTrue(xf.isBit0_modifyTimePresent());
         assertTrue(xf.isBit1_accessTimePresent());
         assertTrue(xf.isBit2_createTimePresent());
         // Local length=13, Central length=5
         assertEquals(13, xf.getLocalFileDataLength().getValue());
         assertEquals(5, xf.getCentralDirectoryLength().getValue());
 
         // get/set flags: 11111111
         xf.setFlags((byte) -1);
         assertEquals(-1, xf.getFlags());
         assertTrue(xf.isBit0_modifyTimePresent());
         assertTrue(xf.isBit1_accessTimePresent());
         assertTrue(xf.isBit2_createTimePresent());
         // Local length=13, Central length=5
         assertEquals(13, xf.getLocalFileDataLength().getValue());
         assertEquals(5, xf.getCentralDirectoryLength().getValue());
     }
 
     @Test

commit 0e1d5a4385ec91ddc10900f8733f086513636609
Author: Julius Davies <julius@apache.org>
Date:   Tue Jan 8 16:54:15 2013

    COMPRESS-210 - handle zip extra field 0x5455 - Extended Timestamp
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/compress/trunk@1430562 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java b/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java
--- /dev/null
+++ b/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java
@@ -0,0 +201,141 @@
+    public void testGettersSetters() {
+        // X5455 is concerned with time, so let's
+        // get a timestamp to play with (Jan 1st, 2000).
+        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
+        cal.set(Calendar.YEAR, 2000);
+        cal.set(Calendar.MONTH, Calendar.JANUARY);
+        cal.set(Calendar.DATE, 1);
+        cal.set(Calendar.HOUR_OF_DAY, 0);
+        cal.set(Calendar.MINUTE, 0);
+        cal.set(Calendar.MILLISECOND, 0);
+        Date timeMillis = cal.getTime();
+        ZipLong time = new ZipLong(timeMillis.getTime() / 1000);
+
+        // set too big
+        try {
+            // Java time is 1000 x larger (milliseconds).
+            xf.setModifyJavaTime(new Date(1000L * (MAX_TIME_SECONDS.getValue() + 1L)));
+            fail("Time too big for 32 bits!");
+        } catch (IllegalArgumentException iae) {
+            // All is good.
+        }
+
+        // get/set modify time
+        xf.setModifyTime(time);
+        assertEquals(time, xf.getModifyTime());
+        assertEquals(timeMillis, xf.getModifyJavaTime());
+        xf.setModifyJavaTime(timeMillis);
+        assertEquals(time, xf.getModifyTime());
+        assertEquals(timeMillis, xf.getModifyJavaTime());
+        // Make sure milliseconds get zeroed out:
+        xf.setModifyJavaTime(new Date(timeMillis.getTime() + 123));
+        assertEquals(time, xf.getModifyTime());
+        assertEquals(timeMillis, xf.getModifyJavaTime());
+        // Null
+        xf.setModifyTime(null);
+        assertNull(xf.getModifyJavaTime());
+        xf.setModifyJavaTime(null);
+        assertNull(xf.getModifyTime());
+
+        // get/set access time
+        xf.setAccessTime(time);
+        assertEquals(time, xf.getAccessTime());
+        assertEquals(timeMillis, xf.getAccessJavaTime());
+        xf.setAccessJavaTime(timeMillis);
+        assertEquals(time, xf.getAccessTime());
+        assertEquals(timeMillis, xf.getAccessJavaTime());
+        // Make sure milliseconds get zeroed out:
+        xf.setAccessJavaTime(new Date(timeMillis.getTime() + 123));
+        assertEquals(time, xf.getAccessTime());
+        assertEquals(timeMillis, xf.getAccessJavaTime());
+        // Null
+        xf.setAccessTime(null);
+        assertNull(xf.getAccessJavaTime());
+        xf.setAccessJavaTime(null);
+        assertNull(xf.getAccessTime());
+
+        // get/set create time
+        xf.setCreateTime(time);
+        assertEquals(time, xf.getCreateTime());
+        assertEquals(timeMillis, xf.getCreateJavaTime());
+        xf.setCreateJavaTime(timeMillis);
+        assertEquals(time, xf.getCreateTime());
+        assertEquals(timeMillis, xf.getCreateJavaTime());
+        // Make sure milliseconds get zeroed out:
+        xf.setCreateJavaTime(new Date(timeMillis.getTime() + 123));
+        assertEquals(time, xf.getCreateTime());
+        assertEquals(timeMillis, xf.getCreateJavaTime());
+        // Null
+        xf.setCreateTime(null);
+        assertNull(xf.getCreateJavaTime());
+        xf.setCreateJavaTime(null);
+        assertNull(xf.getCreateTime());
+
+
+        // initialize for flags
+        xf.setModifyTime(time);
+        xf.setAccessTime(time);
+        xf.setCreateTime(time);
+
+        // get/set flags: 000
+        xf.setFlags((byte) 0);
+        assertEquals(0, xf.getFlags());
+        assertFalse(xf.isBit0_modifyTimePresent());
+        assertFalse(xf.isBit1_accessTimePresent());
+        assertFalse(xf.isBit2_createTimePresent());
+        // Local length=1, Central length=1 (flags only!)
+        assertEquals(1, xf.getLocalFileDataLength().getValue());
+        assertEquals(1, xf.getCentralDirectoryLength().getValue());
+
+        // get/set flags: 001
+        xf.setFlags((byte) 1);
+        assertEquals(1, xf.getFlags());
+        assertTrue(xf.isBit0_modifyTimePresent());
+        assertFalse(xf.isBit1_accessTimePresent());
+        assertFalse(xf.isBit2_createTimePresent());
+        // Local length=5, Central length=5 (flags + mod)
+        assertEquals(5, xf.getLocalFileDataLength().getValue());
+        assertEquals(5, xf.getCentralDirectoryLength().getValue());
+
+        // get/set flags: 010
+        xf.setFlags((byte) 2);
+        assertEquals(2, xf.getFlags());
+        assertFalse(xf.isBit0_modifyTimePresent());
+        assertTrue(xf.isBit1_accessTimePresent());
+        assertFalse(xf.isBit2_createTimePresent());
+        // Local length=5, Central length=1
+        assertEquals(5, xf.getLocalFileDataLength().getValue());
+        assertEquals(1, xf.getCentralDirectoryLength().getValue());
+
+        // get/set flags: 100
+        xf.setFlags((byte) 4);
+        assertEquals(4, xf.getFlags());
+        assertFalse(xf.isBit0_modifyTimePresent());
+        assertFalse(xf.isBit1_accessTimePresent());
+        assertTrue(xf.isBit2_createTimePresent());
+        // Local length=5, Central length=1
+        assertEquals(5, xf.getLocalFileDataLength().getValue());
+        assertEquals(1, xf.getCentralDirectoryLength().getValue());
+
+        // get/set flags: 111
+        xf.setFlags((byte) 7);
+        assertEquals(7, xf.getFlags());
+        assertTrue(xf.isBit0_modifyTimePresent());
+        assertTrue(xf.isBit1_accessTimePresent());
+        assertTrue(xf.isBit2_createTimePresent());
+        // Local length=13, Central length=5
+        assertEquals(13, xf.getLocalFileDataLength().getValue());
+        assertEquals(5, xf.getCentralDirectoryLength().getValue());
+
+        // get/set flags: 11111111
+        xf.setFlags((byte) -1);
+        assertEquals(-1, xf.getFlags());
+        assertTrue(xf.isBit0_modifyTimePresent());
+        assertTrue(xf.isBit1_accessTimePresent());
+        assertTrue(xf.isBit2_createTimePresent());
+        // Local length=13, Central length=5
+        assertEquals(13, xf.getLocalFileDataLength().getValue());
+        assertEquals(5, xf.getCentralDirectoryLength().getValue());
+    }
+
+    @Test
