commit 1a7ba5cb0111dd3ed9afd9691cab39b3c341e408
Author: johnlenz@google.com <johnlenz@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Thu Nov 3 17:10:49 2011

    Modify normalization to distinguish function expression names from
    parameters and local variables.
    Fixes issue 539.
    
    R=nicksantos
    DELTA=246  (61 added, 11 deleted, 174 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=3615
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1552 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/FunctionInjectorTest.java b/test/com/google/javascript/jscomp/FunctionInjectorTest.java
--- a/test/com/google/javascript/jscomp/FunctionInjectorTest.java
+++ b/test/com/google/javascript/jscomp/FunctionInjectorTest.java
@@ -1314,29 +1314,29 @@
   public void testBug1897706() {
     helperInlineReferenceToFunction(
         "function foo(a){}; foo(x())",
-        "function foo(a){}; {var a$$inline_1=x()}",
+        "function foo(a){}; {var a$$inline_0=x()}",
         "foo", INLINE_BLOCK);
 
     helperInlineReferenceToFunction(
         "function foo(a){bar()}; foo(x())",
-        "function foo(a){bar()}; {var a$$inline_1=x();bar()}",
+        "function foo(a){bar()}; {var a$$inline_0=x();bar()}",
         "foo", INLINE_BLOCK);
 
     helperInlineReferenceToFunction(
         "function foo(a,b){bar()}; foo(x(),y())",
         "function foo(a,b){bar()};" +
-        "{var a$$inline_2=x();var b$$inline_3=y();bar()}",
+        "{var a$$inline_0=x();var b$$inline_1=y();bar()}",
         "foo", INLINE_BLOCK);
   }
 
   /**
    * Test case
    *
    * var a = {}, b = {}
    * a.test = "a", b.test = "b"
    * c = a;
    * foo() { c=b; return "a" }
    * c.teste
    *
    */
 

commit 3df1d1eeb4a5868e5331ee98fb6748a2f1ccedba
Author: Nicholas.J.Santos <Nicholas.J.Santos@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Mon Mar 15 18:46:08 2010

    Cache expensive hashcode calculations. (John)
    
    Try again to simplify variable names in inlined function to simplify
    diffs. (John)
    
    Add an alias for the --define flag to ensure the api is backwards
    compatible. (Nick)
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@136 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/FunctionInjectorTest.java b/test/com/google/javascript/jscomp/FunctionInjectorTest.java
--- a/test/com/google/javascript/jscomp/FunctionInjectorTest.java
+++ b/test/com/google/javascript/jscomp/FunctionInjectorTest.java
@@ -1159,29 +1159,29 @@
   public void testBug1897706() {
     helperInlineReferenceToFunction(
         "function foo(a){}; foo(x())",
-        "function foo(a){}; {var JSCompiler_inline_a_1=x()}",
+        "function foo(a){}; {var a$$inline_1=x()}",
         "foo", INLINE_BLOCK);
 
     helperInlineReferenceToFunction(
         "function foo(a){bar()}; foo(x())",
-        "function foo(a){bar()}; {var JSCompiler_inline_a_1=x();bar()}",
+        "function foo(a){bar()}; {var a$$inline_1=x();bar()}",
         "foo", INLINE_BLOCK);
 
     helperInlineReferenceToFunction(
         "function foo(a,b){bar()}; foo(x(),y())",
         "function foo(a,b){bar()};" +
-        "{var JSCompiler_inline_a_2=x();var JSCompiler_inline_b_3=y();bar()}",
+        "{var a$$inline_2=x();var b$$inline_3=y();bar()}",
         "foo", INLINE_BLOCK);
   }
 
   /**
    * Test case
    *
    * var a = {}, b = {}
    * a.test = "a", b.test = "b"
    * c = a;
    * foo() { c=b; return "a" }
    * c.teste
    *
    */
 

commit 6b49cfd9022fe111bdad745c78ea877fbc2f7ba3
Author: nicholas.j.santos@gmail.com <nicholas.j.santos@gmail.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Tue Nov 3 18:51:57 2009

    Initial commit.
    
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/FunctionInjectorTest.java b/test/com/google/javascript/jscomp/FunctionInjectorTest.java
--- /dev/null
+++ b/test/com/google/javascript/jscomp/FunctionInjectorTest.java
@@ -0,0 +1117,29 @@
+  public void testBug1897706() {
+    helperInlineReferenceToFunction(
+        "function foo(a){}; foo(x())",
+        "function foo(a){}; {var JSCompiler_inline_a_1=x()}",
+        "foo", INLINE_BLOCK);
+
+    helperInlineReferenceToFunction(
+        "function foo(a){bar()}; foo(x())",
+        "function foo(a){bar()}; {var JSCompiler_inline_a_1=x();bar()}",
+        "foo", INLINE_BLOCK);
+
+    helperInlineReferenceToFunction(
+        "function foo(a,b){bar()}; foo(x(),y())",
+        "function foo(a,b){bar()};" +
+        "{var JSCompiler_inline_a_2=x();var JSCompiler_inline_b_3=y();bar()}",
+        "foo", INLINE_BLOCK);
+  }
+
+  /**
+   * Test case
+   *
+   * var a = {}, b = {}
+   * a.test = "a", b.test = "b"
+   * c = a;
+   * foo() { c=b; return "a" }
+   * c.teste
+   *
+   */
+
