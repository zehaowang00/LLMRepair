commit 1a7ba5cb0111dd3ed9afd9691cab39b3c341e408
Author: johnlenz@google.com <johnlenz@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Thu Nov 3 17:10:49 2011

    Modify normalization to distinguish function expression names from
    parameters and local variables.
    Fixes issue 539.
    
    R=nicksantos
    DELTA=246  (61 added, 11 deleted, 174 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=3615
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1552 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/InlineFunctionsTest.java b/test/com/google/javascript/jscomp/InlineFunctionsTest.java
--- a/test/com/google/javascript/jscomp/InlineFunctionsTest.java
+++ b/test/com/google/javascript/jscomp/InlineFunctionsTest.java
@@ -1552,23 +1552,23 @@
   public void testDecomposeFunctionExpressionInCall() {
     test(
         "(function(map){descriptions_=map})(\n" +
            "function(){\n" +
               "var ret={};\n" +
               "ret[ONE]='a';\n" +
               "ret[TWO]='b';\n" +
               "return ret\n" +
            "}()\n" +
         ");",
         "{" +
         "var JSCompiler_inline_result$$0;" +
-        "var ret$$inline_2={};\n" +
-        "ret$$inline_2[ONE]='a';\n" +
-        "ret$$inline_2[TWO]='b';\n" +
-        "JSCompiler_inline_result$$0 = ret$$inline_2;\n" +
+        "var ret$$inline_1={};\n" +
+        "ret$$inline_1[ONE]='a';\n" +
+        "ret$$inline_1[TWO]='b';\n" +
+        "JSCompiler_inline_result$$0 = ret$$inline_1;\n" +
         "}" +
         "{" +
         "descriptions_=JSCompiler_inline_result$$0;" +
         "}"
         );
   }
 

commit e33e925eea3a8e4de958864e531e1adc4da62e18
Author: Nicholas.J.Santos <Nicholas.J.Santos@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Wed Jun 16 15:33:28 2010

    Change on 2010/06/14 by johnlenz
    
            Remove unneed parenthese from hook expressions.
    
            R=acleung
            DELTA=76  (20 added, 4 deleted, 52 changed)
    
    Change on 2010/06/14 by johnlenz
    
            Fix non-determinisim.
    
            R=jschorr
            DELTA=5  (3 added, 0 deleted, 2 changed)
    
    Change on 2010/06/15 by nicksantos
    
            fix a regression caused by a change in the ordering in which
            constant folding is done.
            parts of PeepholeSubstituteAlternateSyntax will crash if they
            see a NEG node with a NUMBER child.
            They were assuming that FoldConstants would fold these into one node.
    
            R=dcc,acleung
            DELTA=153  (70 added, 6 deleted, 77 changed)
    
    Change on 2010/06/15 by johnlenz
    
            More debug diffing improvements: convert unique globally unique names
            to locally unique names for reproduciblity.
    
            R=acleung
            DELTA=222  (44 added, 7 deleted, 171 changed)
    
    Change on 2010/06/15 by nicksantos
    
            Add the @nocompile annotation as a signal that this file should
            be dropped silently if it gets pulled into a --manage_closure_dependencies
            build.
    
            R=bowdidge,gboyer
            DELTA=82  (60 added, 1 deleted, 21 changed)
    
    Change on 2010/06/15 by dcc
    
            Refactor FoldConstants dead code removal into PeepholeRemoveDeadCode.
    
            R=acleung
            DELTA=744  (403 added, 307 deleted, 34 changed)
    
    Change on 2010/06/15 by dcc
    
            ExternExports test now emits type annotation for exported externs.
                    - Changed ExternExportsPass to generate the externs as an AST and then print
            to a String rather than ad hoc with a StringBuilder.
                    - Changed TypedCodeGenerator to generate '*' (AllType) for parameters with unknown types rather than '?' (UnknownType) since '?' is not valid JSDoc.
    
            R=acleung
            DELTA=643  (496 added, 66 deleted, 81 changed)
    
    Change on 2010/06/16 by johnlenz
    
            Tweak to PureFunctionIndentifier to propagate the side-effects for
            anonymous function expressions like: (Date.now||function(){return
            +new Date})()
    
            R=avd
            DELTA=42  (39 added, 0 deleted, 3 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=29010
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@243 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/InlineFunctionsTest.java b/test/com/google/javascript/jscomp/InlineFunctionsTest.java
--- a/test/com/google/javascript/jscomp/InlineFunctionsTest.java
+++ b/test/com/google/javascript/jscomp/InlineFunctionsTest.java
@@ -1364,23 +1364,23 @@
   public void testDecomposeFunctionExpressionInCall() {
     test(
         "(function(map){descriptions_=map})(\n" +
            "function(){\n" +
               "var ret={};\n" +
               "ret[ONE]='a';\n" +
               "ret[TWO]='b';\n" +
               "return ret\n" +
            "}()\n" +
         ");",
         "{" +
-        "var JSCompiler_inline_result_0;" +
+        "var JSCompiler_inline_result$$0;" +
         "var ret$$inline_2={};\n" +
         "ret$$inline_2[ONE]='a';\n" +
         "ret$$inline_2[TWO]='b';\n" +
-        "JSCompiler_inline_result_0 = ret$$inline_2;\n" +
+        "JSCompiler_inline_result$$0 = ret$$inline_2;\n" +
         "}" +
         "{" +
-        "descriptions_=JSCompiler_inline_result_0;" +
+        "descriptions_=JSCompiler_inline_result$$0;" +
         "}"
         );
   }
 

commit ebb59a97610015bc41bda7f458dd1428a3a3e335
Author: Nicholas.J.Santos <Nicholas.J.Santos@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Fri Apr 23 14:31:48 2010

    Change on 2010/04/22 by nick
    
            fix the extern definition of Window.prototype.stop
    
            R=siggy
            DELTA=1  (0 added, 0 deleted, 1 changed)
    
    Change on 2010/04/22 by john
    
            "Anonymous function" is a confusing term for functions with names.
            Properly we are usually distinguishing between functions statements
            (function declarations) and function expressions.
    
            R=alan
            DELTA=172  (7 added, 14 deleted, 151 changed)
    
    Change on 2010/04/22 by john
    
            Standardize the definition of setTimeout/setInterval.
            Fix for Issue 137
    
            R=nick
            DELTA=6  (2 added, 2 deleted, 2 changed)
    
    Change on 2010/04/22 by mark
    
            Various delegate fixes.
    
            Give the delegate proxy a name unique from the delegate base so that
            InstanceObjectType#equals distinguishes them. This is necessary for
            AmbiguateProperties to work.
    
            Fix the prototype of the delegate proxy. This makes
            DisambiguateProperties continue to work.
    
            Add superclass methods of the delegate base to the delegate proxy.
    
    
            R=andrew,nada
            DELTA=526  (383 added, 104 deleted, 39 changed)
    
    Change on 2010/04/23 by john
    
            Allow variable inlining of function statements. For simplicity  limited to functions defined before first use.
    
            R=nick
            DELTA=79  (49 added, 3 deleted, 27 changed)
    
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=hakjvx
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@197 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/InlineFunctionsTest.java b/test/com/google/javascript/jscomp/InlineFunctionsTest.java
--- a/test/com/google/javascript/jscomp/InlineFunctionsTest.java
+++ b/test/com/google/javascript/jscomp/InlineFunctionsTest.java
@@ -1336,23 +1336,23 @@
-  public void testDecomposeAnonymousInCall() {
+  public void testDecomposeFunctionExpressionInCall() {
     test(
         "(function(map){descriptions_=map})(\n" +
            "function(){\n" +
               "var ret={};\n" +
               "ret[ONE]='a';\n" +
               "ret[TWO]='b';\n" +
               "return ret\n" +
            "}()\n" +
         ");",
         "{" +
         "var JSCompiler_inline_result_0;" +
         "var ret$$inline_2={};\n" +
         "ret$$inline_2[ONE]='a';\n" +
         "ret$$inline_2[TWO]='b';\n" +
         "JSCompiler_inline_result_0 = ret$$inline_2;\n" +
         "}" +
         "{" +
         "descriptions_=JSCompiler_inline_result_0;" +
         "}"
         );
   }
 

commit 3ce4716848eb71b6e78a4545a2cc0c27e74a29b3
Author: Nicholas.J.Santos <Nicholas.J.Santos@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Thu Mar 25 11:58:20 2010

    Tweak to allow chained initialization:
    new Node(Token.EXPR_RESULT, a).copyInformationFrom(a); (John)
    R=alan
    DELTA=10  (6 added, 0 deleted, 4 changed)
    
    
    Teach PureFunctionnIdentifier about (f || g)() calls (antonio)
    Fixes issue 116
    R=john
    DELTA=105  (84 added, 0 deleted, 21 changed)
    
    Fix decomposition issue
    Anonymous function declaration can not be side-effected and are
    side-effect free. (John)
    R=alan
    DELTA=115  (101 added, 8 deleted, 6 changed)
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@154 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/InlineFunctionsTest.java b/test/com/google/javascript/jscomp/InlineFunctionsTest.java
--- a/test/com/google/javascript/jscomp/InlineFunctionsTest.java
+++ b/test/com/google/javascript/jscomp/InlineFunctionsTest.java
@@ -1334,0 +1336,23 @@
+  public void testDecomposeAnonymousInCall() {
+    test(
+        "(function(map){descriptions_=map})(\n" +
+           "function(){\n" +
+              "var ret={};\n" +
+              "ret[ONE]='a';\n" +
+              "ret[TWO]='b';\n" +
+              "return ret\n" +
+           "}()\n" +
+        ");",
+        "{" +
+        "var JSCompiler_inline_result_0;" +
+        "var ret$$inline_2={};\n" +
+        "ret$$inline_2[ONE]='a';\n" +
+        "ret$$inline_2[TWO]='b';\n" +
+        "JSCompiler_inline_result_0 = ret$$inline_2;\n" +
+        "}" +
+        "{" +
+        "descriptions_=JSCompiler_inline_result_0;" +
+        "}"
+        );
+  }
+
