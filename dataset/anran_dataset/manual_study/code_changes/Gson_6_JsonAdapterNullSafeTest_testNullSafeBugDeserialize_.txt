commit 1ab73ffd21d8c08bbe734154921a936e4a8cb091
Author: Inderjeet Singh <inder@peel.com>
Date:   Fri Feb 26 12:25:23 2016

    incorporated code review feedback by eliminating the stringified type adapter.

diff --git a/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java b/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java
--- a/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java
+++ b/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java
@@ -46,58 +34,29 @@
   public void testNullSafeBugDeserialize() throws Exception {
-    String json = "\"{\\\"id\\\":\\\"ec57803e2\\\",\\\"category\\\":2}\"";
-    Device device = gson.fromJson(json, Device.class);
+    Device device = gson.fromJson("{'id':'ec57803e2'}", Device.class);
     assertEquals("ec57803e2", device.id);
-    assertEquals(2, device.category);
   }
 
   @JsonAdapter(Device.JsonAdapterFactory.class)
   private static final class Device {
     String id;
-    int category;
-    Device(String id, int category) {
+    Device(String id) {
       this.id = id;
-      this.category = category;
     }
 
-    /**
-     * Write the value as a String, not JSON.
-     */
     static final class JsonAdapterFactory implements TypeAdapterFactory {
+      // The recursiveCall in {@link Device.JsonAdapterFactory} is the source of this bug
+      // because we use it to return a null type adapter on a recursive call.
       private static final ThreadLocal<Boolean> recursiveCall = new ThreadLocal<Boolean>();
 
       @SuppressWarnings({"unchecked", "rawtypes"})
       @Override public <T> TypeAdapter<T> create(final Gson gson, TypeToken<T> type) {
         if (type.getRawType() != Device.class || recursiveCall.get() != null) {
           recursiveCall.set(null); // clear for subsequent use
           return null;
         }
         recursiveCall.set(Boolean.TRUE);
-        final TypeAdapter<Device> delegate = (TypeAdapter) gson.getDelegateAdapter(this, type);
-        return (TypeAdapter) new TypeAdapter<Device>() {
-          @Override public void write(JsonWriter out, Device value) throws IOException {
-            delegate.write(out, value);
-          }
-          @Override public Device read(JsonReader in) throws IOException {
-            String json = in.nextString();
-            JsonParser parser = new JsonParser();
-            JsonElement root = parseString(parser, json, null);
-            return root == null ? null : delegate.fromJsonTree(root);
-          }
-          private JsonElement parseString(JsonParser parser, String json, String prevJson)
-              throws IOException { // called recursively
-            JsonElement root = parser.parse(json);
-            if (root instanceof JsonPrimitive) {
-              prevJson = json;
-              json = root.getAsString();
-              if (Objects.equals(json, prevJson)) {
-                throw new JsonSyntaxException("Unexpected Json: " + json);
-              }
-              return parseString(parser, json, prevJson);
-            }
-            return root;
-          }
-        };
+        return (TypeAdapter) gson.getDelegateAdapter(this, type);
       }
     }
   }
 }

commit 1fa43821e829c455db89f9b75737d109c01dfd2c
Author: Inderjeet Singh <inder@peel.com>
Date:   Thu Feb 25 22:37:07 2016

    removed unneeded null check.

diff --git a/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java b/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java
--- a/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java
+++ b/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java
@@ -46,61 +46,58 @@
   public void testNullSafeBugDeserialize() throws Exception {
     String json = "\"{\\\"id\\\":\\\"ec57803e2\\\",\\\"category\\\":2}\"";
     Device device = gson.fromJson(json, Device.class);
     assertEquals("ec57803e2", device.id);
     assertEquals(2, device.category);
   }
 
   @JsonAdapter(Device.JsonAdapterFactory.class)
   private static final class Device {
     String id;
     int category;
     Device(String id, int category) {
       this.id = id;
       this.category = category;
     }
 
     /**
      * Write the value as a String, not JSON.
      */
     static final class JsonAdapterFactory implements TypeAdapterFactory {
       private static final ThreadLocal<Boolean> recursiveCall = new ThreadLocal<Boolean>();
 
       @SuppressWarnings({"unchecked", "rawtypes"})
       @Override public <T> TypeAdapter<T> create(final Gson gson, TypeToken<T> type) {
         if (type.getRawType() != Device.class || recursiveCall.get() != null) {
           recursiveCall.set(null); // clear for subsequent use
           return null;
         }
         recursiveCall.set(Boolean.TRUE);
         final TypeAdapter<Device> delegate = (TypeAdapter) gson.getDelegateAdapter(this, type);
         return (TypeAdapter) new TypeAdapter<Device>() {
           @Override public void write(JsonWriter out, Device value) throws IOException {
             delegate.write(out, value);
           }
           @Override public Device read(JsonReader in) throws IOException {
             String json = in.nextString();
             JsonParser parser = new JsonParser();
             JsonElement root = parseString(parser, json, null);
             return root == null ? null : delegate.fromJsonTree(root);
           }
           private JsonElement parseString(JsonParser parser, String json, String prevJson)
               throws IOException { // called recursively
-            if (json == null || json.trim().isEmpty()) {
-              return null;
-            }
             JsonElement root = parser.parse(json);
             if (root instanceof JsonPrimitive) {
               prevJson = json;
               json = root.getAsString();
               if (Objects.equals(json, prevJson)) {
                 throw new JsonSyntaxException("Unexpected Json: " + json);
               }
               return parseString(parser, json, prevJson);
             }
             return root;
           }
         };
       }
     }
   }
 }

commit 79a00cd90695c9ab72f301ca30fe2cbbc1fe8e36
Author: Inderjeet Singh <inder@peel.com>
Date:   Thu Feb 25 20:38:48 2016

    incorporated code review feedback. Simplified the code, merged Device and Control and removed unnecessary fields.

diff --git a/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java b/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java
--- a/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java
+++ b/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java
@@ -79,108 +46,61 @@
-  private static final class Device {
-    @SuppressWarnings("unused")
-    String id;
-    ControlData controlData;
-
-    public Device(String id, ControlData controlData) {
-      this.id = id;
-      this.controlData = controlData;
-    }
+  public void testNullSafeBugDeserialize() throws Exception {
+    String json = "\"{\\\"id\\\":\\\"ec57803e2\\\",\\\"category\\\":2}\"";
+    Device device = gson.fromJson(json, Device.class);
+    assertEquals("ec57803e2", device.id);
+    assertEquals(2, device.category);
   }
 
-  @JsonAdapter(ControlData.JsonAdapterFactory.class)
-  private static final class ControlData {
+  @JsonAdapter(Device.JsonAdapterFactory.class)
+  private static final class Device {
     String id;
     int category;
-    boolean alwaysOn;
-    @SerializedName("codeset_id") int codesetId;
-    ControlData(String id, int category, boolean alwaysOn, int codesetId) {
+    Device(String id, int category) {
       this.id = id;
       this.category = category;
-      this.alwaysOn = alwaysOn;
-      this.codesetId = codesetId;
     }
 
     /**
-     * DeviceControlData is received as String in JSON instead of proper JSON.
-     * So, we need to write a special type adapter.
+     * Write the value as a String, not JSON.
      */
-    static final class JsonAdapterFactory extends StringifiedJsonAdapterFactory<ControlData> {
+    static final class JsonAdapterFactory implements TypeAdapterFactory {
       private static final ThreadLocal<Boolean> recursiveCall = new ThreadLocal<Boolean>();
-      public JsonAdapterFactory() {
-        super(recursiveCall, ControlData.class, true);
-      }
-    }
-  }
-
-  /**
-   * Converts an object to Stringified JSON for saving in a JSON field as a string type.
-   */
-  private static class StringifiedJsonAdapterFactory<R> implements TypeAdapterFactory {
-    private final Class<R> targetType;
-    private final ThreadLocal<Boolean> recursiveCall;
-    private final boolean writeAsJson;
-
-    /**
-     * @param recursiveCall provide a static ThreadLocal to workaround a Gson bug where
-     *   annotation-based type adapter factories can't be skipped over.
-     * @param targetType The class whose instances needs to be written in stringified form.
-     * @param writeAsJson Set this to true to write the output as JSON not string.
-     */
-    public StringifiedJsonAdapterFactory(ThreadLocal<Boolean> recursiveCall, Class<R> targetType,
-        boolean writeAsJson) {
-      this.recursiveCall = recursiveCall;
-      this.targetType = targetType;
-      this.writeAsJson = writeAsJson;
-    }
 
-    @SuppressWarnings({"unchecked", "rawtypes"})
-    @Override public <T> TypeAdapter<T> create(final Gson gson, TypeToken<T> type) {
-      if (type.getRawType() != targetType || recursiveCall.get() != null) {
-        recursiveCall.set(null); // clear for subsequent use
-        return null;
-      }
-      recursiveCall.set(Boolean.TRUE);
-      final TypeAdapter<R> delegate = (TypeAdapter) gson.getDelegateAdapter(this, type);
-      return (TypeAdapter) new TypeAdapter<R>() {
-        @Override public void write(JsonWriter out, R value) throws IOException {
-          if (writeAsJson) {
+      @SuppressWarnings({"unchecked", "rawtypes"})
+      @Override public <T> TypeAdapter<T> create(final Gson gson, TypeToken<T> type) {
+        if (type.getRawType() != Device.class || recursiveCall.get() != null) {
+          recursiveCall.set(null); // clear for subsequent use
+          return null;
+        }
+        recursiveCall.set(Boolean.TRUE);
+        final TypeAdapter<Device> delegate = (TypeAdapter) gson.getDelegateAdapter(this, type);
+        return (TypeAdapter) new TypeAdapter<Device>() {
+          @Override public void write(JsonWriter out, Device value) throws IOException {
             delegate.write(out, value);
-          } else {
-            // delegate.toJson(value) will write nulls. avoid that by using gson.toJson()
-            String json = gson.toJson(delegate.toJsonTree(value));
-            out.value(json);
           }
-        }
-        @Override public R read(JsonReader in) throws IOException {
-          JsonToken token = in.peek();
-          JsonElement root;
-          if (token == JsonToken.BEGIN_OBJECT) {
-            return delegate.read(in);
-          } else { // assume to be string
+          @Override public Device read(JsonReader in) throws IOException {
             String json = in.nextString();
             JsonParser parser = new JsonParser();
-            root = parseString(parser, json, null);
+            JsonElement root = parseString(parser, json, null);
             return root == null ? null : delegate.fromJsonTree(root);
           }
-        }
-
-        private JsonElement parseString(JsonParser parser, String json, String prevJson)
-            throws IOException {
-          if (json == null || json.trim().isEmpty()) {
-            return null;
-          }
-          JsonElement root = parser.parse(json);
-          if (root instanceof JsonPrimitive) {
-            prevJson = json;
-            json = root.getAsString();
-            if (Objects.equals(json, prevJson)) {
-              throw new JsonSyntaxException("Unexpected Json: " + json);
+          private JsonElement parseString(JsonParser parser, String json, String prevJson)
+              throws IOException { // called recursively
+            if (json == null || json.trim().isEmpty()) {
+              return null;
             }
-            return parseString(parser, json, prevJson);
+            JsonElement root = parser.parse(json);
+            if (root instanceof JsonPrimitive) {
+              prevJson = json;
+              json = root.getAsString();
+              if (Objects.equals(json, prevJson)) {
+                throw new JsonSyntaxException("Unexpected Json: " + json);
+              }
+              return parseString(parser, json, prevJson);
+            }
+            return root;
           }
-          return root;
-        }
-      }.nullSafe();
+        };
+      }
     }
   }
 }

commit c731abb293e79b26e53db3264306768fb86ef4c4
Author: Inderjeet Singh <inder@peel.com>
Date:   Thu Feb 25 16:56:42 2016

    Fixed a regression in Gson 2.6 where Gson caused NPE if the TypeAdapterFactory.create() returned null.

diff --git a/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java b/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java
--- /dev/null
+++ b/gson/src/test/java/com/google/gson/regression/JsonAdapterNullSafeTest.java
@@ -0,0 +79,108 @@
+  private static final class Device {
+    @SuppressWarnings("unused")
+    String id;
+    ControlData controlData;
+
+    public Device(String id, ControlData controlData) {
+      this.id = id;
+      this.controlData = controlData;
+    }
+  }
+
+  @JsonAdapter(ControlData.JsonAdapterFactory.class)
+  private static final class ControlData {
+    String id;
+    int category;
+    boolean alwaysOn;
+    @SerializedName("codeset_id") int codesetId;
+    ControlData(String id, int category, boolean alwaysOn, int codesetId) {
+      this.id = id;
+      this.category = category;
+      this.alwaysOn = alwaysOn;
+      this.codesetId = codesetId;
+    }
+
+    /**
+     * DeviceControlData is received as String in JSON instead of proper JSON.
+     * So, we need to write a special type adapter.
+     */
+    static final class JsonAdapterFactory extends StringifiedJsonAdapterFactory<ControlData> {
+      private static final ThreadLocal<Boolean> recursiveCall = new ThreadLocal<Boolean>();
+      public JsonAdapterFactory() {
+        super(recursiveCall, ControlData.class, true);
+      }
+    }
+  }
+
+  /**
+   * Converts an object to Stringified JSON for saving in a JSON field as a string type.
+   */
+  private static class StringifiedJsonAdapterFactory<R> implements TypeAdapterFactory {
+    private final Class<R> targetType;
+    private final ThreadLocal<Boolean> recursiveCall;
+    private final boolean writeAsJson;
+
+    /**
+     * @param recursiveCall provide a static ThreadLocal to workaround a Gson bug where
+     *   annotation-based type adapter factories can't be skipped over.
+     * @param targetType The class whose instances needs to be written in stringified form.
+     * @param writeAsJson Set this to true to write the output as JSON not string.
+     */
+    public StringifiedJsonAdapterFactory(ThreadLocal<Boolean> recursiveCall, Class<R> targetType,
+        boolean writeAsJson) {
+      this.recursiveCall = recursiveCall;
+      this.targetType = targetType;
+      this.writeAsJson = writeAsJson;
+    }
+
+    @SuppressWarnings({"unchecked", "rawtypes"})
+    @Override public <T> TypeAdapter<T> create(final Gson gson, TypeToken<T> type) {
+      if (type.getRawType() != targetType || recursiveCall.get() != null) {
+        recursiveCall.set(null); // clear for subsequent use
+        return null;
+      }
+      recursiveCall.set(Boolean.TRUE);
+      final TypeAdapter<R> delegate = (TypeAdapter) gson.getDelegateAdapter(this, type);
+      return (TypeAdapter) new TypeAdapter<R>() {
+        @Override public void write(JsonWriter out, R value) throws IOException {
+          if (writeAsJson) {
+            delegate.write(out, value);
+          } else {
+            // delegate.toJson(value) will write nulls. avoid that by using gson.toJson()
+            String json = gson.toJson(delegate.toJsonTree(value));
+            out.value(json);
+          }
+        }
+        @Override public R read(JsonReader in) throws IOException {
+          JsonToken token = in.peek();
+          JsonElement root;
+          if (token == JsonToken.BEGIN_OBJECT) {
+            return delegate.read(in);
+          } else { // assume to be string
+            String json = in.nextString();
+            JsonParser parser = new JsonParser();
+            root = parseString(parser, json, null);
+            return root == null ? null : delegate.fromJsonTree(root);
+          }
+        }
+
+        private JsonElement parseString(JsonParser parser, String json, String prevJson)
+            throws IOException {
+          if (json == null || json.trim().isEmpty()) {
+            return null;
+          }
+          JsonElement root = parser.parse(json);
+          if (root instanceof JsonPrimitive) {
+            prevJson = json;
+            json = root.getAsString();
+            if (Objects.equals(json, prevJson)) {
+              throw new JsonSyntaxException("Unexpected Json: " + json);
+            }
+            return parseString(parser, json, prevJson);
+          }
+          return root;
+        }
+      }.nullSafe();
+    }
+  }
+}
