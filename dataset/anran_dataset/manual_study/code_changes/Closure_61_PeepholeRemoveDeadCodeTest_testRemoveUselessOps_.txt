commit 34e4616a924bf272c076039e143e20f1d792731e
Author: chrishenry@google.com <chrishenry@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Tue Jun 28 21:34:27 2011

    Automated g4 rollback.
    
    *** Reason for rollback ***
    
    Breaking Closure test. The test looks correct, so rolling
    back for now.
    
    *** Original change description ***
    
    Don't assume that all Math functions are side-effect free.
    Fixes issue 501
    
    R=johnlenz
    DELTA=36  (9 added, 21 deleted, 6 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=2452
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1226 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java b/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java
--- a/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java
+++ b/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java
@@ -239,61 +222,58 @@
   public void testRemoveUselessOps() {
     // There are four place where expression results are discarded:
     //  - a top level expression EXPR_RESULT
     //  - the LHS of a COMMA
     //  - the FOR init expression
     //  - the FOR increment expression
 
+
     // Known side-effect free functions calls are removed.
     fold("Math.random()", "");
     fold("Math.random(f() + g())", "f(),g();");
     fold("Math.random(f(),g(),h())", "f(),g(),h();");
 
     // Calls to functions with unknown side-effects are are left.
     foldSame("f();");
-    foldSame("(function () { f(); })();");
-
-    // We know that this function has no side effects because of the
-    // PureFunctionIdentifier.
-    fold("(function () {})();", "");
+    foldSame("(function () {})();");
 
     // Uncalled function expressions are removed
     fold("(function () {});", "");
     fold("(function f() {});", "");
     // ... including any code they contain.
     fold("(function () {foo();});", "");
 
     // Useless operators are removed.
     fold("+f()", "f()");
     fold("a=(+f(),g())", "a=(f(),g())");
     fold("a=(true,g())", "a=g()");
     fold("f(),true", "f()");
     fold("f() + g()", "f(),g()");
 
     fold("for(;;+f()){}", "for(;;f()){}");
     fold("for(+f();;g()){}", "for(f();;g()){}");
     fold("for(;;Math.random(f(),g(),h())){}", "for(;;f(),g(),h()){}");
 
     // The optimization cascades into conditional expressions:
     fold("g() && +f()", "g() && f()");
     fold("g() || +f()", "g() || f()");
     fold("x ? g() : +f()", "x ? g() : f()");
 
     fold("+x()", "x()");
     fold("+x() * 2", "x()");
     fold("-(+x() * 2)", "x()");
     fold("2 -(+x() * 2)", "x()");
     fold("x().foo", "x()");
     foldSame("x().foo()");
 
     foldSame("x++");
     foldSame("++x");
     foldSame("x--");
     foldSame("--x");
     foldSame("x = 2");
     foldSame("x *= 2");
 
     // Sanity check, other expression are left alone.
     foldSame("function f() {}");
     foldSame("var x;");
   }
 

commit e9a1cc9c431416354dec3dcb393affd7f41c6596
Author: nicksantos@google.com <nicksantos@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Tue Jun 28 17:12:05 2011

    Don't assume that all Math functions are side-effect free.
    Fixes issue 501
    
    R=johnlenz
    DELTA=36  (21 added, 9 deleted, 6 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=2425
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1222 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java b/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java
--- a/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java
+++ b/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java
@@ -222,58 +239,61 @@
   public void testRemoveUselessOps() {
     // There are four place where expression results are discarded:
     //  - a top level expression EXPR_RESULT
     //  - the LHS of a COMMA
     //  - the FOR init expression
     //  - the FOR increment expression
 
-
     // Known side-effect free functions calls are removed.
     fold("Math.random()", "");
     fold("Math.random(f() + g())", "f(),g();");
     fold("Math.random(f(),g(),h())", "f(),g(),h();");
 
     // Calls to functions with unknown side-effects are are left.
     foldSame("f();");
-    foldSame("(function () {})();");
+    foldSame("(function () { f(); })();");
+
+    // We know that this function has no side effects because of the
+    // PureFunctionIdentifier.
+    fold("(function () {})();", "");
 
     // Uncalled function expressions are removed
     fold("(function () {});", "");
     fold("(function f() {});", "");
     // ... including any code they contain.
     fold("(function () {foo();});", "");
 
     // Useless operators are removed.
     fold("+f()", "f()");
     fold("a=(+f(),g())", "a=(f(),g())");
     fold("a=(true,g())", "a=g()");
     fold("f(),true", "f()");
     fold("f() + g()", "f(),g()");
 
     fold("for(;;+f()){}", "for(;;f()){}");
     fold("for(+f();;g()){}", "for(f();;g()){}");
     fold("for(;;Math.random(f(),g(),h())){}", "for(;;f(),g(),h()){}");
 
     // The optimization cascades into conditional expressions:
     fold("g() && +f()", "g() && f()");
     fold("g() || +f()", "g() || f()");
     fold("x ? g() : +f()", "x ? g() : f()");
 
     fold("+x()", "x()");
     fold("+x() * 2", "x()");
     fold("-(+x() * 2)", "x()");
     fold("2 -(+x() * 2)", "x()");
     fold("x().foo", "x()");
     foldSame("x().foo()");
 
     foldSame("x++");
     foldSame("++x");
     foldSame("x--");
     foldSame("--x");
     foldSame("x = 2");
     foldSame("x *= 2");
 
     // Sanity check, other expression are left alone.
     foldSame("function f() {}");
     foldSame("var x;");
   }
 

commit b326ab0a322d0ece76e61955852ada034122192b
Author: acleung@google.com <acleung@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Mon Mar 7 19:19:31 2011

    Introduces a late peephole optimization pass.
    
    R=johnlenz
    DELTA=206  (116 added, 57 deleted, 33 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=783
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@860 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java b/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java
--- a/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java
+++ b/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java
@@ -235,58 +220,58 @@
   public void testRemoveUselessOps() {
     // There are four place where expression results are discarded:
     //  - a top level expression EXPR_RESULT
     //  - the LHS of a COMMA
     //  - the FOR init expression
     //  - the FOR increment expression
 
 
     // Known side-effect free functions calls are removed.
     fold("Math.random()", "");
-    fold("Math.random(f() + g())", "f(); g();");
-    fold("Math.random(f(),g(),h())", "f();g();h();");
+    fold("Math.random(f() + g())", "f(),g();");
+    fold("Math.random(f(),g(),h())", "f(),g(),h();");
 
     // Calls to functions with unknown side-effects are are left.
     foldSame("f();");
     foldSame("(function () {})();");
 
     // Uncalled function expressions are removed
     fold("(function () {});", "");
     fold("(function f() {});", "");
     // ... including any code they contain.
     fold("(function () {foo();});", "");
 
     // Useless operators are removed.
     fold("+f()", "f()");
     fold("a=(+f(),g())", "a=(f(),g())");
     fold("a=(true,g())", "a=g()");
     fold("f(),true", "f()");
-    fold("f() + g()", "f();g()");
+    fold("f() + g()", "f(),g()");
 
     fold("for(;;+f()){}", "for(;;f()){}");
     fold("for(+f();;g()){}", "for(f();;g()){}");
     fold("for(;;Math.random(f(),g(),h())){}", "for(;;f(),g(),h()){}");
 
     // The optimization cascades into conditional expressions:
     fold("g() && +f()", "g() && f()");
     fold("g() || +f()", "g() || f()");
     fold("x ? g() : +f()", "x ? g() : f()");
 
     fold("+x()", "x()");
     fold("+x() * 2", "x()");
     fold("-(+x() * 2)", "x()");
     fold("2 -(+x() * 2)", "x()");
     fold("x().foo", "x()");
     foldSame("x().foo()");
 
     foldSame("x++");
     foldSame("++x");
     foldSame("x--");
     foldSame("--x");
     foldSame("x = 2");
     foldSame("x *= 2");
 
     // Sanity check, other expression are left alone.
     foldSame("function f() {}");
     foldSame("var x;");
   }
 

commit 48701cc70fde194c05ecd008fc1015b9d82921d1
Author: johnlenz@google.com <johnlenz@google.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Fri Aug 27 18:09:42 2010

    - Generalize unused operation removal and remove a couple of special cases (HOOK, NOT).
    - Add handling for other AST locations that can have unused ops removed (COMMA lhs and FOR increment expressions).
    
    R=acleung
    DELTA=358  (260 added, 80 deleted, 18 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=197245
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@390 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java b/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java
--- a/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java
+++ b/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java
@@ -232,0 +232,58 @@
+  public void testRemoveUselessOps() {
+    // There are four place where expression results are discarded:
+    //  - a top level expression EXPR_RESULT
+    //  - the LHS of a COMMA
+    //  - the FOR init expression
+    //  - the FOR increment expression
+
+
+    // Known side-effect free functions calls are removed.
+    fold("Math.random()", "");
+    fold("Math.random(f() + g())", "f(); g();");
+    fold("Math.random(f(),g(),h())", "f();g();h();");
+
+    // Calls to functions with unknown side-effects are are left.
+    foldSame("f();");
+    foldSame("(function () {})();");
+
+    // Uncalled function expressions are removed
+    fold("(function () {});", "");
+    fold("(function f() {});", "");
+    // ... including any code they contain.
+    fold("(function () {foo();});", "");
+
+    // Useless operators are removed.
+    fold("+f()", "f()");
+    fold("a=(+f(),g())", "a=(f(),g())");
+    fold("a=(true,g())", "a=g()");
+    fold("f(),true", "f()");
+    fold("f() + g()", "f();g()");
+
+    fold("for(;;+f()){}", "for(;;f()){}");
+    fold("for(+f();;g()){}", "for(f();;g()){}");
+    fold("for(;;Math.random(f(),g(),h())){}", "for(;;f(),g(),h()){}");
+
+    // The optimization cascades into conditional expressions:
+    fold("g() && +f()", "g() && f()");
+    fold("g() || +f()", "g() || f()");
+    fold("x ? g() : +f()", "x ? g() : f()");
+
+    fold("+x()", "x()");
+    fold("+x() * 2", "x()");
+    fold("-(+x() * 2)", "x()");
+    fold("2 -(+x() * 2)", "x()");
+    fold("x().foo", "x()");
+    foldSame("x().foo()");
+
+    foldSame("x++");
+    foldSame("++x");
+    foldSame("x--");
+    foldSame("--x");
+    foldSame("x = 2");
+    foldSame("x *= 2");
+
+    // Sanity check, other expression are left alone.
+    foldSame("function f() {}");
+    foldSame("var x;");
+  }
+
