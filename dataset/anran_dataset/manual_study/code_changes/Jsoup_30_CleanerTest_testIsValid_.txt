commit f44d6e64ac97d4a5c119e3e22f22f4d87c94b7e1
Author: Jonathan Hedley <jonathan@hedley.net>
Date:   Thu Nov 24 17:36:13 2016

    Update isValid and cleaner methods
    
    Stricter at enforcing that it is only body content and that there are
    no HTML errors.
    
    Fixes #245
    Fixes #632

diff --git a/src/test/java/org/jsoup/safety/CleanerTest.java b/src/test/java/org/jsoup/safety/CleanerTest.java
index 18232d4f..8f159ce7 100644
--- a/src/test/java/org/jsoup/safety/CleanerTest.java
+++ b/src/test/java/org/jsoup/safety/CleanerTest.java
@@ -3,6 +3,7 @@
 import org.jsoup.Jsoup;
 import org.jsoup.TextUtil;
 import org.jsoup.nodes.Document;
+import org.jsoup.nodes.Element;
 import org.jsoup.nodes.Entities;
 import org.junit.Test;
 
@@ -141,15 +142,38 @@
         assertEquals("<img alt=\"\">", cleanHtml);
     }
 
-    @Test public void testIsValid() {
-        String ok = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>";
+    @Test public void testIsValidBodyHtml() {
+        String ok = "<p>Test <b><a href='http://example.com/' rel='nofollow'>OK</a></b></p>";
+        String ok1 = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>"; // missing enforced is OK because still needs run thru cleaner
         String nok1 = "<p><script></script>Not <b>OK</b></p>";
         String nok2 = "<p align=right>Test Not <b>OK</b></p>";
         String nok3 = "<!-- comment --><p>Not OK</p>"; // comments and the like will be cleaned
+        String nok4 = "<html><head>Foo</head><body><b>OK</b></body></html>"; // not body html
+        String nok5 = "<p>Test <b><a href='http://example.com/' rel='nofollowme'>OK</a></b></p>";
+        String nok6 = "<p>Test <b><a href='http://example.com/'>OK</b></p>"; // missing close tag
+        String nok7 = "</div>What";
         assertTrue(Jsoup.isValid(ok, Whitelist.basic()));
+        assertTrue(Jsoup.isValid(ok1, Whitelist.basic()));
         assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));
         assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));
         assertFalse(Jsoup.isValid(nok3, Whitelist.basic()));
+        assertFalse(Jsoup.isValid(nok4, Whitelist.basic()));
+        assertFalse(Jsoup.isValid(nok5, Whitelist.basic()));
+        assertFalse(Jsoup.isValid(nok6, Whitelist.basic()));
+        assertFalse(Jsoup.isValid(ok, Whitelist.none()));
+        assertFalse(Jsoup.isValid(nok7, Whitelist.basic()));
+    }
+
+    @Test public void testIsValidDocument() {
+        String ok = "<html><head></head><body><p>Hello</p></body><html>";
+        String nok = "<html><head><script>woops</script><title>Hello</title></head><body><p>Hello</p></body><html>";
+
+        Whitelist relaxed = Whitelist.relaxed();
+        Cleaner cleaner = new Cleaner(relaxed);
+        Document okDoc = Jsoup.parse(ok);
+        assertTrue(cleaner.isValid(okDoc));
+        assertFalse(cleaner.isValid(Jsoup.parse(nok)));
+        assertFalse(new Cleaner(Whitelist.none()).isValid(okDoc));
     }
     
     @Test public void resolvesRelativeLinks() {

commit 77add7946ea5bca622b1f4f654f97e62f6db1e95
Author: Jonathan Hedley <jonathan@hedley.net>
Date:   Tue Jun 8 08:09:03 2010

    Fixed test package

diff --git a/src/test/java/org/jsoup/safety/CleanerTest.java b/src/test/java/org/jsoup/safety/CleanerTest.java
new file mode 100644
index 00000000..32ad2684
--- /dev/null
+++ b/src/test/java/org/jsoup/safety/CleanerTest.java
@@ -0,0 +1,110 @@
+package org.jsoup.safety;
+
+import org.jsoup.Jsoup;
+import org.jsoup.TextUtil;
+import org.jsoup.safety.Whitelist;
+import org.junit.Test;
+import static org.junit.Assert.*;
+
+/**
+ Tests for the cleaner.
+
+ @author Jonathan Hedley, jonathan@hedley.net */
+public class CleanerTest {
+    @Test public void simpleBehaviourTest() {
+        String h = "<div><p class=foo><a href='http://evil.com'>Hello <b id=bar>there</b>!</a></div>";
+        String cleanHtml = Jsoup.clean(h, Whitelist.simpleText());
+
+        assertEquals("Hello <b>there</b>!", TextUtil.stripNewlines(cleanHtml));
+    }
+    
+    @Test public void simpleBehaviourTest2() {
+        String h = "Hello <b>there</b>!";
+        String cleanHtml = Jsoup.clean(h, Whitelist.simpleText());
+
+        assertEquals("Hello <b>there</b>!", TextUtil.stripNewlines(cleanHtml));
+    }
+
+    @Test public void basicBehaviourTest() {
+        String h = "<div><p><a href='javascript:sendAllMoney()'>Dodgy</a> <A HREF='HTTP://nice.com'>Nice</p><blockquote>Hello</blockquote>";
+        String cleanHtml = Jsoup.clean(h, Whitelist.basic());
+
+        assertEquals("<p><a rel=\"nofollow\">Dodgy</a> <a href=\"http://nice.com\" rel=\"nofollow\">Nice</a></p><blockquote>Hello</blockquote>",
+                TextUtil.stripNewlines(cleanHtml));
+    }
+    
+    @Test public void basicWithImagesTest() {
+        String h = "<div><p><img src='http://example.com/' alt=Image></p><p><img src='ftp://ftp.example.com'></p></div>";
+        String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages());
+        assertEquals("<p><img src=\"http://example.com/\" alt=\"Image\" /></p><p><img /></p>", TextUtil.stripNewlines(cleanHtml));
+    }
+    
+    @Test public void testRelaxed() {
+        String h = "<h1>Head</h1><td>One<td>Two</td>";
+        String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());
+        assertEquals("<h1>Head</h1><table><tr><td>One</td><td>Two</td></tr></table>", TextUtil.stripNewlines(cleanHtml));
+    }
+    
+    @Test public void testDropComments() {
+        String h = "<p>Hello<!-- no --></p>";
+        String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());
+        assertEquals("<p>Hello</p>", cleanHtml);
+    }
+    
+    @Test public void testDropXmlProc() {
+        String h = "<?import namespace=\"xss\"><p>Hello</p>";
+        String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());
+        assertEquals("<p>Hello</p>", cleanHtml);
+    }
+    
+    @Test public void testDropScript() {
+        String h = "<SCRIPT SRC=//ha.ckers.org/.j><SCRIPT>alert(/XSS/.source)</SCRIPT>";
+        String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());
+        assertEquals("", cleanHtml);
+    }
+    
+    @Test public void testDropImageScript() {
+        String h = "<IMG SRC=\"javascript:alert('XSS')\">";
+        String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());
+        assertEquals("<img />", cleanHtml);
+    }
+    
+    @Test public void testCleanJavascriptHref() {
+        String h = "<A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A>";
+        String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());
+        assertEquals("<a>XSS</a>", cleanHtml);
+    }
+
+    @Test public void testDropsUnknownTags() {
+        String h = "<p><custom foo=true>Test</custom></p>";
+        String cleanHtml = Jsoup.clean(h, Whitelist.relaxed());
+        assertEquals("<p>Test</p>", cleanHtml);
+    }
+    
+    @Test public void testHandlesEmptyAttributes() {
+        String h = "<img alt=\"\" src= unknown=''>";
+        String cleanHtml = Jsoup.clean(h, Whitelist.basicWithImages());
+        assertEquals("<img alt=\"\" />", cleanHtml);
+    }
+
+    @Test public void testIsValid() {
+        String ok = "<p>Test <b><a href='http://example.com/'>OK</a></b></p>";
+        String nok1 = "<p><script></script>Not <b>OK</b></p>";
+        String nok2 = "<p align=right>Test Not <b>OK</b></p>";
+        assertTrue(Jsoup.isValid(ok, Whitelist.basic()));
+        assertFalse(Jsoup.isValid(nok1, Whitelist.basic()));
+        assertFalse(Jsoup.isValid(nok2, Whitelist.basic()));
+    }
+    
+    @Test public void resolvesRelativeLinks() {
+        String html = "<a href='/foo'>Link</a>";
+        String clean = Jsoup.clean(html, "http://example.com/", Whitelist.basic());
+        assertEquals("<a href=\"http://example.com/foo\" rel=\"nofollow\">Link</a>", clean);
+    }
+    
+    @Test public void dropsUnresolvableRelativeLinks() {
+        String html = "<a href='/foo'>Link</a>";
+        String clean = Jsoup.clean(html, Whitelist.basic());
+        assertEquals("<a rel=\"nofollow\">Link</a>", clean);
+    }
+}
