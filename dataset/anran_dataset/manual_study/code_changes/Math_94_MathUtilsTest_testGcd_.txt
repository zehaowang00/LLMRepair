commit a96e597894562c2cf01fc678f6c435d65ccc31c5
Author: Luc Maisonobe <luc@apache.org>
Date:   Fri Jan 16 18:06:32 2009

    fixed overflow error in gdc computation
    JIRA: MATH-238
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@735178 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/util/MathUtilsTest.java b/src/test/org/apache/commons/math/util/MathUtilsTest.java
--- a/src/test/org/apache/commons/math/util/MathUtilsTest.java
+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java
@@ -273,23 +273,26 @@
     public void testGcd() {
         int a = 30;
         int b = 50;
         int c = 77;
 
         assertEquals(0, MathUtils.gcd(0, 0));
 
         assertEquals(b, MathUtils.gcd(0, b));
         assertEquals(a, MathUtils.gcd(a, 0));
         assertEquals(b, MathUtils.gcd(0, -b));
         assertEquals(a, MathUtils.gcd(-a, 0));
 
         assertEquals(10, MathUtils.gcd(a, b));
         assertEquals(10, MathUtils.gcd(-a, b));
         assertEquals(10, MathUtils.gcd(a, -b));
         assertEquals(10, MathUtils.gcd(-a, -b));
 
         assertEquals(1, MathUtils.gcd(a, c));
         assertEquals(1, MathUtils.gcd(-a, c));
         assertEquals(1, MathUtils.gcd(a, -c));
         assertEquals(1, MathUtils.gcd(-a, -c));
+
+        assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));
+
     }
 

commit 430f487ebc550a07ed2f06a758cd2dd480669fc9
Author: Brent Worden <brentworden@apache.org>
Date:   Wed Oct 31 03:23:01 2007

    MATH-154. Added addAndCheck, mulAndCheck, and subAndCheck MathUtils methods for long integer arguments.
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@590577 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/util/MathUtilsTest.java b/src/test/org/apache/commons/math/util/MathUtilsTest.java
--- a/src/test/org/apache/commons/math/util/MathUtilsTest.java
+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java
@@ -210,101 +251,23 @@
+    public void testGcd() {
+        int a = 30;
+        int b = 50;
+        int c = 77;
 
-    /**
-     * Exact recursive implementation to test against
-     */
-    private long binomialCoefficient(int n, int k) {
-        if ((n == k) || (k == 0)) {
-            return 1;
-        }
-        if ((k == 1) || (k == n - 1)) {
-            return n;
-        }
-        return binomialCoefficient(n - 1, k - 1) +
-            binomialCoefficient(n - 1, k);
-    }
-
-    /**
-     * Finds the largest values of n for which binomialCoefficient and
-     * binomialCoefficientDouble will return values that fit in a long, double,
-     * resp.  Remove comments around test below to get this in test-report
-     *
-        public void testLimits() {
-            findBinomialLimits();
-        }
-     */
-
-    private void findBinomialLimits() {
-        /**
-         * will kick out 66 as the limit for long
-         */
-        boolean foundLimit = false;
-        int test = 10;
-        while (!foundLimit) {
-            try {
-                MathUtils.binomialCoefficient(test, test / 2);
-            } catch (ArithmeticException ex) {
-                foundLimit = true;
-                System.out.println
-                    ("largest n for binomialCoefficient = " + (test - 1) );
-            }
-            test++;
-        }
-
-       /**
-        * will kick out 1029 as the limit for double
-        */
-        foundLimit = false;
-        test = 10;
-        while (!foundLimit) {
-            double x = MathUtils.binomialCoefficientDouble(test, test / 2);
-            if (Double.isInfinite(x)) {
-                foundLimit = true;
-                System.out.println
-                    ("largest n for binomialCoefficientD = " + (test - 1) );
-            }
-            test++;
-        }
-    }
+        assertEquals(0, MathUtils.gcd(0, 0));
 
-    /**
-     * Finds the largest values of n for which factiorial and
-     * factorialDouble will return values that fit in a long, double,
-     * resp.  Remove comments around test below to get this in test-report
+        assertEquals(b, MathUtils.gcd(0, b));
+        assertEquals(a, MathUtils.gcd(a, 0));
+        assertEquals(b, MathUtils.gcd(0, -b));
+        assertEquals(a, MathUtils.gcd(-a, 0));
 
-        public void testFactiorialLimits() {
-            findFactorialLimits();
-        }
-     */
+        assertEquals(10, MathUtils.gcd(a, b));
+        assertEquals(10, MathUtils.gcd(-a, b));
+        assertEquals(10, MathUtils.gcd(a, -b));
+        assertEquals(10, MathUtils.gcd(-a, -b));
 
-    private void findFactorialLimits() {
-        /**
-         * will kick out 20 as the limit for long
-         */
-        boolean foundLimit = false;
-        int test = 10;
-        while (!foundLimit) {
-            try {
-                MathUtils.factorial(test);
-            } catch (ArithmeticException ex) {
-                foundLimit = true;
-                System.out.println
-                    ("largest n for factorial = " + (test - 1) );
-            }
-            test++;
-        }
-
-       /**
-        * will kick out 170 as the limit for double
-        */
-        foundLimit = false;
-        test = 10;
-        while (!foundLimit) {
-            double x = MathUtils.factorialDouble(test);
-            if (Double.isInfinite(x)) {
-                foundLimit = true;
-                System.out.println
-                    ("largest n for factorialDouble = " + (test - 1) );
-            }
-            test++;
-        }
+        assertEquals(1, MathUtils.gcd(a, c));
+        assertEquals(1, MathUtils.gcd(-a, c));
+        assertEquals(1, MathUtils.gcd(a, -c));
+        assertEquals(1, MathUtils.gcd(-a, -c));
     }
 

commit be430a405aafbd36853e2f696d0a1dc10989aa89
Author: Luc Maisonobe <luc@apache.org>
Date:   Thu Aug 16 16:36:33 2007

    fixed numerous warnings in test code (unused fields/results, fields only set to null)
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@566833 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/util/MathUtilsTest.java b/src/test/org/apache/commons/math/util/MathUtilsTest.java
--- a/src/test/org/apache/commons/math/util/MathUtilsTest.java
+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java
@@ -211,101 +210,101 @@
 
     /**
      * Exact recursive implementation to test against
      */
     private long binomialCoefficient(int n, int k) {
         if ((n == k) || (k == 0)) {
             return 1;
         }
         if ((k == 1) || (k == n - 1)) {
             return n;
         }
         return binomialCoefficient(n - 1, k - 1) +
             binomialCoefficient(n - 1, k);
     }
 
     /**
      * Finds the largest values of n for which binomialCoefficient and
      * binomialCoefficientDouble will return values that fit in a long, double,
      * resp.  Remove comments around test below to get this in test-report
      *
         public void testLimits() {
             findBinomialLimits();
         }
      */
 
     private void findBinomialLimits() {
         /**
          * will kick out 66 as the limit for long
          */
         boolean foundLimit = false;
         int test = 10;
         while (!foundLimit) {
             try {
-                double x = MathUtils.binomialCoefficient(test, test / 2);
+                MathUtils.binomialCoefficient(test, test / 2);
             } catch (ArithmeticException ex) {
                 foundLimit = true;
                 System.out.println
                     ("largest n for binomialCoefficient = " + (test - 1) );
             }
             test++;
         }
 
        /**
         * will kick out 1029 as the limit for double
         */
         foundLimit = false;
         test = 10;
         while (!foundLimit) {
             double x = MathUtils.binomialCoefficientDouble(test, test / 2);
             if (Double.isInfinite(x)) {
                 foundLimit = true;
                 System.out.println
                     ("largest n for binomialCoefficientD = " + (test - 1) );
             }
             test++;
         }
     }
 
     /**
      * Finds the largest values of n for which factiorial and
      * factorialDouble will return values that fit in a long, double,
      * resp.  Remove comments around test below to get this in test-report
 
         public void testFactiorialLimits() {
             findFactorialLimits();
         }
      */
 
     private void findFactorialLimits() {
         /**
          * will kick out 20 as the limit for long
          */
         boolean foundLimit = false;
         int test = 10;
         while (!foundLimit) {
             try {
-                double x = MathUtils.factorial(test);
+                MathUtils.factorial(test);
             } catch (ArithmeticException ex) {
                 foundLimit = true;
                 System.out.println
                     ("largest n for factorial = " + (test - 1) );
             }
             test++;
         }
 
        /**
         * will kick out 170 as the limit for double
         */
         foundLimit = false;
         test = 10;
         while (!foundLimit) {
             double x = MathUtils.factorialDouble(test);
             if (Double.isInfinite(x)) {
                 foundLimit = true;
                 System.out.println
                     ("largest n for factorialDouble = " + (test - 1) );
             }
             test++;
         }
     }
 

commit 0a904461932f2c0455611e77ec6a8d8aced2980b
Author: Mark R. Diggory <mdiggory@apache.org>
Date:   Fri Nov 14 17:25:28 2003

    Attempting to recover last revision.
    
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141013 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/util/MathUtilsTest.java b/src/test/org/apache/commons/math/util/MathUtilsTest.java
--- /dev/null
+++ b/src/test/org/apache/commons/math/util/MathUtilsTest.java
@@ -0,0 +202,101 @@
+
+    /**
+     * Exact recursive implementation to test against
+     */
+    private long binomialCoefficient(int n, int k) {
+        if ((n == k) || (k == 0)) {
+            return 1;
+        }
+        if ((k == 1) || (k == n - 1)) {
+            return n;
+        }
+        return binomialCoefficient(n - 1, k - 1) +
+            binomialCoefficient(n - 1, k);
+    }
+
+    /**
+     * Finds the largest values of n for which binomialCoefficient and
+     * binomialCoefficientDouble will return values that fit in a long, double,
+     * resp.  Remove comments around test below to get this in test-report
+     *
+        public void testLimits() {
+            findBinomialLimits();
+        }
+     */
+
+    private void findBinomialLimits() {
+        /**
+         * will kick out 66 as the limit for long
+         */
+        boolean foundLimit = false;
+        int test = 10;
+        while (!foundLimit) {
+            try {
+                double x = MathUtils.binomialCoefficient(test, test / 2);
+            } catch (ArithmeticException ex) {
+                foundLimit = true;
+                System.out.println
+                    ("largest n for binomialCoefficient = " + (test - 1) );
+            }
+            test++;
+        }
+
+       /**
+        * will kick out 1029 as the limit for double
+        */
+        foundLimit = false;
+        test = 10;
+        while (!foundLimit) {
+            double x = MathUtils.binomialCoefficientDouble(test, test / 2);
+            if (Double.isInfinite(x)) {
+                foundLimit = true;
+                System.out.println
+                    ("largest n for binomialCoefficientD = " + (test - 1) );
+            }
+            test++;
+        }
+    }
+
+    /**
+     * Finds the largest values of n for which factiorial and
+     * factorialDouble will return values that fit in a long, double,
+     * resp.  Remove comments around test below to get this in test-report
+
+        public void testFactiorialLimits() {
+            findFactorialLimits();
+        }
+     */
+
+    private void findFactorialLimits() {
+        /**
+         * will kick out 20 as the limit for long
+         */
+        boolean foundLimit = false;
+        int test = 10;
+        while (!foundLimit) {
+            try {
+                double x = MathUtils.factorial(test);
+            } catch (ArithmeticException ex) {
+                foundLimit = true;
+                System.out.println
+                    ("largest n for factorial = " + (test - 1) );
+            }
+            test++;
+        }
+
+       /**
+        * will kick out 170 as the limit for double
+        */
+        foundLimit = false;
+        test = 10;
+        while (!foundLimit) {
+            double x = MathUtils.factorialDouble(test);
+            if (Double.isInfinite(x)) {
+                foundLimit = true;
+                System.out.println
+                    ("largest n for factorialDouble = " + (test - 1) );
+            }
+            test++;
+        }
+    }
+
