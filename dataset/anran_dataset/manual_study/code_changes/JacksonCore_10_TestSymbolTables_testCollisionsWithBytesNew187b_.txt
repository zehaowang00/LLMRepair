commit c2823b4de28120d86aeba9215f0231d990a8eb47
Author: Cowtowncoder <tatu.saloranta@iki.fi>
Date:   Fri Jul 31 22:43:48 2015

    Fix #207

diff --git a/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java b/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java
--- a/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java
+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java
@@ -303,27 +303,27 @@
     public void testCollisionsWithBytesNew187b() throws IOException
     {
         ByteQuadsCanonicalizer symbols =
                 ByteQuadsCanonicalizer.createRoot(1).makeChild(JsonFactory.Feature.collectDefaults());
 
         final int COUNT = 10000;
         for (int i = 0; i < COUNT; ++i) {
             String id = String.valueOf(i);
             int[] quads = calcQuads(id.getBytes("UTF-8"));
             symbols.addName(id, quads, quads.length);
         }
         assertEquals(COUNT, symbols.size());
         
-        assertEquals(32768, symbols.bucketCount());
+        assertEquals(16384, symbols.bucketCount());
 
         // fragile, but essential to verify low collision counts;
-        // anywhere between 70-80% primary matches
-        assertEquals(9386, symbols.primaryCount());
-        // secondary between 10-20%
-        assertEquals(345, symbols.secondaryCount());
+        // here bit low primary, 55% 
+        assertEquals(5402, symbols.primaryCount());
+        // secondary higher than usual, above 25%
+        assertEquals(2744, symbols.secondaryCount());
         // and most of remaining in tertiary
-        assertEquals(257, symbols.tertiaryCount());
-        // but number of spill-overs starts to grow beyond 30k quite a lot:
-        assertEquals(12, symbols.spilloverCount());
+        assertEquals(1834, symbols.tertiaryCount());
+        // with a bit of spillover
+        assertEquals(20, symbols.spilloverCount());
     }
 
     // [core#191]: similarly, but for "short" symbols:

commit e50e46bdcede3c6137ebcd146e1dbb4b648c29d3
Merge: fe4ca6a0 8fbde688
Author: Cowtowncoder <tatu.saloranta@iki.fi>
Date:   Wed Apr 22 19:59:07 2015

    Merge branch '2.5'


commit 8fbde688c8502bedaeee121b75598b1882d43d9e
Author: Cowtowncoder <tatu.saloranta@iki.fi>
Date:   Wed Apr 22 19:58:52 2015

    Add tests to try to reproduce #191 (no luck yet)

diff --git a/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java b/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java
--- a/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java
+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java
@@ -134,2 +134,4 @@
         assertEquals(10, symbols.maxCollisionLength());
     }
+
+    // [core#191]: similarly, but for "short" symbols:

commit fe4ca6a0ec9092a66ba42ad8efd7a7fee166a8e3
Author: Tatu Saloranta <tatu.saloranta@iki.fi>
Date:   Mon Mar 30 02:11:02 2015

    Further improvements to reduce hash collisions, now for 1-4 byte ids

diff --git a/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java b/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java
--- a/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java
+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java
@@ -315,8 +324,25 @@
-        assertEquals(32446, symbols.primaryCount());
+    public void testCollisionsWithBytesNew187b() throws IOException
+    {
+        ByteQuadsCanonicalizer symbols =
+                ByteQuadsCanonicalizer.createRoot(1).makeChild(JsonFactory.Feature.collectDefaults());
+
+        final int COUNT = 10000;
+        for (int i = 0; i < COUNT; ++i) {
+            String id = String.valueOf(i);
+            int[] quads = calcQuads(id.getBytes("UTF-8"));
+            symbols.addName(id, quads, quads.length);
+        }
+        assertEquals(COUNT, symbols.size());
+        
+        assertEquals(32768, symbols.bucketCount());
+
+        // fragile, but essential to verify low collision counts;
+        // anywhere between 70-80% primary matches
+        assertEquals(9386, symbols.primaryCount());
         // secondary between 10-20%
-        assertEquals(6472, symbols.secondaryCount());
+        assertEquals(345, symbols.secondaryCount());
         // and most of remaining in tertiary
-        assertEquals(3773, symbols.tertiaryCount());
+        assertEquals(257, symbols.tertiaryCount());
         // but number of spill-overs starts to grow beyond 30k quite a lot:
-        assertEquals(309, symbols.spilloverCount());
+        assertEquals(12, symbols.spilloverCount());
     }

commit 8db559f7c0ba108f7b8c4a76b2ba00825e3fe8cb
Author: Tatu Saloranta <tatu.saloranta@iki.fi>
Date:   Fri Mar 27 01:20:27 2015

    Merge branch '2.5'
    
    Conflicts:
            src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java
            src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java


commit e0a02273c70bb5d44ebbe70e97aec06e83a28f99
Author: Tatu Saloranta <tatu.saloranta@iki.fi>
Date:   Fri Mar 27 00:05:39 2015

    Improve situation wrt #187, both by increasing limit to 200, and by adding one more operation for 2-quad (5-8 byte) case, resulting in significantly shorter max collision chain length

diff --git a/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java b/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java
--- a/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java
+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java
@@ -95,0 +134,2 @@
+        assertEquals(10, symbols.maxCollisionLength());
+    }
