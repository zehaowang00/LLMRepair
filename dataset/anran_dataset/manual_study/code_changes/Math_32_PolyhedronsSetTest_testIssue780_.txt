commit f81847d8079753ce45b049813730055188a22efb
Author: Luc Maisonobe <luc@apache.org>
Date:   Sun May 13 11:51:56 2012

    Fixed a wrong assumption on BSP tree attributes.
    
    The assumption was that the attribute was always a boolean when boundary
    was empty. This assumption was false when emptiness resulted from a
    collapsed boundary. Boolean attributes occur only at leaf nodes, so it
    is the cut sub-hyperplane that needed to be checked.
    
    JIRA: MATH-780
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1337929 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java b/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java
--- a/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java
+++ b/src/test/java/org/apache/commons/math3/geometry/euclidean/threed/PolyhedronsSetTest.java
@@ -231,0 +237,48 @@
+    public void testIssue780() {
+        float[] coords = {
+            1.000000f, -1.000000f, -1.000000f, 
+            1.000000f, -1.000000f, 1.000000f, 
+            -1.000000f, -1.000000f, 1.000000f, 
+            -1.000000f, -1.000000f, -1.000000f, 
+            1.000000f, 1.000000f, -1f, 
+            0.999999f, 1.000000f, 1.000000f,   // 1.000000f, 1.000000f, 1.000000f, 
+            -1.000000f, 1.000000f, 1.000000f, 
+            -1.000000f, 1.000000f, -1.000000f};
+        int[] indices = {
+            0, 1, 2, 0, 2, 3, 
+            4, 7, 6, 4, 6, 5, 
+            0, 4, 5, 0, 5, 1, 
+            1, 5, 6, 1, 6, 2, 
+            2, 6, 7, 2, 7, 3, 
+            4, 0, 3, 4, 3, 7};
+        ArrayList<SubHyperplane<Euclidean3D>> subHyperplaneList = new ArrayList<SubHyperplane<Euclidean3D>>();
+        for (int idx = 0; idx < indices.length; idx += 3) {
+            int idxA = indices[idx] * 3;
+            int idxB = indices[idx + 1] * 3;
+            int idxC = indices[idx + 2] * 3;
+            Vector3D v_1 = new Vector3D(coords[idxA], coords[idxA + 1], coords[idxA + 2]);
+            Vector3D v_2 = new Vector3D(coords[idxB], coords[idxB + 1], coords[idxB + 2]);
+            Vector3D v_3 = new Vector3D(coords[idxC], coords[idxC + 1], coords[idxC + 2]);
+            Vector3D[] vertices = {v_1, v_2, v_3};
+            Plane polyPlane = new Plane(v_1, v_2, v_3);
+            ArrayList<SubHyperplane<Euclidean2D>> lines = new ArrayList<SubHyperplane<Euclidean2D>>();
+
+            Vector2D[] projPts = new Vector2D[vertices.length];
+            for (int ptIdx = 0; ptIdx < projPts.length; ptIdx++) {
+                projPts[ptIdx] = polyPlane.toSubSpace(vertices[ptIdx]);
+            }
+
+            SubLine lineInPlane = null;
+            for (int ptIdx = 0; ptIdx < projPts.length; ptIdx++) {
+                lineInPlane = new SubLine(projPts[ptIdx], projPts[(ptIdx + 1) % projPts.length]);
+                lines.add(lineInPlane);
+            }
+            Region<Euclidean2D> polyRegion = new PolygonsSet(lines);
+            SubPlane polygon = new SubPlane(polyPlane, polyRegion);
+            subHyperplaneList.add(polygon);
+        }
+        PolyhedronsSet polyhedronsSet = new PolyhedronsSet(subHyperplaneList);
+        Assert.assertEquals( 8.0, polyhedronsSet.getSize(), 3.0e-6);
+        Assert.assertEquals(24.0, polyhedronsSet.getBoundarySize(), 5.0e-6);
+    }
+
