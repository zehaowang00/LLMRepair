commit 91cc42ba0493938aa53585720b315b62c5784a96
Author: Gilles Sadowski <erans@apache.org>
Date:   Tue Dec 20 08:30:29 2011

    MATH-728
    Offset by one bug. Suggested fix provided by Bruce Johnson.
    I've added a unit test that exercises the use of more interpolation points;
    two previously unexplored code paths are now being traversed.
    
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1221253 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java b/src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java
--- a/src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java
+++ b/src/test/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java
@@ -234,0 +236,32 @@
+    public void testConstrainedRosenWithMoreInterpolationPoints() {
+        final double[] startPoint = point(DIM, 0.1);
+        final double[][] boundaries = boundaries(DIM, -1, 2);
+        final RealPointValuePair expected = new RealPointValuePair(point(DIM, 1.0), 0.0);
+
+        // This should have been 78 because in the code the hard limit is
+        // said to be
+        //   ((DIM + 1) * (DIM + 2)) / 2 - (2 * DIM + 1)
+        // i.e. 78 in this case, but the test fails for 48, 59, 62, 63, 64,
+        // 65, 66, ...
+        final int maxAdditionalPoints = 47;
+
+        for (int num = 1; num <= maxAdditionalPoints; num++) {
+            doTest(new Rosen(), startPoint, boundaries,
+                   GoalType.MINIMIZE,
+                   1e-12, 1e-6, 2000,
+                   num,
+                   expected,
+                   "num=" + num);
+        }
+    }
+
+    /**
+     * @param func Function to optimize.
+     * @param startPoint Starting point.
+     * @param boundaries Upper / lower point limit.
+     * @param goal Minimization or maximization.
+     * @param fTol Tolerance relative error on the objective function.
+     * @param pointTol Tolerance for checking that the optimum is correct.
+     * @param maxEvaluations Maximum number of evaluations.
+     * @param expected Expected point / value.
+     */
