commit a6b2e992e17cee0d4cb5a2da8242a20b8e5a8fc3
Author: Gilles Sadowski <erans@apache.org>
Date:   Sat Dec 29 08:16:17 2012

    MATH-924
    Using a diagonal matrix to avoid exhausting memory.
    
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1426758 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java b/src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java
--- a/src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java
+++ b/src/test/java/org/apache/commons/math3/fitting/PolynomialFitterTest.java
@@ -223,0 +224,26 @@
+    public void testLargeSample() {
+        Random randomizer = new Random(0x5551480dca5b369bl);
+        double maxError = 0;
+        for (int degree = 0; degree < 10; ++degree) {
+            PolynomialFunction p = buildRandomPolynomial(degree, randomizer);
+
+            PolynomialFitter fitter = new PolynomialFitter(new LevenbergMarquardtOptimizer());
+            for (int i = 0; i < 40000; ++i) {
+                double x = -1.0 + i / 20000.0;
+                fitter.addObservedPoint(1.0, x,
+                                        p.value(x) + 0.1 * randomizer.nextGaussian());
+            }
+
+            final double[] init = new double[degree + 1];
+            PolynomialFunction fitted = new PolynomialFunction(fitter.fit(init));
+
+            for (double x = -1.0; x < 1.0; x += 0.01) {
+                double error = FastMath.abs(p.value(x) - fitted.value(x)) /
+                              (1.0 + FastMath.abs(p.value(x)));
+                maxError = FastMath.max(maxError, error);
+                Assert.assertTrue(FastMath.abs(error) < 0.01);
+            }
+        }
+        Assert.assertTrue(maxError > 0.001);
+    }
+
