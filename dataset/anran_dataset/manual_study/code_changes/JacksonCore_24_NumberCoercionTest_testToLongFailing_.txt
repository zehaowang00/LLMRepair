commit c4dd84e4d505baa90d8d1675c1f60f8d6ce90db8
Author: Tatu Saloranta <tatu.saloranta@iki.fi>
Date:   Wed Jan 16 23:42:31 2019

    Fix #508

diff --git a/src/test/java/com/fasterxml/jackson/core/read/NumberCoercionTest.java b/src/test/java/com/fasterxml/jackson/core/read/NumberCoercionTest.java
--- a/src/test/java/com/fasterxml/jackson/core/read/NumberCoercionTest.java
+++ b/src/test/java/com/fasterxml/jackson/core/read/NumberCoercionTest.java
@@ -163,31 +176,35 @@
     public void testToLongFailing() throws Exception
     {
         for (int mode : ALL_STREAMING_MODES) {
             JsonParser p;
 
             // BigInteger -> error
             BigInteger big = BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.TEN);
             p = createParser(mode, String.valueOf(big));
             assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
             assertEquals(NumberType.BIG_INTEGER, p.getNumberType());
             assertEquals(big, p.getBigIntegerValue());
             assertEquals(big, p.getNumberValue());
             try {
                 p.getLongValue();
                 fail("Should not pass");
-            } catch (JsonParseException e) {
+            } catch (InputCoercionException e) {
                 verifyException(e, "out of range of long");
+                assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
+                assertEquals(Long.TYPE, e.getTargetType());
             }
             BigInteger small = BigInteger.valueOf(Long.MIN_VALUE).subtract(BigInteger.TEN);
             p = createParser(mode, String.valueOf(small));
             assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
             assertEquals(small, p.getBigIntegerValue());
             try {
                 p.getLongValue();
                 fail("Should not pass");
-            } catch (JsonParseException e) {
+            } catch (InputCoercionException e) {
                 verifyException(e, "out of range of long");
+                assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
+                assertEquals(Long.TYPE, e.getTargetType());
             }
         }
     }
     

commit 53704126c059701353df32403d49414a30df0dfb
Author: Tatu Saloranta <tatu.saloranta@iki.fi>
Date:   Sat Nov 5 01:10:07 2016

    Moar test coverage, now 74%/66%, similar to jackson-databind's

diff --git a/src/test/java/com/fasterxml/jackson/core/read/NumberCoercionTest.java b/src/test/java/com/fasterxml/jackson/core/read/NumberCoercionTest.java
--- /dev/null
+++ b/src/test/java/com/fasterxml/jackson/core/read/NumberCoercionTest.java
@@ -0,0 +163,31 @@
+    public void testToLongFailing() throws Exception
+    {
+        for (int mode : ALL_STREAMING_MODES) {
+            JsonParser p;
+
+            // BigInteger -> error
+            BigInteger big = BigInteger.valueOf(Long.MAX_VALUE).add(BigInteger.TEN);
+            p = createParser(mode, String.valueOf(big));
+            assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
+            assertEquals(NumberType.BIG_INTEGER, p.getNumberType());
+            assertEquals(big, p.getBigIntegerValue());
+            assertEquals(big, p.getNumberValue());
+            try {
+                p.getLongValue();
+                fail("Should not pass");
+            } catch (JsonParseException e) {
+                verifyException(e, "out of range of long");
+            }
+            BigInteger small = BigInteger.valueOf(Long.MIN_VALUE).subtract(BigInteger.TEN);
+            p = createParser(mode, String.valueOf(small));
+            assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
+            assertEquals(small, p.getBigIntegerValue());
+            try {
+                p.getLongValue();
+                fail("Should not pass");
+            } catch (JsonParseException e) {
+                verifyException(e, "out of range of long");
+            }
+        }
+    }
+    
