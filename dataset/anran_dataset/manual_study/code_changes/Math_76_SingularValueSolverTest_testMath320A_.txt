commit 39e2ad8af8fdedac51144158061cb31e7863c3a1
Author: Luc Maisonobe <luc@apache.org>
Date:   Thu Dec 31 12:52:16 2009

    Singular Value Decomposition now computes either the compact SVD (using only positive singular values) or truncated SVD (using a user-specified maximal number of singular values).
    Fixed Singular Value Decomposition solving of singular systems.
    JIRA: MATH-320, MATH-321
    
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@894908 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java b/src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java
--- a/src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java
+++ b/src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java
@@ -142,50 +168,44 @@
     public void testMath320A() {
         RealMatrix rm = new Array2DRowRealMatrix(new double[][] {
             { 1.0, 2.0, 3.0 }, { 2.0, 3.0, 4.0 }, { 3.0, 5.0, 7.0 }
         });
         double s439  = Math.sqrt(439.0);
         double[] reference = new double[] {
             Math.sqrt(3.0 * (21.0 + s439)), Math.sqrt(3.0 * (21.0 - s439))
         };
         SingularValueDecomposition svd =
             new SingularValueDecompositionImpl(rm);
+
+        // check we get the expected theoretical singular values
         double[] singularValues = svd.getSingularValues();
+        Assert.assertEquals(reference.length, singularValues.length);
         for (int i = 0; i < reference.length; ++i) {
             Assert.assertEquals(reference[i], singularValues[i], 4.0e-13);
         }
-        regularElements(svd.getU());
-        regularElements(svd.getVT());
-//        double[] b = new double[] { 5.0, 6.0, 7.0 };
-//        double[] resSVD = svd.getSolver().solve(b);
-//        Assert.assertEquals(rm.getColumnDimension(), resSVD.length);
-//        System.out.println("resSVD = " + resSVD[0] + " " + resSVD[1] + " " + resSVD[2]);
-//        double minResidual = Double.POSITIVE_INFINITY;
-//        double d0Min = Double.NaN;
-//        double d1Min = Double.NaN;
-//        double d2Min = Double.NaN;
-//        double h = 0.01;
-//        int    k = 100;
-//        for (double d0 = -k * h; d0 <= k * h; d0 += h) {
-//            for (double d1 = -k * h ; d1 <= k * h; d1 += h) {
-//                for (double d2 = -k * h; d2 <= k * h; d2 += h) {
-//                    double[] f = rm.operate(new double[] { resSVD[0] + d0, resSVD[1] + d1, resSVD[2] + d2 });
-//                    double residual = Math.sqrt((f[0] - b[0]) * (f[0] - b[0]) +
-//                                                (f[1] - b[1]) * (f[1] - b[1]) +
-//                                                (f[2] - b[2]) * (f[2] - b[2]));
-//                    if (residual < minResidual) {
-//                        d0Min = d0;
-//                        d1Min = d1;
-//                        d2Min = d2;
-//                        minResidual = residual;
-//                    }
-//                }
-//            }
-//        }
-//        System.out.println(d0Min + " " + d1Min + " " + d2Min + " -> " + minResidual);
-//        Assert.assertEquals(0, d0Min, 1.0e-15);
-//        Assert.assertEquals(0, d1Min, 1.0e-15);
-//        Assert.assertEquals(0, d2Min, 1.0e-15);
-    }
 
+        // check the decomposition allows to recover the original matrix
+        RealMatrix recomposed = svd.getU().multiply(svd.getS()).multiply(svd.getVT());
+        Assert.assertEquals(0.0, recomposed.subtract(rm).getNorm(), 5.0e-13);
+
+        // check we can solve a singular system
+        double[] b = new double[] { 5.0, 6.0, 7.0 };
+        double[] resSVD = svd.getSolver().solve(b);
+        Assert.assertEquals(rm.getColumnDimension(), resSVD.length);
+
+        // check the solution really minimizes the residuals
+        double svdMinResidual = residual(rm, resSVD, b);
+        double epsilon = 2 * Math.ulp(svdMinResidual);
+        double h = 0.1;
+        int    k = 3;
+        for (double d0 = -k * h; d0 <= k * h; d0 += h) {
+            for (double d1 = -k * h ; d1 <= k * h; d1 += h) {
+                for (double d2 = -k * h; d2 <= k * h; d2 += h) {
+                    double[] x = new double[] { resSVD[0] + d0, resSVD[1] + d1, resSVD[2] + d2 };
+                    Assert.assertTrue((residual(rm, x, b) - svdMinResidual) > -epsilon);
+                }
+            }
+        }
+
+    }
 
     @Test

commit e62bb3b7a7a3bbf0f2139a5d111c05f2f09d3221
Author: Luc Maisonobe <luc@apache.org>
Date:   Wed Dec 30 18:17:01 2009

    changed SVD to compute either compact SVD (using only positive singular values)
    or truncated SVD (using only singular values up to a user-specified max number)
    started fix of SVD solver that did not compute a least square solution
    the fix is not complete yet as it seems the solution does not really gives the
    smallest possible residuals. See for example the commented out parts of
    testMath320A in SingularValueSolverTest.
    JIRA: MATH-320
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@894735 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java b/src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java
--- a/src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java
+++ b/src/test/java/org/apache/commons/math/linear/SingularValueSolverTest.java
@@ -168,1 +142,50 @@
-        assertEquals(3.0, svd.getConditionNumber(), 1.0e-15);
+    public void testMath320A() {
+        RealMatrix rm = new Array2DRowRealMatrix(new double[][] {
+            { 1.0, 2.0, 3.0 }, { 2.0, 3.0, 4.0 }, { 3.0, 5.0, 7.0 }
+        });
+        double s439  = Math.sqrt(439.0);
+        double[] reference = new double[] {
+            Math.sqrt(3.0 * (21.0 + s439)), Math.sqrt(3.0 * (21.0 - s439))
+        };
+        SingularValueDecomposition svd =
+            new SingularValueDecompositionImpl(rm);
+        double[] singularValues = svd.getSingularValues();
+        for (int i = 0; i < reference.length; ++i) {
+            Assert.assertEquals(reference[i], singularValues[i], 4.0e-13);
+        }
+        regularElements(svd.getU());
+        regularElements(svd.getVT());
+//        double[] b = new double[] { 5.0, 6.0, 7.0 };
+//        double[] resSVD = svd.getSolver().solve(b);
+//        Assert.assertEquals(rm.getColumnDimension(), resSVD.length);
+//        System.out.println("resSVD = " + resSVD[0] + " " + resSVD[1] + " " + resSVD[2]);
+//        double minResidual = Double.POSITIVE_INFINITY;
+//        double d0Min = Double.NaN;
+//        double d1Min = Double.NaN;
+//        double d2Min = Double.NaN;
+//        double h = 0.01;
+//        int    k = 100;
+//        for (double d0 = -k * h; d0 <= k * h; d0 += h) {
+//            for (double d1 = -k * h ; d1 <= k * h; d1 += h) {
+//                for (double d2 = -k * h; d2 <= k * h; d2 += h) {
+//                    double[] f = rm.operate(new double[] { resSVD[0] + d0, resSVD[1] + d1, resSVD[2] + d2 });
+//                    double residual = Math.sqrt((f[0] - b[0]) * (f[0] - b[0]) +
+//                                                (f[1] - b[1]) * (f[1] - b[1]) +
+//                                                (f[2] - b[2]) * (f[2] - b[2]));
+//                    if (residual < minResidual) {
+//                        d0Min = d0;
+//                        d1Min = d1;
+//                        d2Min = d2;
+//                        minResidual = residual;
+//                    }
+//                }
+//            }
+//        }
+//        System.out.println(d0Min + " " + d1Min + " " + d2Min + " -> " + minResidual);
+//        Assert.assertEquals(0, d0Min, 1.0e-15);
+//        Assert.assertEquals(0, d1Min, 1.0e-15);
+//        Assert.assertEquals(0, d2Min, 1.0e-15);
+    }
+
+
+    @Test

commit 17238b2e4570213c4d31d4df6805b24dadc468c1
Author: Luc Maisonobe <luc@apache.org>
Date:   Fri Dec 5 09:05:50 2008

    improved matrix decomposition API.
    solving a linear system AX = B is now done by a call like:
      RealVector x = new XyzSolver(new XyzDecomposition(a)).solve(b);
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@723736 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/linear/SingularValueSolverTest.java b/src/test/org/apache/commons/math/linear/SingularValueSolverTest.java
--- /dev/null
+++ b/src/test/org/apache/commons/math/linear/SingularValueSolverTest.java
@@ -0,0 +161,1 @@
+        assertEquals(3.0, svd.getConditionNumber(), 1.0e-15);
