commit 3ce4716848eb71b6e78a4545a2cc0c27e74a29b3
Author: Nicholas.J.Santos <Nicholas.J.Santos@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Thu Mar 25 11:58:20 2010

    Tweak to allow chained initialization:
    new Node(Token.EXPR_RESULT, a).copyInformationFrom(a); (John)
    R=alan
    DELTA=10  (6 added, 0 deleted, 4 changed)
    
    
    Teach PureFunctionnIdentifier about (f || g)() calls (antonio)
    Fixes issue 116
    R=john
    DELTA=105  (84 added, 0 deleted, 21 changed)
    
    Fix decomposition issue
    Anonymous function declaration can not be side-effected and are
    side-effect free. (John)
    R=alan
    DELTA=115  (101 added, 8 deleted, 6 changed)
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@154 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java b/test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java
--- a/test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java
+++ b/test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java
@@ -61,24 +63,26 @@
   public void testCanExposeExpression2() {
     helperCanExposeExpression(
         DecompositionType.MOVABLE, "foo()", "foo");
     helperCanExposeExpression(
         DecompositionType.MOVABLE, "x = foo()", "foo");
     helperCanExposeExpression(
         DecompositionType.MOVABLE, "var x = foo()", "foo");
     helperCanExposeExpression(
         DecompositionType.MOVABLE, "if(foo()){}", "foo");
     helperCanExposeExpression(
         DecompositionType.MOVABLE, "switch(foo()){}", "foo");
     helperCanExposeExpression(
         DecompositionType.MOVABLE, "switch(foo()){}", "foo");
     helperCanExposeExpression(
         DecompositionType.MOVABLE, "function (){ return foo();}", "foo");
 
     helperCanExposeExpression(
         DecompositionType.MOVABLE, "x = foo() && 1", "foo");
     helperCanExposeExpression(
         DecompositionType.MOVABLE, "x = foo() || 1", "foo");
     helperCanExposeExpression(
         DecompositionType.MOVABLE, "x = foo() ? 0 : 1", "foo");
+    helperCanExposeExpression(
+        DecompositionType.MOVABLE, "(function(a){b = a})(foo())", "foo");
   }
 

commit 6b49cfd9022fe111bdad745c78ea877fbc2f7ba3
Author: nicholas.j.santos@gmail.com <nicholas.j.santos@gmail.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Tue Nov 3 18:51:57 2009

    Initial commit.
    
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java b/test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java
--- /dev/null
+++ b/test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java
@@ -0,0 +56,24 @@
+  public void testCanExposeExpression2() {
+    helperCanExposeExpression(
+        DecompositionType.MOVABLE, "foo()", "foo");
+    helperCanExposeExpression(
+        DecompositionType.MOVABLE, "x = foo()", "foo");
+    helperCanExposeExpression(
+        DecompositionType.MOVABLE, "var x = foo()", "foo");
+    helperCanExposeExpression(
+        DecompositionType.MOVABLE, "if(foo()){}", "foo");
+    helperCanExposeExpression(
+        DecompositionType.MOVABLE, "switch(foo()){}", "foo");
+    helperCanExposeExpression(
+        DecompositionType.MOVABLE, "switch(foo()){}", "foo");
+    helperCanExposeExpression(
+        DecompositionType.MOVABLE, "function (){ return foo();}", "foo");
+
+    helperCanExposeExpression(
+        DecompositionType.MOVABLE, "x = foo() && 1", "foo");
+    helperCanExposeExpression(
+        DecompositionType.MOVABLE, "x = foo() || 1", "foo");
+    helperCanExposeExpression(
+        DecompositionType.MOVABLE, "x = foo() ? 0 : 1", "foo");
+  }
+
