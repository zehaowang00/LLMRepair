commit a4f9188a55e6935d4d38ae97806af4d59e671588
Author: Dimitri Pourbaix <dimpbx@apache.org>
Date:   Thu Aug 5 04:48:00 2010

    MATH-377 fixed
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@982507 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java b/src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java
--- a/src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java
+++ b/src/test/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java
@@ -398,49 +398,49 @@
     public void testCircleFitting() throws FunctionEvaluationException, OptimizationException {
         Circle circle = new Circle();
         circle.addPoint( 30.0,  68.0);
         circle.addPoint( 50.0,  -6.0);
         circle.addPoint(110.0, -20.0);
         circle.addPoint( 35.0,  15.0);
         circle.addPoint( 45.0,  97.0);
         LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
         VectorialPointValuePair optimum =
             optimizer.optimize(circle, new double[] { 0, 0, 0, 0, 0 }, new double[] { 1, 1, 1, 1, 1 },
                                new double[] { 98.680, 47.345 });
         assertTrue(optimizer.getEvaluations() < 10);
         assertTrue(optimizer.getJacobianEvaluations() < 10);
         double rms = optimizer.getRMS();
         assertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * rms,  1.0e-10);
         Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);
         assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10);
         assertEquals(96.07590211815305, center.x,      1.0e-10);
         assertEquals(48.13516790438953, center.y,      1.0e-10);
         double[][] cov = optimizer.getCovariances();
         assertEquals(1.839, cov[0][0], 0.001);
         assertEquals(0.731, cov[0][1], 0.001);
         assertEquals(cov[0][1], cov[1][0], 1.0e-14);
         assertEquals(0.786, cov[1][1], 0.001);
         double[] errors = optimizer.guessParametersErrors();
         assertEquals(1.384, errors[0], 0.001);
         assertEquals(0.905, errors[1], 0.001);
 
         // add perfect measurements and check errors are reduced
         double  r = circle.getRadius(center);
         for (double d= 0; d < 2 * Math.PI; d += 0.01) {
             circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));
         }
         double[] target = new double[circle.getN()];
         Arrays.fill(target, 0.0);
         double[] weights = new double[circle.getN()];
         Arrays.fill(weights, 2.0);
         optimizer.optimize(circle, target, weights, new double[] { 98.680, 47.345 });
         cov = optimizer.getCovariances();
         assertEquals(0.0016, cov[0][0], 0.001);
         assertEquals(3.2e-7, cov[0][1], 1.0e-9);
         assertEquals(cov[0][1], cov[1][0], 1.0e-14);
         assertEquals(0.0016, cov[1][1], 0.001);
         errors = optimizer.guessParametersErrors();
-        assertEquals(0.002, errors[0], 0.001);
-        assertEquals(0.002, errors[1], 0.001);
+        assertEquals(0.004, errors[0], 0.001);
+        assertEquals(0.004, errors[1], 0.001);
 
     }
 

commit 38c7118389807feea11a786541886eb76980e40c
Author: Luc Maisonobe <luc@apache.org>
Date:   Wed Jul 1 12:03:28 2009

    fixed a number of warnings identified by findbugs eclipse plugin version 1.3.9
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@790243 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java b/src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java
--- a/src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java
+++ b/src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java
@@ -400,50 +400,49 @@
     public void testCircleFitting() throws FunctionEvaluationException, OptimizationException {
         Circle circle = new Circle();
         circle.addPoint( 30.0,  68.0);
         circle.addPoint( 50.0,  -6.0);
         circle.addPoint(110.0, -20.0);
         circle.addPoint( 35.0,  15.0);
         circle.addPoint( 45.0,  97.0);
         LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
         VectorialPointValuePair optimum =
             optimizer.optimize(circle, new double[] { 0, 0, 0, 0, 0 }, new double[] { 1, 1, 1, 1, 1 },
                                new double[] { 98.680, 47.345 });
         assertTrue(optimizer.getEvaluations() < 10);
         assertTrue(optimizer.getJacobianEvaluations() < 10);
         double rms = optimizer.getRMS();
         assertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * rms,  1.0e-10);
         Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);
         assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10);
         assertEquals(96.07590211815305, center.x,      1.0e-10);
         assertEquals(48.13516790438953, center.y,      1.0e-10);
         double[][] cov = optimizer.getCovariances();
         assertEquals(1.839, cov[0][0], 0.001);
         assertEquals(0.731, cov[0][1], 0.001);
         assertEquals(cov[0][1], cov[1][0], 1.0e-14);
         assertEquals(0.786, cov[1][1], 0.001);
         double[] errors = optimizer.guessParametersErrors();
         assertEquals(1.384, errors[0], 0.001);
         assertEquals(0.905, errors[1], 0.001);
 
         // add perfect measurements and check errors are reduced
         double  r = circle.getRadius(center);
         for (double d= 0; d < 2 * Math.PI; d += 0.01) {
             circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));
         }
         double[] target = new double[circle.getN()];
         Arrays.fill(target, 0.0);
         double[] weights = new double[circle.getN()];
         Arrays.fill(weights, 2.0);
-        optimum =
-            optimizer.optimize(circle, target, weights, new double[] { 98.680, 47.345 });
+        optimizer.optimize(circle, target, weights, new double[] { 98.680, 47.345 });
         cov = optimizer.getCovariances();
         assertEquals(0.0016, cov[0][0], 0.001);
         assertEquals(3.2e-7, cov[0][1], 1.0e-9);
         assertEquals(cov[0][1], cov[1][0], 1.0e-14);
         assertEquals(0.0016, cov[1][1], 0.001);
         errors = optimizer.guessParametersErrors();
         assertEquals(0.002, errors[0], 0.001);
         assertEquals(0.002, errors[1], 0.001);
 
     }
 

commit ae6753dd5e4ce3b0ed9bd67f92d2d4e92587300f
Author: Luc Maisonobe <luc@apache.org>
Date:   Tue Mar 24 18:15:08 2009

    updated general algorithms with latest interfaces definitions
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@758058 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java b/src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java
--- a/src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java
+++ b/src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java
@@ -398,50 +400,50 @@
-    public void testCircleFitting() throws ObjectiveException, OptimizationException {
+    public void testCircleFitting() throws FunctionEvaluationException, OptimizationException {
         Circle circle = new Circle();
         circle.addPoint( 30.0,  68.0);
         circle.addPoint( 50.0,  -6.0);
         circle.addPoint(110.0, -20.0);
         circle.addPoint( 35.0,  15.0);
         circle.addPoint( 45.0,  97.0);
         LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
         VectorialPointValuePair optimum =
             optimizer.optimize(circle, new double[] { 0, 0, 0, 0, 0 }, new double[] { 1, 1, 1, 1, 1 },
                                new double[] { 98.680, 47.345 });
         assertTrue(optimizer.getEvaluations() < 10);
         assertTrue(optimizer.getJacobianEvaluations() < 10);
         double rms = optimizer.getRMS();
         assertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * rms,  1.0e-10);
         Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);
         assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10);
         assertEquals(96.07590211815305, center.x,      1.0e-10);
         assertEquals(48.13516790438953, center.y,      1.0e-10);
         double[][] cov = optimizer.getCovariances();
         assertEquals(1.839, cov[0][0], 0.001);
         assertEquals(0.731, cov[0][1], 0.001);
         assertEquals(cov[0][1], cov[1][0], 1.0e-14);
         assertEquals(0.786, cov[1][1], 0.001);
         double[] errors = optimizer.guessParametersErrors();
         assertEquals(1.384, errors[0], 0.001);
         assertEquals(0.905, errors[1], 0.001);
 
         // add perfect measurements and check errors are reduced
         double  r = circle.getRadius(center);
         for (double d= 0; d < 2 * Math.PI; d += 0.01) {
             circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));
         }
         double[] target = new double[circle.getN()];
         Arrays.fill(target, 0.0);
         double[] weights = new double[circle.getN()];
         Arrays.fill(weights, 2.0);
         optimum =
             optimizer.optimize(circle, target, weights, new double[] { 98.680, 47.345 });
         cov = optimizer.getCovariances();
         assertEquals(0.0016, cov[0][0], 0.001);
         assertEquals(3.2e-7, cov[0][1], 1.0e-9);
         assertEquals(cov[0][1], cov[1][0], 1.0e-14);
         assertEquals(0.0016, cov[1][1], 0.001);
         errors = optimizer.guessParametersErrors();
         assertEquals(0.002, errors[0], 0.001);
         assertEquals(0.002, errors[1], 0.001);
 
     }
 

commit 8541f303370cec9a25f2b32b3d660b3f188913f0
Author: Luc Maisonobe <luc@apache.org>
Date:   Sun Mar 15 15:11:02 2009

    adapted old Levenberg-Marquardt estimator to new top level optimizers API
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@754727 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java b/src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java
--- /dev/null
+++ b/src/test/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java
@@ -0,0 +394,50 @@
+    public void testCircleFitting() throws ObjectiveException, OptimizationException {
+        Circle circle = new Circle();
+        circle.addPoint( 30.0,  68.0);
+        circle.addPoint( 50.0,  -6.0);
+        circle.addPoint(110.0, -20.0);
+        circle.addPoint( 35.0,  15.0);
+        circle.addPoint( 45.0,  97.0);
+        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
+        VectorialPointValuePair optimum =
+            optimizer.optimize(circle, new double[] { 0, 0, 0, 0, 0 }, new double[] { 1, 1, 1, 1, 1 },
+                               new double[] { 98.680, 47.345 });
+        assertTrue(optimizer.getEvaluations() < 10);
+        assertTrue(optimizer.getJacobianEvaluations() < 10);
+        double rms = optimizer.getRMS();
+        assertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * rms,  1.0e-10);
+        Point2D.Double center = new Point2D.Double(optimum.getPointRef()[0], optimum.getPointRef()[1]);
+        assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10);
+        assertEquals(96.07590211815305, center.x,      1.0e-10);
+        assertEquals(48.13516790438953, center.y,      1.0e-10);
+        double[][] cov = optimizer.getCovariances();
+        assertEquals(1.839, cov[0][0], 0.001);
+        assertEquals(0.731, cov[0][1], 0.001);
+        assertEquals(cov[0][1], cov[1][0], 1.0e-14);
+        assertEquals(0.786, cov[1][1], 0.001);
+        double[] errors = optimizer.guessParametersErrors();
+        assertEquals(1.384, errors[0], 0.001);
+        assertEquals(0.905, errors[1], 0.001);
+
+        // add perfect measurements and check errors are reduced
+        double  r = circle.getRadius(center);
+        for (double d= 0; d < 2 * Math.PI; d += 0.01) {
+            circle.addPoint(center.x + r * Math.cos(d), center.y + r * Math.sin(d));
+        }
+        double[] target = new double[circle.getN()];
+        Arrays.fill(target, 0.0);
+        double[] weights = new double[circle.getN()];
+        Arrays.fill(weights, 2.0);
+        optimum =
+            optimizer.optimize(circle, target, weights, new double[] { 98.680, 47.345 });
+        cov = optimizer.getCovariances();
+        assertEquals(0.0016, cov[0][0], 0.001);
+        assertEquals(3.2e-7, cov[0][1], 1.0e-9);
+        assertEquals(cov[0][1], cov[1][0], 1.0e-14);
+        assertEquals(0.0016, cov[1][1], 0.001);
+        errors = optimizer.guessParametersErrors();
+        assertEquals(0.002, errors[0], 0.001);
+        assertEquals(0.002, errors[1], 0.001);
+
+    }
+
