commit 465282f1ca28a208b06c47b55fd292d4631c55da
Author: Nicholas.J.Santos <Nicholas.J.Santos@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Tue Jun 22 20:19:37 2010

    Change on 2010/06/22 by nicksantos
    
            Inferred return types.
            Fixes issue 143.
            I eventually decided that it was wrong for the subtype's method
            to affect the supertype's method, since this will make incremental
            compilation a lot harder in the long run.
    
            R=moedinger
            DELTA=481  (313 added, 38 deleted, 130 changed)
    
    
    Revision created by MOE tool push_codebase.
    MOE_MIGRATION=34007
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@249 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -6483,19 +6559,19 @@
   public void testPrototypePropertyReference() throws Exception {
     TypeCheckResult p = parseAndTypeCheckWithScope(""
         + "/** @constructor */\n"
         + "function Foo() {}\n"
         + "/** @param {number} a */\n"
         + "Foo.prototype.bar = function(a){};\n"
         + "/** @param {Foo} f */\n"
         + "function baz(f) {\n"
         + "  Foo.prototype.bar.call(f, 3);\n"
         + "}");
     assertEquals(0, compiler.getErrorCount());
     assertEquals(0, compiler.getWarningCount());
 
     assertTrue(p.scope.getVar("Foo").getType() instanceof FunctionType);
     FunctionType fooType = (FunctionType) p.scope.getVar("Foo").getType();
-    assertEquals("function (this:Foo, number): ?",
+    assertEquals("function (this:Foo, number): undefined",
                  fooType.getPrototype().getPropertyType("bar").toString());
   }
 

commit 66485d3df654fa92b7500d5e15b58300677edca3
Author: Nicholas.J.Santos <Nicholas.J.Santos@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Fri Jan 15 16:56:00 2010

    Use non-generic data structures in a bunch of places.
    (More for readability reasons than anything else)
    
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@70 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
--- a/test/com/google/javascript/jscomp/TypeCheckTest.java
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -6181,19 +6180,19 @@
   public void testPrototypePropertyReference() throws Exception {
-    Pair<Node, Scope> p = parseAndTypeCheckWithScope(""
+    TypeCheckResult p = parseAndTypeCheckWithScope(""
         + "/** @constructor */\n"
         + "function Foo() {}\n"
         + "/** @param {number} a */\n"
         + "Foo.prototype.bar = function(a){};\n"
         + "/** @param {Foo} f */\n"
         + "function baz(f) {\n"
         + "  Foo.prototype.bar.call(f, 3);\n"
         + "}");
     assertEquals(0, compiler.getErrorCount());
     assertEquals(0, compiler.getWarningCount());
 
-    assertTrue(p.second.getVar("Foo").getType() instanceof FunctionType);
-    FunctionType fooType = (FunctionType) p.second.getVar("Foo").getType();
+    assertTrue(p.scope.getVar("Foo").getType() instanceof FunctionType);
+    FunctionType fooType = (FunctionType) p.scope.getVar("Foo").getType();
     assertEquals("function (this:Foo, number): ?",
                  fooType.getPrototype().getPropertyType("bar").toString());
   }
 

commit 77b7c78d4aeeb6471f2f668a06c0f61a68f95ccd
Author: nicholas.j.santos@gmail.com <nicholas.j.santos@gmail.com@b0f006be-c8cd-11de-a2e8-8d36a3108c74>
Date:   Mon Jan 4 15:18:21 2010

    Add more unit tests for type checking.
    
    Add phase optimization.
    
    Fix a type inference bug.
    
    String.prototype.split may not return null.
    
    
    
    git-svn-id: https://closure-compiler.googlecode.com/svn/trunk@55 b0f006be-c8cd-11de-a2e8-8d36a3108c74

diff --git a/test/com/google/javascript/jscomp/TypeCheckTest.java b/test/com/google/javascript/jscomp/TypeCheckTest.java
--- /dev/null
+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java
@@ -0,0 +6160,19 @@
+  public void testPrototypePropertyReference() throws Exception {
+    Pair<Node, Scope> p = parseAndTypeCheckWithScope(""
+        + "/** @constructor */\n"
+        + "function Foo() {}\n"
+        + "/** @param {number} a */\n"
+        + "Foo.prototype.bar = function(a){};\n"
+        + "/** @param {Foo} f */\n"
+        + "function baz(f) {\n"
+        + "  Foo.prototype.bar.call(f, 3);\n"
+        + "}");
+    assertEquals(0, compiler.getErrorCount());
+    assertEquals(0, compiler.getWarningCount());
+
+    assertTrue(p.second.getVar("Foo").getType() instanceof FunctionType);
+    FunctionType fooType = (FunctionType) p.second.getVar("Foo").getType();
+    assertEquals("function (this:Foo, number): ?",
+                 fooType.getPrototype().getPropertyType("bar").toString());
+  }
+
