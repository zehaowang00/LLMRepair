commit 687b2e62b7c6e81cd9d5c872b7fa9cc8fd3f1509
Author: Sebastian Bazley <sebb@apache.org>
Date:   Thu Jul 25 21:03:52 2013

    LANG-747 NumberUtils does not handle Long Hex numbers
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1507169 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
@@ -249,2 +250,38 @@
+    public void TestLang747() {
+        assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber("0x8000"));
+        assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber("0x80000"));
+        assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber("0x800000"));
+        assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber("0x8000000"));
+        assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber("0x7FFFFFFF"));
+        assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber("0x80000000"));
+        assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber("0xFFFFFFFF"));
+
+        // Leading zero tests
+        assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber("0x08000000"));
+        assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber("0x007FFFFFFF"));
+        assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber("0x080000000"));
+        assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber("0x00FFFFFFFF"));
+
+        assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber("0x800000000"));
+        assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber("0x8000000000"));
+        assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber("0x80000000000"));
+        assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber("0x800000000000"));
+        assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber("0x8000000000000"));
+        assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber("0x80000000000000"));
+        assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber("0x800000000000000"));
+        assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF"));
+        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long
+        assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000"));
+        assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF"));
+
+        // Leading zero tests
+        assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber("0x00080000000000000"));
+        assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber("0x0800000000000000"));
+        assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF"));
+        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long
+        assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000"));
+        assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF"));
+    }
+
     @Test(expected=NumberFormatException.class)
     // Check that the code fails to create a valid number when preceeded by -- rather than -

commit 0d36b962faeb64ae075c7d3de3032251a6cc0807
Author: Sebastian Bazley <sebb@apache.org>
Date:   Wed Mar 27 12:09:55 2013

    Factor out number failure tests
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1461685 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
@@ -235,7 +236,2 @@
-        // Check that the code fails to create a valid number when preceeded by -- rather than -
-        try {
-            NumberUtils.createNumber("--1.1E-700F");
-            fail("Expected NumberFormatException");
-        } catch (final NumberFormatException nfe) {
-            // expected
-        }
+    @Test(expected=NumberFormatException.class)
+    // Check that the code fails to create a valid number when preceeded by -- rather than -

commit ae6928a0354b67a222c5ea6f9082d864a15e9f59
Author: Gary D. Gregory <ggregory@apache.org>
Date:   Tue Jan 22 02:09:45 2013

    Add final modifier to local variables.
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1436770 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
@@ -239,7 +239,7 @@
         // Check that the code fails to create a valid number when preceeded by -- rather than -
         try {
             NumberUtils.createNumber("--1.1E-700F");
             fail("Expected NumberFormatException");
-        } catch (NumberFormatException nfe) {
+        } catch (final NumberFormatException nfe) {
             // expected
         }

commit e71f6dd3f2f70c640ae73d28b432b3a69ffcab4b
Author: Sebastian Bazley <sebb@apache.org>
Date:   Sun Nov 11 08:16:22 2012

    LANG-822: NumberUtils#createNumber - bad behaviour for leading "--"
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1407973 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
@@ -232,0 +239,7 @@
+        // Check that the code fails to create a valid number when preceeded by -- rather than -
+        try {
+            NumberUtils.createNumber("--1.1E-700F");
+            fail("Expected NumberFormatException");
+        } catch (NumberFormatException nfe) {
+            // expected
+        }
