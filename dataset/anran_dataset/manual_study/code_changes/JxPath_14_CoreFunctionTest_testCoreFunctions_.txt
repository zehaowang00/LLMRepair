commit 8a04f62fa755ec165152a03a516c186d20e8cd46
Author: Matthew Jason Benson <mbenson@apache.org>
Date:   Mon Aug 27 12:49:28 2007

    [JXPATH-102] Core rounding functions don't handle NaN or infinite values correctly; from Sergey Vladimirov
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@570179 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java b/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
--- a/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
+++ b/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
@@ -63,58 +63,68 @@
     public void testCoreFunctions() {
         assertXPathValue(context, "string(2)", "2");
         assertXPathValue(context, "string($nan)", "NaN");
         assertXPathValue(context, "string(-$nan)", "NaN");
         assertXPathValue(context, "string(-2 div 0)", "-Infinity");
         assertXPathValue(context, "string(2 div 0)", "Infinity");
         assertXPathValue(context, "concat('a', 'b', 'c')", "abc");
         assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE);
         assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE);
         assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE);
         assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE);
         assertXPathValue(
             context,
             "substring-before('1999/04/01', '/')",
             "1999");
         assertXPathValue(
             context,
             "substring-after('1999/04/01', '/')",
             "04/01");
         assertXPathValue(context, "substring('12345', 2, 3)", "234");
         assertXPathValue(context, "substring('12345', 2)", "2345");
         assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234");
         assertXPathValue(context, "substring('12345', 0, 3)", "12");
         assertXPathValue(context, "substring('12345', 0 div 0, 3)", "");
         assertXPathValue(context, "substring('12345', 1, 0 div 0)", "");
         assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345");
         assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", "");
         assertXPathValue(context, "substring('12345', 6, 6)", "");
         assertXPathValue(context, "substring('12345', 7, 8)", "");
         assertXPathValue(context, "substring('12345', 7)", "");
         assertXPathValue(context, "string-length('12345')", new Double(5));
         assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def");
         assertXPathValue(context, "normalize-space('abc def')", "abc def");
         assertXPathValue(context, "normalize-space('   ')", "");
         assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA");
         assertXPathValue(context, "boolean(1)", Boolean.TRUE);
         assertXPathValue(context, "boolean(0)", Boolean.FALSE);
         assertXPathValue(context, "boolean('x')", Boolean.TRUE);
         assertXPathValue(context, "boolean('')", Boolean.FALSE);
         assertXPathValue(context, "boolean(/list)", Boolean.TRUE);
         assertXPathValue(context, "boolean(/list[position() < 1])", Boolean.FALSE);
 
         assertXPathValue(context, "true()", Boolean.TRUE);
         assertXPathValue(context, "false()", Boolean.FALSE);
         assertXPathValue(context, "not(false())", Boolean.TRUE);
         assertXPathValue(context, "not(true())", Boolean.FALSE);
         assertXPathValue(context, "null()", null);        
         assertXPathValue(context, "number('1')", new Double(1));
         assertXPathValue(context, "number($bool_true)", new Double(1));
         assertXPathValue(context, "number($bool_false)", new Double(0));
         assertXPathValue(context, "floor(1.5)", new Double(1));
         assertXPathValue(context, "floor(-1.5)", new Double(-2));
         assertXPathValue(context, "ceiling(1.5)", new Double(2));
         assertXPathValue(context, "ceiling(-1.5)", new Double(-1));
         assertXPathValue(context, "round(1.5)", new Double(2));
         assertXPathValue(context, "round(-1.5)", new Double(-1));
+
+        assertXPathValue(context, "floor('NaN')", new Double(Double.NaN));
+        assertXPathValue(context, "floor(-2 div 0)", new Double(Double.NEGATIVE_INFINITY));
+        assertXPathValue(context, "floor(2 div 0)", new Double(Double.POSITIVE_INFINITY));
+        assertXPathValue(context, "ceiling('NaN')", new Double(Double.NaN));
+        assertXPathValue(context, "ceiling(-2 div 0)", new Double(Double.NEGATIVE_INFINITY));
+        assertXPathValue(context, "ceiling(2 div 0)", new Double(Double.POSITIVE_INFINITY));
+        assertXPathValue(context, "round('NaN')", new Double(Double.NaN));
+        assertXPathValue(context, "round(-2 div 0)", new Double(Double.NEGATIVE_INFINITY));
+        assertXPathValue(context, "round(2 div 0)", new Double(Double.POSITIVE_INFINITY));
     }
 

commit 2c5243995eceb0de0a71271ce2ea7c02c38649fb
Author: Matthew Jason Benson <mbenson@apache.org>
Date:   Mon Aug 27 12:01:27 2007

    move non-numeric function test
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/jxpath/trunk@570169 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java b/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
--- a/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
+++ b/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
@@ -63,58 +63,58 @@
     public void testCoreFunctions() {
         assertXPathValue(context, "string(2)", "2");
         assertXPathValue(context, "string($nan)", "NaN");
         assertXPathValue(context, "string(-$nan)", "NaN");
         assertXPathValue(context, "string(-2 div 0)", "-Infinity");
         assertXPathValue(context, "string(2 div 0)", "Infinity");
         assertXPathValue(context, "concat('a', 'b', 'c')", "abc");
         assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE);
         assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE);
         assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE);
         assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE);
         assertXPathValue(
             context,
             "substring-before('1999/04/01', '/')",
             "1999");
         assertXPathValue(
             context,
             "substring-after('1999/04/01', '/')",
             "04/01");
         assertXPathValue(context, "substring('12345', 2, 3)", "234");
         assertXPathValue(context, "substring('12345', 2)", "2345");
         assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234");
         assertXPathValue(context, "substring('12345', 0, 3)", "12");
         assertXPathValue(context, "substring('12345', 0 div 0, 3)", "");
         assertXPathValue(context, "substring('12345', 1, 0 div 0)", "");
         assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345");
         assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", "");
         assertXPathValue(context, "substring('12345', 6, 6)", "");
         assertXPathValue(context, "substring('12345', 7, 8)", "");
         assertXPathValue(context, "substring('12345', 7)", "");
         assertXPathValue(context, "string-length('12345')", new Double(5));
         assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def");
         assertXPathValue(context, "normalize-space('abc def')", "abc def");
         assertXPathValue(context, "normalize-space('   ')", "");
         assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA");
         assertXPathValue(context, "boolean(1)", Boolean.TRUE);
         assertXPathValue(context, "boolean(0)", Boolean.FALSE);
         assertXPathValue(context, "boolean('x')", Boolean.TRUE);
         assertXPathValue(context, "boolean('')", Boolean.FALSE);
         assertXPathValue(context, "boolean(/list)", Boolean.TRUE);
         assertXPathValue(context, "boolean(/list[position() < 1])", Boolean.FALSE);
 
         assertXPathValue(context, "true()", Boolean.TRUE);
         assertXPathValue(context, "false()", Boolean.FALSE);
         assertXPathValue(context, "not(false())", Boolean.TRUE);
         assertXPathValue(context, "not(true())", Boolean.FALSE);
+        assertXPathValue(context, "null()", null);        
         assertXPathValue(context, "number('1')", new Double(1));
         assertXPathValue(context, "number($bool_true)", new Double(1));
         assertXPathValue(context, "number($bool_false)", new Double(0));
         assertXPathValue(context, "floor(1.5)", new Double(1));
         assertXPathValue(context, "floor(-1.5)", new Double(-2));
         assertXPathValue(context, "ceiling(1.5)", new Double(2));
         assertXPathValue(context, "ceiling(-1.5)", new Double(-1));
         assertXPathValue(context, "round(1.5)", new Double(2));
         assertXPathValue(context, "round(-1.5)", new Double(-1));
-        assertXPathValue(context, "null()", null);        
     }
 

commit 1860d750670f46e64c276bae92d93f545dfb5bd5
Author: Matthew Jason Benson <mbenson@apache.org>
Date:   Fri Jul 13 15:41:41 2007

    test boolean(nodeset)
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@556123 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java b/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
--- a/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
+++ b/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
@@ -63,56 +63,58 @@
     public void testCoreFunctions() {
         assertXPathValue(context, "string(2)", "2");
         assertXPathValue(context, "string($nan)", "NaN");
         assertXPathValue(context, "string(-$nan)", "NaN");
         assertXPathValue(context, "string(-2 div 0)", "-Infinity");
         assertXPathValue(context, "string(2 div 0)", "Infinity");
         assertXPathValue(context, "concat('a', 'b', 'c')", "abc");
         assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE);
         assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE);
         assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE);
         assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE);
         assertXPathValue(
             context,
             "substring-before('1999/04/01', '/')",
             "1999");
         assertXPathValue(
             context,
             "substring-after('1999/04/01', '/')",
             "04/01");
         assertXPathValue(context, "substring('12345', 2, 3)", "234");
         assertXPathValue(context, "substring('12345', 2)", "2345");
         assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234");
         assertXPathValue(context, "substring('12345', 0, 3)", "12");
         assertXPathValue(context, "substring('12345', 0 div 0, 3)", "");
         assertXPathValue(context, "substring('12345', 1, 0 div 0)", "");
         assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345");
         assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", "");
         assertXPathValue(context, "substring('12345', 6, 6)", "");
         assertXPathValue(context, "substring('12345', 7, 8)", "");
         assertXPathValue(context, "substring('12345', 7)", "");
         assertXPathValue(context, "string-length('12345')", new Double(5));
         assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def");
         assertXPathValue(context, "normalize-space('abc def')", "abc def");
         assertXPathValue(context, "normalize-space('   ')", "");
         assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA");
         assertXPathValue(context, "boolean(1)", Boolean.TRUE);
         assertXPathValue(context, "boolean(0)", Boolean.FALSE);
         assertXPathValue(context, "boolean('x')", Boolean.TRUE);
         assertXPathValue(context, "boolean('')", Boolean.FALSE);
+        assertXPathValue(context, "boolean(/list)", Boolean.TRUE);
+        assertXPathValue(context, "boolean(/list[position() < 1])", Boolean.FALSE);
 
         assertXPathValue(context, "true()", Boolean.TRUE);
         assertXPathValue(context, "false()", Boolean.FALSE);
         assertXPathValue(context, "not(false())", Boolean.TRUE);
         assertXPathValue(context, "not(true())", Boolean.FALSE);
         assertXPathValue(context, "number('1')", new Double(1));
         assertXPathValue(context, "number($bool_true)", new Double(1));
         assertXPathValue(context, "number($bool_false)", new Double(0));
         assertXPathValue(context, "floor(1.5)", new Double(1));
         assertXPathValue(context, "floor(-1.5)", new Double(-2));
         assertXPathValue(context, "ceiling(1.5)", new Double(2));
         assertXPathValue(context, "ceiling(-1.5)", new Double(-1));
         assertXPathValue(context, "round(1.5)", new Double(2));
         assertXPathValue(context, "round(-1.5)", new Double(-1));
         assertXPathValue(context, "null()", null);        
     }
 

commit ff95445e7f18e18f3ca78037965af1f4e6055af4
Author: Dmitri Plotnikov <dmitri@apache.org>
Date:   Mon Mar 20 19:48:07 2006

    Fixed a problem caused by "from" index greater than the string
    s length.  Thanks to Barzilai Spinak
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@387363 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java b/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
--- a/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
+++ b/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
@@ -58,53 +58,56 @@
     public void testCoreFunctions() {
         assertXPathValue(context, "string(2)", "2");
         assertXPathValue(context, "string($nan)", "NaN");
         assertXPathValue(context, "string(-$nan)", "NaN");
         assertXPathValue(context, "string(-2 div 0)", "-Infinity");
         assertXPathValue(context, "string(2 div 0)", "Infinity");
         assertXPathValue(context, "concat('a', 'b', 'c')", "abc");
         assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE);
         assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE);
         assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE);
         assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE);
         assertXPathValue(
             context,
             "substring-before('1999/04/01', '/')",
             "1999");
         assertXPathValue(
             context,
             "substring-after('1999/04/01', '/')",
             "04/01");
         assertXPathValue(context, "substring('12345', 2, 3)", "234");
         assertXPathValue(context, "substring('12345', 2)", "2345");
         assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234");
         assertXPathValue(context, "substring('12345', 0, 3)", "12");
         assertXPathValue(context, "substring('12345', 0 div 0, 3)", "");
         assertXPathValue(context, "substring('12345', 1, 0 div 0)", "");
         assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345");
         assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", "");
+        assertXPathValue(context, "substring('12345', 6, 6)", "");
+        assertXPathValue(context, "substring('12345', 7, 8)", "");
+        assertXPathValue(context, "substring('12345', 7)", "");
         assertXPathValue(context, "string-length('12345')", new Double(5));
         assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def");
         assertXPathValue(context, "normalize-space('abc def')", "abc def");
         assertXPathValue(context, "normalize-space('   ')", "");
         assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA");
         assertXPathValue(context, "boolean(1)", Boolean.TRUE);
         assertXPathValue(context, "boolean(0)", Boolean.FALSE);
         assertXPathValue(context, "boolean('x')", Boolean.TRUE);
         assertXPathValue(context, "boolean('')", Boolean.FALSE);
 
         assertXPathValue(context, "true()", Boolean.TRUE);
         assertXPathValue(context, "false()", Boolean.FALSE);
         assertXPathValue(context, "not(false())", Boolean.TRUE);
         assertXPathValue(context, "not(true())", Boolean.FALSE);
         assertXPathValue(context, "number('1')", new Double(1));
         assertXPathValue(context, "number($bool_true)", new Double(1));
         assertXPathValue(context, "number($bool_false)", new Double(0));
         assertXPathValue(context, "floor(1.5)", new Double(1));
         assertXPathValue(context, "floor(-1.5)", new Double(-2));
         assertXPathValue(context, "ceiling(1.5)", new Double(2));
         assertXPathValue(context, "ceiling(-1.5)", new Double(-1));
         assertXPathValue(context, "round(1.5)", new Double(2));
         assertXPathValue(context, "round(-1.5)", new Double(-1));
         assertXPathValue(context, "null()", null);        
     }
 

commit 57063255566c2a3a4006d29fb41534e6f63ad9d2
Author: Dmitri Plotnikov <dmitri@apache.org>
Date:   Sat May 8 16:07:09 2004

    Fixed Bug #28753: conversion of Boolean to Number
    
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136911 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java b/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
--- a/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
+++ b/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
@@ -56,51 +58,53 @@
     public void testCoreFunctions() {
         assertXPathValue(context, "string(2)", "2");
         assertXPathValue(context, "string($nan)", "NaN");
         assertXPathValue(context, "string(-$nan)", "NaN");
         assertXPathValue(context, "string(-2 div 0)", "-Infinity");
         assertXPathValue(context, "string(2 div 0)", "Infinity");
         assertXPathValue(context, "concat('a', 'b', 'c')", "abc");
         assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE);
         assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE);
         assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE);
         assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE);
         assertXPathValue(
             context,
             "substring-before('1999/04/01', '/')",
             "1999");
         assertXPathValue(
             context,
             "substring-after('1999/04/01', '/')",
             "04/01");
         assertXPathValue(context, "substring('12345', 2, 3)", "234");
         assertXPathValue(context, "substring('12345', 2)", "2345");
         assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234");
         assertXPathValue(context, "substring('12345', 0, 3)", "12");
         assertXPathValue(context, "substring('12345', 0 div 0, 3)", "");
         assertXPathValue(context, "substring('12345', 1, 0 div 0)", "");
         assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345");
         assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", "");
         assertXPathValue(context, "string-length('12345')", new Double(5));
         assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def");
         assertXPathValue(context, "normalize-space('abc def')", "abc def");
         assertXPathValue(context, "normalize-space('   ')", "");
         assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA");
         assertXPathValue(context, "boolean(1)", Boolean.TRUE);
         assertXPathValue(context, "boolean(0)", Boolean.FALSE);
         assertXPathValue(context, "boolean('x')", Boolean.TRUE);
         assertXPathValue(context, "boolean('')", Boolean.FALSE);
 
         assertXPathValue(context, "true()", Boolean.TRUE);
         assertXPathValue(context, "false()", Boolean.FALSE);
         assertXPathValue(context, "not(false())", Boolean.TRUE);
         assertXPathValue(context, "not(true())", Boolean.FALSE);
         assertXPathValue(context, "number('1')", new Double(1));
+        assertXPathValue(context, "number($bool_true)", new Double(1));
+        assertXPathValue(context, "number($bool_false)", new Double(0));
         assertXPathValue(context, "floor(1.5)", new Double(1));
         assertXPathValue(context, "floor(-1.5)", new Double(-2));
         assertXPathValue(context, "ceiling(1.5)", new Double(2));
         assertXPathValue(context, "ceiling(-1.5)", new Double(-1));
         assertXPathValue(context, "round(1.5)", new Double(2));
         assertXPathValue(context, "round(-1.5)", new Double(-1));
-        assertXPathValue(context, "null()", null);
+        assertXPathValue(context, "null()", null);        
     }
 

commit 02d8160f14dd155a86bb1022cd6fdd5dbee7421c
Author: Dmitri Plotnikov <dmitri@apache.org>
Date:   Sun Jan 19 19:00:29 2003

    Placated stylecheck
    
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136841 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java b/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
--- a/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
+++ b/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
@@ -102,45 +101,51 @@
-    public void testCoreFunctions(){
-        assertXPathValue(context,"string(2)", "2");
-        assertXPathValue(context,"string($nan)", "NaN");
-        assertXPathValue(context,"string(-$nan)", "NaN");
-        assertXPathValue(context,"string(-2 div 0)", "-Infinity");
-        assertXPathValue(context,"string(2 div 0)", "Infinity");
-        assertXPathValue(context,"concat('a', 'b', 'c')", "abc");
-        assertXPathValue(context,"starts-with('abc', 'ab')", Boolean.TRUE);
-        assertXPathValue(context,"starts-with('xabc', 'ab')", Boolean.FALSE);
-        assertXPathValue(context,"contains('xabc', 'ab')", Boolean.TRUE);
-        assertXPathValue(context,"contains('xabc', 'ba')", Boolean.FALSE);
-        assertXPathValue(context,"substring-before('1999/04/01', '/')", "1999");
-        assertXPathValue(context,"substring-after('1999/04/01', '/')", "04/01");
-        assertXPathValue(context,"substring('12345', 2, 3)", "234");
-        assertXPathValue(context,"substring('12345', 2)", "2345");
-        assertXPathValue(context,"substring('12345', 1.5, 2.6)", "234");
-        assertXPathValue(context,"substring('12345', 0, 3)", "12");
-        assertXPathValue(context,"substring('12345', 0 div 0, 3)", "");
-        assertXPathValue(context,"substring('12345', 1, 0 div 0)", "");
-        assertXPathValue(context,"substring('12345', -42, 1 div 0)", "12345");
-        assertXPathValue(context,"substring('12345', -1 div 0, 1 div 0)", "");
-        assertXPathValue(context,"string-length('12345')", new Double(5));
-        assertXPathValue(context,"normalize-space(' abc  def  ')", "abc def");
-        assertXPathValue(context,"normalize-space('abc def')", "abc def");
-        assertXPathValue(context,"normalize-space('   ')", "");
-        assertXPathValue(context,"translate('--aaa--', 'abc-', 'ABC')", "AAA");
-        assertXPathValue(context,"boolean(1)", Boolean.TRUE);
-        assertXPathValue(context,"boolean(0)", Boolean.FALSE);
-        assertXPathValue(context,"boolean('x')", Boolean.TRUE);
-        assertXPathValue(context,"boolean('')", Boolean.FALSE);
-        
-        assertXPathValue(context,"true()", Boolean.TRUE);
-        assertXPathValue(context,"false()", Boolean.FALSE);
-        assertXPathValue(context,"not(false())", Boolean.TRUE);
-        assertXPathValue(context,"not(true())", Boolean.FALSE);
-        assertXPathValue(context,"number('1')", new Double(1));
-        assertXPathValue(context,"floor(1.5)", new Double(1));
-        assertXPathValue(context,"floor(-1.5)", new Double(-2));
-        assertXPathValue(context,"ceiling(1.5)", new Double(2));
-        assertXPathValue(context,"ceiling(-1.5)", new Double(-1));
-        assertXPathValue(context,"round(1.5)", new Double(2));
-        assertXPathValue(context,"round(-1.5)", new Double(-1));
-        assertXPathValue(context,"null()", null);
+    public void testCoreFunctions() {
+        assertXPathValue(context, "string(2)", "2");
+        assertXPathValue(context, "string($nan)", "NaN");
+        assertXPathValue(context, "string(-$nan)", "NaN");
+        assertXPathValue(context, "string(-2 div 0)", "-Infinity");
+        assertXPathValue(context, "string(2 div 0)", "Infinity");
+        assertXPathValue(context, "concat('a', 'b', 'c')", "abc");
+        assertXPathValue(context, "starts-with('abc', 'ab')", Boolean.TRUE);
+        assertXPathValue(context, "starts-with('xabc', 'ab')", Boolean.FALSE);
+        assertXPathValue(context, "contains('xabc', 'ab')", Boolean.TRUE);
+        assertXPathValue(context, "contains('xabc', 'ba')", Boolean.FALSE);
+        assertXPathValue(
+            context,
+            "substring-before('1999/04/01', '/')",
+            "1999");
+        assertXPathValue(
+            context,
+            "substring-after('1999/04/01', '/')",
+            "04/01");
+        assertXPathValue(context, "substring('12345', 2, 3)", "234");
+        assertXPathValue(context, "substring('12345', 2)", "2345");
+        assertXPathValue(context, "substring('12345', 1.5, 2.6)", "234");
+        assertXPathValue(context, "substring('12345', 0, 3)", "12");
+        assertXPathValue(context, "substring('12345', 0 div 0, 3)", "");
+        assertXPathValue(context, "substring('12345', 1, 0 div 0)", "");
+        assertXPathValue(context, "substring('12345', -42, 1 div 0)", "12345");
+        assertXPathValue(context, "substring('12345', -1 div 0, 1 div 0)", "");
+        assertXPathValue(context, "string-length('12345')", new Double(5));
+        assertXPathValue(context, "normalize-space(' abc  def  ')", "abc def");
+        assertXPathValue(context, "normalize-space('abc def')", "abc def");
+        assertXPathValue(context, "normalize-space('   ')", "");
+        assertXPathValue(context, "translate('--aaa--', 'abc-', 'ABC')", "AAA");
+        assertXPathValue(context, "boolean(1)", Boolean.TRUE);
+        assertXPathValue(context, "boolean(0)", Boolean.FALSE);
+        assertXPathValue(context, "boolean('x')", Boolean.TRUE);
+        assertXPathValue(context, "boolean('')", Boolean.FALSE);
+
+        assertXPathValue(context, "true()", Boolean.TRUE);
+        assertXPathValue(context, "false()", Boolean.FALSE);
+        assertXPathValue(context, "not(false())", Boolean.TRUE);
+        assertXPathValue(context, "not(true())", Boolean.FALSE);
+        assertXPathValue(context, "number('1')", new Double(1));
+        assertXPathValue(context, "floor(1.5)", new Double(1));
+        assertXPathValue(context, "floor(-1.5)", new Double(-2));
+        assertXPathValue(context, "ceiling(1.5)", new Double(2));
+        assertXPathValue(context, "ceiling(-1.5)", new Double(-1));
+        assertXPathValue(context, "round(1.5)", new Double(2));
+        assertXPathValue(context, "round(-1.5)", new Double(-1));
+        assertXPathValue(context, "null()", null);
     }
 

commit a966d3b853aa757fd5556191c6ea18ffa6591ce1
Author: Dmitri Plotnikov <dmitri@apache.org>
Date:   Sat Oct 19 23:48:23 2002

    Complete overhaul of the test suites
    
    
    git-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/jxpath/trunk@136823 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java b/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
--- /dev/null
+++ b/src/test/org/apache/commons/jxpath/ri/compiler/CoreFunctionTest.java
@@ -0,0 +102,45 @@
+    public void testCoreFunctions(){
+        assertXPathValue(context,"string(2)", "2");
+        assertXPathValue(context,"string($nan)", "NaN");
+        assertXPathValue(context,"string(-$nan)", "NaN");
+        assertXPathValue(context,"string(-2 div 0)", "-Infinity");
+        assertXPathValue(context,"string(2 div 0)", "Infinity");
+        assertXPathValue(context,"concat('a', 'b', 'c')", "abc");
+        assertXPathValue(context,"starts-with('abc', 'ab')", Boolean.TRUE);
+        assertXPathValue(context,"starts-with('xabc', 'ab')", Boolean.FALSE);
+        assertXPathValue(context,"contains('xabc', 'ab')", Boolean.TRUE);
+        assertXPathValue(context,"contains('xabc', 'ba')", Boolean.FALSE);
+        assertXPathValue(context,"substring-before('1999/04/01', '/')", "1999");
+        assertXPathValue(context,"substring-after('1999/04/01', '/')", "04/01");
+        assertXPathValue(context,"substring('12345', 2, 3)", "234");
+        assertXPathValue(context,"substring('12345', 2)", "2345");
+        assertXPathValue(context,"substring('12345', 1.5, 2.6)", "234");
+        assertXPathValue(context,"substring('12345', 0, 3)", "12");
+        assertXPathValue(context,"substring('12345', 0 div 0, 3)", "");
+        assertXPathValue(context,"substring('12345', 1, 0 div 0)", "");
+        assertXPathValue(context,"substring('12345', -42, 1 div 0)", "12345");
+        assertXPathValue(context,"substring('12345', -1 div 0, 1 div 0)", "");
+        assertXPathValue(context,"string-length('12345')", new Double(5));
+        assertXPathValue(context,"normalize-space(' abc  def  ')", "abc def");
+        assertXPathValue(context,"normalize-space('abc def')", "abc def");
+        assertXPathValue(context,"normalize-space('   ')", "");
+        assertXPathValue(context,"translate('--aaa--', 'abc-', 'ABC')", "AAA");
+        assertXPathValue(context,"boolean(1)", Boolean.TRUE);
+        assertXPathValue(context,"boolean(0)", Boolean.FALSE);
+        assertXPathValue(context,"boolean('x')", Boolean.TRUE);
+        assertXPathValue(context,"boolean('')", Boolean.FALSE);
+        
+        assertXPathValue(context,"true()", Boolean.TRUE);
+        assertXPathValue(context,"false()", Boolean.FALSE);
+        assertXPathValue(context,"not(false())", Boolean.TRUE);
+        assertXPathValue(context,"not(true())", Boolean.FALSE);
+        assertXPathValue(context,"number('1')", new Double(1));
+        assertXPathValue(context,"floor(1.5)", new Double(1));
+        assertXPathValue(context,"floor(-1.5)", new Double(-2));
+        assertXPathValue(context,"ceiling(1.5)", new Double(2));
+        assertXPathValue(context,"ceiling(-1.5)", new Double(-1));
+        assertXPathValue(context,"round(1.5)", new Double(2));
+        assertXPathValue(context,"round(-1.5)", new Double(-1));
+        assertXPathValue(context,"null()", null);
+    }
+
