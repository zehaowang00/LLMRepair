commit d6555de715889237b7be11639d164e7098862003
Author: Luc Maisonobe <luc@apache.org>
Date:   Tue Dec 29 07:24:58 2009

    fixed a wrong implementation of the Linf vector norm
    JIRA: MATH-326
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@894367 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java b/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java
--- a/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java
+++ b/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java
@@ -1079,150 +1080,154 @@
     public void testBasicFunctions() {
         ArrayRealVector v1 = new ArrayRealVector(vec1);
         ArrayRealVector v2 = new ArrayRealVector(vec2);
+        ArrayRealVector v5 = new ArrayRealVector(vec5);
         ArrayRealVector v_null = new ArrayRealVector(vec_null);
 
         RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
 
-        //octave =  sqrt(sumsq(v1))
-        double d_getNorm = v1.getNorm();
-        assertEquals("compare values  ", 3.7416573867739413,d_getNorm);
+        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
+        double d_getNorm = v5.getNorm();
+        assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);
 
-        double d_getL1Norm = v1.getL1Norm();
-        assertEquals("compare values  ",6.0, d_getL1Norm);
+        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
+        double d_getL1Norm = v5.getL1Norm();
+        assertEquals("compare values  ", 17.0, d_getL1Norm);
+
+        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
+        double d_getLInfNorm = v5.getLInfNorm();
+        assertEquals("compare values  ", 6.0, d_getLInfNorm);
 
-        double d_getLInfNorm = v1.getLInfNorm();
-        assertEquals("compare values  ",6.0, d_getLInfNorm);
 
         //octave =  sqrt(sumsq(v1-v2))
         double dist = v1.getDistance(v2);
         assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );
 
         //octave =  sqrt(sumsq(v1-v2))
         double dist_2 = v1.getDistance(v2_t);
         assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );
 
         //octave =  sqrt(sumsq(v1-v2))
         double dist_3 = v1.getDistance((RealVector) v2);
         assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );
 
         //octave =  ???
         double d_getL1Distance = v1. getL1Distance(v2);
         assertEquals("compare values  ",9d, d_getL1Distance );
 
         double d_getL1Distance_2 = v1. getL1Distance(v2_t);
         assertEquals("compare values  ",9d, d_getL1Distance_2 );
 
         double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
         assertEquals("compare values  ",9d, d_getL1Distance_3 );
 
         //octave =  ???
         double d_getLInfDistance = v1. getLInfDistance(v2);
         assertEquals("compare values  ",3d, d_getLInfDistance );
 
         double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
         assertEquals("compare values  ",3d, d_getLInfDistance_2 );
 
         double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
         assertEquals("compare values  ",3d, d_getLInfDistance_3 );
 
         //octave =  v1 + v2
         ArrayRealVector v_add = v1.add(v2);
         double[] result_add = {5d, 7d, 9d};
         assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);
 
         RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
         RealVector v_add_i = v1.add(vt2);
         double[] result_add_i = {5d, 7d, 9d};
         assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);
 
         //octave =  v1 - v2
         ArrayRealVector v_subtract = v1.subtract(v2);
         double[] result_subtract = {-3d, -3d, -3d};
         assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);
 
         RealVector v_subtract_i = v1.subtract(vt2);
         double[] result_subtract_i = {-3d, -3d, -3d};
         assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);
 
         // octave v1 .* v2
         ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
         double[] result_ebeMultiply = {4d, 10d, 18d};
         assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);
 
         RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
         double[] result_ebeMultiply_2 = {4d, 10d, 18d};
         assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);
 
         RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
         double[] result_ebeMultiply_3 = {4d, 10d, 18d};
         assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);
 
         // octave v1 ./ v2
         ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
         double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
         assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);
 
         RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
         double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
         assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);
 
         RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
         double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
         assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);
 
         // octave  dot(v1,v2)
         double dot =  v1.dotProduct(v2);
         assertEquals("compare val ",32d, dot);
 
         // octave  dot(v1,v2_t)
         double dot_2 =  v1.dotProduct(v2_t);
         assertEquals("compare val ",32d, dot_2);
 
         RealMatrix m_outerProduct = v1.outerProduct(v2);
         assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));
 
         RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
         assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));
 
         RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
         assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));
 
         RealVector v_unitVector = v1.unitVector();
         RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
         assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);
 
         try {
             v_null.unitVector();
             fail("Expecting ArithmeticException");
         } catch (ArithmeticException ex) {
             // expected behavior
         } catch (Exception e) {
             fail("wrong exception caught");
         }
 
         ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
         v_unitize.unitize();
         assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);
         try {
             v_null.unitize();
             fail("Expecting ArithmeticException");
         } catch (ArithmeticException ex) {
             // expected behavior
         } catch (Exception e) {
             fail("wrong exception caught");
         }
 
         ArrayRealVector v_projection = v1.projection(v2);
         double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
         assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);
 
         RealVector v_projection_2 = v1.projection(v2_t);
         double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
         assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);
 
         RealVector v_projection_3 = v1.projection(v2.getData());
         double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
         assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);
 
     }
 

commit 0263d1f5e0f736ed86b49fe40358bf5446ad6940
Author: Luc Maisonobe <luc@apache.org>
Date:   Mon Dec 28 10:23:23 2009

    improved test coverage (now somewhere between 99% and 100%)
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@894186 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java b/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java
--- a/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java
+++ b/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java
@@ -1020,125 +1079,150 @@
     public void testBasicFunctions() {
         ArrayRealVector v1 = new ArrayRealVector(vec1);
         ArrayRealVector v2 = new ArrayRealVector(vec2);
         ArrayRealVector v_null = new ArrayRealVector(vec_null);
 
         RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
 
         //octave =  sqrt(sumsq(v1))
         double d_getNorm = v1.getNorm();
         assertEquals("compare values  ", 3.7416573867739413,d_getNorm);
 
         double d_getL1Norm = v1.getL1Norm();
         assertEquals("compare values  ",6.0, d_getL1Norm);
 
         double d_getLInfNorm = v1.getLInfNorm();
         assertEquals("compare values  ",6.0, d_getLInfNorm);
 
         //octave =  sqrt(sumsq(v1-v2))
         double dist = v1.getDistance(v2);
         assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );
 
         //octave =  sqrt(sumsq(v1-v2))
         double dist_2 = v1.getDistance(v2_t);
         assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );
 
+        //octave =  sqrt(sumsq(v1-v2))
+        double dist_3 = v1.getDistance((RealVector) v2);
+        assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );
+
         //octave =  ???
         double d_getL1Distance = v1. getL1Distance(v2);
         assertEquals("compare values  ",9d, d_getL1Distance );
 
         double d_getL1Distance_2 = v1. getL1Distance(v2_t);
         assertEquals("compare values  ",9d, d_getL1Distance_2 );
 
+        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
+        assertEquals("compare values  ",9d, d_getL1Distance_3 );
+
         //octave =  ???
         double d_getLInfDistance = v1. getLInfDistance(v2);
         assertEquals("compare values  ",3d, d_getLInfDistance );
 
         double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
         assertEquals("compare values  ",3d, d_getLInfDistance_2 );
 
+        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
+        assertEquals("compare values  ",3d, d_getLInfDistance_3 );
+
         //octave =  v1 + v2
         ArrayRealVector v_add = v1.add(v2);
         double[] result_add = {5d, 7d, 9d};
         assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);
 
         RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
         RealVector v_add_i = v1.add(vt2);
         double[] result_add_i = {5d, 7d, 9d};
         assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);
 
         //octave =  v1 - v2
         ArrayRealVector v_subtract = v1.subtract(v2);
         double[] result_subtract = {-3d, -3d, -3d};
         assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);
 
         RealVector v_subtract_i = v1.subtract(vt2);
         double[] result_subtract_i = {-3d, -3d, -3d};
         assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);
 
         // octave v1 .* v2
         ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
         double[] result_ebeMultiply = {4d, 10d, 18d};
         assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);
 
         RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
         double[] result_ebeMultiply_2 = {4d, 10d, 18d};
         assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);
 
+        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
+        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
+        assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);
+
         // octave v1 ./ v2
         ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
         double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
         assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);
 
         RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
         double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
         assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);
 
+        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
+        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
+        assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);
+
         // octave  dot(v1,v2)
         double dot =  v1.dotProduct(v2);
         assertEquals("compare val ",32d, dot);
 
         // octave  dot(v1,v2_t)
         double dot_2 =  v1.dotProduct(v2_t);
         assertEquals("compare val ",32d, dot_2);
 
         RealMatrix m_outerProduct = v1.outerProduct(v2);
         assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));
 
         RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
         assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));
 
+        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
+        assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));
+
         RealVector v_unitVector = v1.unitVector();
         RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
         assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);
 
         try {
             v_null.unitVector();
             fail("Expecting ArithmeticException");
         } catch (ArithmeticException ex) {
             // expected behavior
         } catch (Exception e) {
             fail("wrong exception caught");
         }
 
         ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
         v_unitize.unitize();
         assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);
         try {
             v_null.unitize();
             fail("Expecting ArithmeticException");
         } catch (ArithmeticException ex) {
             // expected behavior
         } catch (Exception e) {
             fail("wrong exception caught");
         }
 
         ArrayRealVector v_projection = v1.projection(v2);
         double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
         assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);
 
         RealVector v_projection_2 = v1.projection(v2_t);
         double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
         assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);
 
+        RealVector v_projection_3 = v1.projection(v2.getData());
+        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
+        assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);
+
     }
 

commit 26dac5a0e7fc9c6be9571b3e71a15d8502480d96
Author: Phil Steitz <psteitz@apache.org>
Date:   Sat Sep 5 13:36:48 2009

    Removed trailing spaces.
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@811685 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java b/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java
--- a/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java
+++ b/src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java
@@ -982,125 +982,125 @@
-    public void testBasicFunctions() { 
+    public void testBasicFunctions() {
         ArrayRealVector v1 = new ArrayRealVector(vec1);
         ArrayRealVector v2 = new ArrayRealVector(vec2);
         ArrayRealVector v_null = new ArrayRealVector(vec_null);
 
-        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2); 
+        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);
 
         //octave =  sqrt(sumsq(v1))
         double d_getNorm = v1.getNorm();
         assertEquals("compare values  ", 3.7416573867739413,d_getNorm);
 
         double d_getL1Norm = v1.getL1Norm();
         assertEquals("compare values  ",6.0, d_getL1Norm);
 
         double d_getLInfNorm = v1.getLInfNorm();
         assertEquals("compare values  ",6.0, d_getLInfNorm);
 
         //octave =  sqrt(sumsq(v1-v2))
         double dist = v1.getDistance(v2);
         assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );
 
         //octave =  sqrt(sumsq(v1-v2))
         double dist_2 = v1.getDistance(v2_t);
         assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );
 
         //octave =  ???
         double d_getL1Distance = v1. getL1Distance(v2);
         assertEquals("compare values  ",9d, d_getL1Distance );
 
         double d_getL1Distance_2 = v1. getL1Distance(v2_t);
         assertEquals("compare values  ",9d, d_getL1Distance_2 );
 
         //octave =  ???
         double d_getLInfDistance = v1. getLInfDistance(v2);
         assertEquals("compare values  ",3d, d_getLInfDistance );
 
         double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
         assertEquals("compare values  ",3d, d_getLInfDistance_2 );
 
         //octave =  v1 + v2
         ArrayRealVector v_add = v1.add(v2);
         double[] result_add = {5d, 7d, 9d};
         assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);
 
         RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
         RealVector v_add_i = v1.add(vt2);
         double[] result_add_i = {5d, 7d, 9d};
         assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);
 
         //octave =  v1 - v2
         ArrayRealVector v_subtract = v1.subtract(v2);
         double[] result_subtract = {-3d, -3d, -3d};
         assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);
 
         RealVector v_subtract_i = v1.subtract(vt2);
         double[] result_subtract_i = {-3d, -3d, -3d};
         assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);
 
         // octave v1 .* v2
         ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
         double[] result_ebeMultiply = {4d, 10d, 18d};
         assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);
 
         RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
         double[] result_ebeMultiply_2 = {4d, 10d, 18d};
         assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);
 
         // octave v1 ./ v2
         ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
         double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
         assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);
 
         RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
         double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
         assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);
 
         // octave  dot(v1,v2)
         double dot =  v1.dotProduct(v2);
         assertEquals("compare val ",32d, dot);
 
         // octave  dot(v1,v2_t)
         double dot_2 =  v1.dotProduct(v2_t);
         assertEquals("compare val ",32d, dot_2);
 
         RealMatrix m_outerProduct = v1.outerProduct(v2);
         assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));
 
         RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
         assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));
 
         RealVector v_unitVector = v1.unitVector();
-        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm()); 
+        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
         assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);
 
         try {
             v_null.unitVector();
             fail("Expecting ArithmeticException");
         } catch (ArithmeticException ex) {
             // expected behavior
         } catch (Exception e) {
             fail("wrong exception caught");
         }
 
         ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
         v_unitize.unitize();
         assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);
         try {
             v_null.unitize();
             fail("Expecting ArithmeticException");
         } catch (ArithmeticException ex) {
             // expected behavior
         } catch (Exception e) {
             fail("wrong exception caught");
         }
 
         ArrayRealVector v_projection = v1.projection(v2);
         double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
         assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);
 
         RealVector v_projection_2 = v1.projection(v2_t);
         double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
         assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);
 
-    }  
+    }
 

commit dbae4b01341d9d72e52d1e07a15d5023deca3d92
Author: Luc Maisonobe <luc@apache.org>
Date:   Thu Jun 11 04:54:02 2009

    renamed RealMatrixImpl, RealVectorImpl, FieldMatrixImpl and FieldVectorImpl
    into Array2DRowRealMatrix, ArrayRealVector, Array2DRowFieldMatrix and ArrayFieldVector
    as suggested by Sam in http://markmail.org/message/hh37ivxpzaoapekj
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@783702 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/linear/RealVectorImplTest.java b/src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java
--- a/src/test/org/apache/commons/math/linear/RealVectorImplTest.java
+++ b/src/test/org/apache/commons/math/linear/ArrayRealVectorTest.java
@@ -982,125 +982,125 @@
     public void testBasicFunctions() { 
-        RealVectorImpl v1 = new RealVectorImpl(vec1);
-        RealVectorImpl v2 = new RealVectorImpl(vec2);
-        RealVectorImpl v_null = new RealVectorImpl(vec_null);
+        ArrayRealVector v1 = new ArrayRealVector(vec1);
+        ArrayRealVector v2 = new ArrayRealVector(vec2);
+        ArrayRealVector v_null = new ArrayRealVector(vec_null);
 
         RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2); 
 
         //octave =  sqrt(sumsq(v1))
         double d_getNorm = v1.getNorm();
         assertEquals("compare values  ", 3.7416573867739413,d_getNorm);
 
         double d_getL1Norm = v1.getL1Norm();
         assertEquals("compare values  ",6.0, d_getL1Norm);
 
         double d_getLInfNorm = v1.getLInfNorm();
         assertEquals("compare values  ",6.0, d_getLInfNorm);
 
         //octave =  sqrt(sumsq(v1-v2))
         double dist = v1.getDistance(v2);
         assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );
 
         //octave =  sqrt(sumsq(v1-v2))
         double dist_2 = v1.getDistance(v2_t);
         assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );
 
         //octave =  ???
         double d_getL1Distance = v1. getL1Distance(v2);
         assertEquals("compare values  ",9d, d_getL1Distance );
 
         double d_getL1Distance_2 = v1. getL1Distance(v2_t);
         assertEquals("compare values  ",9d, d_getL1Distance_2 );
 
         //octave =  ???
         double d_getLInfDistance = v1. getLInfDistance(v2);
         assertEquals("compare values  ",3d, d_getLInfDistance );
 
         double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
         assertEquals("compare values  ",3d, d_getLInfDistance_2 );
 
         //octave =  v1 + v2
-        RealVectorImpl v_add = v1.add(v2);
+        ArrayRealVector v_add = v1.add(v2);
         double[] result_add = {5d, 7d, 9d};
         assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);
 
         RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
         RealVector v_add_i = v1.add(vt2);
         double[] result_add_i = {5d, 7d, 9d};
         assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);
 
         //octave =  v1 - v2
-        RealVectorImpl v_subtract = v1.subtract(v2);
+        ArrayRealVector v_subtract = v1.subtract(v2);
         double[] result_subtract = {-3d, -3d, -3d};
         assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);
 
         RealVector v_subtract_i = v1.subtract(vt2);
         double[] result_subtract_i = {-3d, -3d, -3d};
         assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);
 
         // octave v1 .* v2
-        RealVectorImpl  v_ebeMultiply = v1.ebeMultiply(v2);
+        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
         double[] result_ebeMultiply = {4d, 10d, 18d};
         assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);
 
         RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
         double[] result_ebeMultiply_2 = {4d, 10d, 18d};
         assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);
 
         // octave v1 ./ v2
-        RealVectorImpl  v_ebeDivide = v1.ebeDivide(v2);
+        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
         double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
         assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);
 
         RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
         double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
         assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);
 
         // octave  dot(v1,v2)
         double dot =  v1.dotProduct(v2);
         assertEquals("compare val ",32d, dot);
 
         // octave  dot(v1,v2_t)
         double dot_2 =  v1.dotProduct(v2_t);
         assertEquals("compare val ",32d, dot_2);
 
         RealMatrix m_outerProduct = v1.outerProduct(v2);
         assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));
 
         RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
         assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));
 
         RealVector v_unitVector = v1.unitVector();
         RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm()); 
         assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);
 
         try {
             v_null.unitVector();
             fail("Expecting ArithmeticException");
         } catch (ArithmeticException ex) {
             // expected behavior
         } catch (Exception e) {
             fail("wrong exception caught");
         }
 
-        RealVectorImpl v_unitize = (RealVectorImpl)v1.copy();
+        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
         v_unitize.unitize();
         assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);
         try {
             v_null.unitize();
             fail("Expecting ArithmeticException");
         } catch (ArithmeticException ex) {
             // expected behavior
         } catch (Exception e) {
             fail("wrong exception caught");
         }
 
-        RealVectorImpl v_projection = v1.projection(v2);
+        ArrayRealVector v_projection = v1.projection(v2);
         double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
         assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);
 
         RealVector v_projection_2 = v1.projection(v2_t);
         double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
         assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);
 
     }  
 

commit 6d732dba587f9d92d1dbfe3f1dee6acaf806f104
Author: Luc Maisonobe <luc@apache.org>
Date:   Fri Dec 19 19:03:13 2008

    removed direct references to RealMatrixImpl and use factory
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@728186 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/linear/RealVectorImplTest.java b/src/test/org/apache/commons/math/linear/RealVectorImplTest.java
--- a/src/test/org/apache/commons/math/linear/RealVectorImplTest.java
+++ b/src/test/org/apache/commons/math/linear/RealVectorImplTest.java
@@ -979,125 +979,125 @@
     public void testBasicFunctions() { 
         RealVectorImpl v1 = new RealVectorImpl(vec1);
         RealVectorImpl v2 = new RealVectorImpl(vec2);
         RealVectorImpl v_null = new RealVectorImpl(vec_null);
 
         RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2); 
 
         //octave =  sqrt(sumsq(v1))
         double d_getNorm = v1.getNorm();
         assertEquals("compare values  ", 3.7416573867739413,d_getNorm);
 
         double d_getL1Norm = v1.getL1Norm();
         assertEquals("compare values  ",6.0, d_getL1Norm);
 
         double d_getLInfNorm = v1.getLInfNorm();
         assertEquals("compare values  ",6.0, d_getLInfNorm);
 
         //octave =  sqrt(sumsq(v1-v2))
         double dist = v1.getDistance(v2);
         assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );
 
         //octave =  sqrt(sumsq(v1-v2))
         double dist_2 = v1.getDistance(v2_t);
         assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );
 
         //octave =  ???
         double d_getL1Distance = v1. getL1Distance(v2);
         assertEquals("compare values  ",9d, d_getL1Distance );
 
         double d_getL1Distance_2 = v1. getL1Distance(v2_t);
         assertEquals("compare values  ",9d, d_getL1Distance_2 );
 
         //octave =  ???
         double d_getLInfDistance = v1. getLInfDistance(v2);
         assertEquals("compare values  ",3d, d_getLInfDistance );
 
         double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
         assertEquals("compare values  ",3d, d_getLInfDistance_2 );
 
         //octave =  v1 + v2
         RealVectorImpl v_add = v1.add(v2);
         double[] result_add = {5d, 7d, 9d};
         assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);
 
         RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
         RealVector v_add_i = v1.add(vt2);
         double[] result_add_i = {5d, 7d, 9d};
         assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);
 
         //octave =  v1 - v2
         RealVectorImpl v_subtract = v1.subtract(v2);
         double[] result_subtract = {-3d, -3d, -3d};
         assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);
 
         RealVector v_subtract_i = v1.subtract(vt2);
         double[] result_subtract_i = {-3d, -3d, -3d};
         assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);
 
         // octave v1 .* v2
         RealVectorImpl  v_ebeMultiply = v1.ebeMultiply(v2);
         double[] result_ebeMultiply = {4d, 10d, 18d};
         assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);
 
         RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
         double[] result_ebeMultiply_2 = {4d, 10d, 18d};
         assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);
 
         // octave v1 ./ v2
         RealVectorImpl  v_ebeDivide = v1.ebeDivide(v2);
         double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
         assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);
 
         RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
         double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
         assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);
 
         // octave  dot(v1,v2)
         double dot =  v1.dotProduct(v2);
         assertEquals("compare val ",32d, dot);
 
         // octave  dot(v1,v2_t)
         double dot_2 =  v1.dotProduct(v2_t);
         assertEquals("compare val ",32d, dot_2);
 
-        RealMatrixImpl m_outerProduct = v1.outerProduct(v2);
+        RealMatrix m_outerProduct = v1.outerProduct(v2);
         assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));
 
         RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
         assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));
 
         RealVector v_unitVector = v1.unitVector();
         RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm()); 
         assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);
 
         try {
             v_null.unitVector();
             fail("Expecting ArithmeticException");
         } catch (ArithmeticException ex) {
             // expected behavior
         } catch (Exception e) {
             fail("wrong exception caught");
         }
 
         RealVectorImpl v_unitize = (RealVectorImpl)v1.copy();
         v_unitize.unitize();
         assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);
         try {
             v_null.unitize();
             fail("Expecting ArithmeticException");
         } catch (ArithmeticException ex) {
             // expected behavior
         } catch (Exception e) {
             fail("wrong exception caught");
         }
 
         RealVectorImpl v_projection = v1.projection(v2);
         double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
         assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);
 
         RealVector v_projection_2 = v1.projection(v2_t);
         double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
         assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);
 
     }  
 

commit a311dce47eb28360297655aefeac518cfac069a9
Author: Luc Maisonobe <luc@apache.org>
Date:   Sun Jul 27 15:15:22 2008

    Support for one dimensional vectors has been added to the linear algebra
    package with a RealVector interface, a RealVectorImpl default implementation
    using a single double array to store elements and a RealVectorFormat class for
    input/output.
    
    
    git-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/branches/MATH_2_0@680166 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/src/test/org/apache/commons/math/linear/RealVectorImplTest.java b/src/test/org/apache/commons/math/linear/RealVectorImplTest.java
--- /dev/null
+++ b/src/test/org/apache/commons/math/linear/RealVectorImplTest.java
@@ -0,0 +933,125 @@
+    public void testBasicFunctions() { 
+        RealVectorImpl v1 = new RealVectorImpl(vec1);
+        RealVectorImpl v2 = new RealVectorImpl(vec2);
+        RealVectorImpl v_null = new RealVectorImpl(vec_null);
+
+        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2); 
+
+        //octave =  sqrt(sumsq(v1))
+        double d_getNorm = v1.getNorm();
+        assertEquals("compare values  ", 3.7416573867739413,d_getNorm);
+
+        double d_getL1Norm = v1.getL1Norm();
+        assertEquals("compare values  ",6.0, d_getL1Norm);
+
+        double d_getLInfNorm = v1.getLInfNorm();
+        assertEquals("compare values  ",6.0, d_getLInfNorm);
+
+        //octave =  sqrt(sumsq(v1-v2))
+        double dist = v1.getDistance(v2);
+        assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );
+
+        //octave =  sqrt(sumsq(v1-v2))
+        double dist_2 = v1.getDistance(v2_t);
+        assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );
+
+        //octave =  ???
+        double d_getL1Distance = v1. getL1Distance(v2);
+        assertEquals("compare values  ",9d, d_getL1Distance );
+
+        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
+        assertEquals("compare values  ",9d, d_getL1Distance_2 );
+
+        //octave =  ???
+        double d_getLInfDistance = v1. getLInfDistance(v2);
+        assertEquals("compare values  ",3d, d_getLInfDistance );
+
+        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
+        assertEquals("compare values  ",3d, d_getLInfDistance_2 );
+
+        //octave =  v1 + v2
+        RealVectorImpl v_add = v1.add(v2);
+        double[] result_add = {5d, 7d, 9d};
+        assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);
+
+        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
+        RealVector v_add_i = v1.add(vt2);
+        double[] result_add_i = {5d, 7d, 9d};
+        assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);
+
+        //octave =  v1 - v2
+        RealVectorImpl v_subtract = v1.subtract(v2);
+        double[] result_subtract = {-3d, -3d, -3d};
+        assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);
+
+        RealVector v_subtract_i = v1.subtract(vt2);
+        double[] result_subtract_i = {-3d, -3d, -3d};
+        assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);
+
+        // octave v1 .* v2
+        RealVectorImpl  v_ebeMultiply = v1.ebeMultiply(v2);
+        double[] result_ebeMultiply = {4d, 10d, 18d};
+        assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);
+
+        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
+        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
+        assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);
+
+        // octave v1 ./ v2
+        RealVectorImpl  v_ebeDivide = v1.ebeDivide(v2);
+        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
+        assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);
+
+        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
+        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
+        assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);
+
+        // octave  dot(v1,v2)
+        double dot =  v1.dotProduct(v2);
+        assertEquals("compare val ",32d, dot);
+
+        // octave  dot(v1,v2_t)
+        double dot_2 =  v1.dotProduct(v2_t);
+        assertEquals("compare val ",32d, dot_2);
+
+        RealMatrixImpl m_outerProduct = v1.outerProduct(v2);
+        assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));
+
+        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
+        assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));
+
+        RealVector v_unitVector = v1.unitVector();
+        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm()); 
+        assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);
+
+        try {
+            v_null.unitVector();
+            fail("Expecting ArithmeticException");
+        } catch (ArithmeticException ex) {
+            // expected behavior
+        } catch (Exception e) {
+            fail("wrong exception caught");
+        }
+
+        RealVectorImpl v_unitize = (RealVectorImpl)v1.copy();
+        v_unitize.unitize();
+        assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);
+        try {
+            v_null.unitize();
+            fail("Expecting ArithmeticException");
+        } catch (ArithmeticException ex) {
+            // expected behavior
+        } catch (Exception e) {
+            fail("wrong exception caught");
+        }
+
+        RealVectorImpl v_projection = v1.projection(v2);
+        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
+        assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);
+
+        RealVector v_projection_2 = v1.projection(v2_t);
+        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
+        assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);
+
+    }  
+
