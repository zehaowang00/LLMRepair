commit fe7bbabb82ce3d1000c13d39d6355c134e94ac27
Author: Szczepan Faber <szczepiq@gmail.com>
Date:   Thu Jul 9 00:42:48 2015

    Moved sources to standard location
    
    Let's make the project be as close as possible to standard, conventional project for better clarity

diff --git a/test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java b/test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java
deleted file mode 100644
index 16d76167c..000000000
--- a/test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java
+++ /dev/null
@@ -1,97 +0,0 @@
-/*
- * Copyright (c) 2007 Mockito contributors
- * This program is made available under the terms of the MIT License.
- */
-
-package org.mockito.internal.stubbing.defaultanswers;
-
-import static org.mockito.Mockito.mock;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.LinkedHashMap;
-import java.util.LinkedHashSet;
-import java.util.LinkedList;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.SortedMap;
-import java.util.SortedSet;
-import java.util.TreeMap;
-import java.util.TreeSet;
-import org.junit.Test;
-import org.mockito.invocation.Invocation;
-import org.mockitoutil.TestBase;
-
-@SuppressWarnings("unchecked")
-public class ReturnsEmptyValuesTest extends TestBase {
-
-    ReturnsEmptyValues values = new ReturnsEmptyValues();
-
-    @Test public void should_return_empty_collections_or_null_for_non_collections() {
-        assertTrue(((Collection) values.returnValueFor(Collection.class)).isEmpty());
-
-        assertTrue(((Set) values.returnValueFor(Set.class)).isEmpty());
-        assertTrue(((SortedSet) values.returnValueFor(SortedSet.class)).isEmpty());
-        assertTrue(((HashSet) values.returnValueFor(HashSet.class)).isEmpty());
-        assertTrue(((TreeSet) values.returnValueFor(TreeSet.class)).isEmpty());
-        assertTrue(((LinkedHashSet) values.returnValueFor(LinkedHashSet.class)).isEmpty());
-
-        assertTrue(((List) values.returnValueFor(List.class)).isEmpty());
-        assertTrue(((ArrayList) values.returnValueFor(ArrayList.class)).isEmpty());
-        assertTrue(((LinkedList) values.returnValueFor(LinkedList.class)).isEmpty());
-
-        assertTrue(((Map) values.returnValueFor(Map.class)).isEmpty());
-        assertTrue(((SortedMap) values.returnValueFor(SortedMap.class)).isEmpty());
-        assertTrue(((HashMap) values.returnValueFor(HashMap.class)).isEmpty());
-        assertTrue(((TreeMap) values.returnValueFor(TreeMap.class)).isEmpty());
-        assertTrue(((LinkedHashMap) values.returnValueFor(LinkedHashMap.class)).isEmpty());
-
-        assertNull(values.returnValueFor(String.class));
-    }
-
-    @Test
-    public void should_return_empty_iterable() throws Exception {
-        assertFalse(((Iterable) values.returnValueFor(Iterable.class)).iterator().hasNext());
-    }
-
-    @Test public void should_return_primitive() {
-        assertEquals(false, values.returnValueFor(Boolean.TYPE));
-        assertEquals((char) 0, values.returnValueFor(Character.TYPE));
-        assertEquals((byte) 0, values.returnValueFor(Byte.TYPE));
-        assertEquals((short) 0, values.returnValueFor(Short.TYPE));
-        assertEquals(0, values.returnValueFor(Integer.TYPE));
-        assertEquals(0L, values.returnValueFor(Long.TYPE));
-        assertEquals(0F, values.returnValueFor(Float.TYPE));
-        assertEquals(0D, values.returnValueFor(Double.TYPE));
-    }
-
-    @Test public void should_return_non_zero_for_compareTo_method() {
-        //given
-        Date d = mock(Date.class);
-        d.compareTo(new Date());
-        Invocation compareTo = this.getLastInvocation();
-
-        //when
-        Object result = values.answer(compareTo);
-        
-        //then
-        assertTrue(result != (Object) 0);
-    }
-
-    @Test public void should_return_zero_if_mock_is_compared_to_itself() {
-        //given
-        Date d = mock(Date.class);
-        d.compareTo(d);
-        Invocation compareTo = this.getLastInvocation();
-
-        //when
-        Object result = values.answer(compareTo);
-
-        //then
-        assertEquals(0, result);
-    }
-
-}

commit af44738c7de74f24e37ea0c1242e73b07c3f4362
Author: Brice Dutheil <brice.dutheil@gmail.com>
Date:   Sat Jun 30 09:06:31 2012

    issue 352 : With answer ReturnsEmptyValues, Mockito-mocked methods returning primitive types other than "int" throw ClassCastException: java.lang.Integer.
    Thanks to Jesse Wilson for spotting that one and providing a patch.
    I changed a few things however  especially:
     - used Primitives utility class instead
     - applied underscored names for test cases, as decided internally

diff --git a/test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java b/test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java
index 0303924dd..368993872 100644
--- a/test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java
+++ b/test/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java
@@ -18,7 +18,7 @@
 
     ReturnsEmptyValues values = new ReturnsEmptyValues();
 
-    @Test public void shouldReturnEmptyCollectionsOrNullForNonCollections() {
+    @Test public void should_return_empty_collections_or_null_for_non_collections() {
         assertTrue(((Collection) values.returnValueFor(Collection.class)).isEmpty());
 
         assertTrue(((Set) values.returnValueFor(Set.class)).isEmpty());
@@ -40,18 +40,18 @@
         assertNull(values.returnValueFor(String.class));
     }
 
-    @Test public void shouldReturnPrimitive() {
+    @Test public void should_return_primitive() {
         assertEquals(false, values.returnValueFor(Boolean.TYPE));
         assertEquals((char) 0, values.returnValueFor(Character.TYPE));
-        assertEquals(0, values.returnValueFor(Byte.TYPE));
-        assertEquals(0, values.returnValueFor(Short.TYPE));
+        assertEquals((byte) 0, values.returnValueFor(Byte.TYPE));
+        assertEquals((short) 0, values.returnValueFor(Short.TYPE));
         assertEquals(0, values.returnValueFor(Integer.TYPE));
-        assertEquals(0, values.returnValueFor(Long.TYPE));
-        assertEquals(0, values.returnValueFor(Float.TYPE));
-        assertEquals(0, values.returnValueFor(Double.TYPE));
+        assertEquals(0L, values.returnValueFor(Long.TYPE));
+        assertEquals(0F, values.returnValueFor(Float.TYPE));
+        assertEquals(0D, values.returnValueFor(Double.TYPE));
     }
 
-    @Test public void shouldReturnNonZeroForCompareToMethod() {
+    @Test public void should_return_non_zero_for_compareTo_method() {
         //given
         Date d = mock(Date.class);
         d.compareTo(new Date());
