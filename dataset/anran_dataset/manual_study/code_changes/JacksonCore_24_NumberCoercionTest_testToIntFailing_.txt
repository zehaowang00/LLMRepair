commit c4dd84e4d505baa90d8d1675c1f60f8d6ce90db8
Author: Tatu Saloranta <tatu.saloranta@iki.fi>
Date:   Wed Jan 16 23:42:31 2019

    Fix #508

diff --git a/src/test/java/com/fasterxml/jackson/core/read/NumberCoercionTest.java b/src/test/java/com/fasterxml/jackson/core/read/NumberCoercionTest.java
--- a/src/test/java/com/fasterxml/jackson/core/read/NumberCoercionTest.java
+++ b/src/test/java/com/fasterxml/jackson/core/read/NumberCoercionTest.java
@@ -56,70 +57,82 @@
     public void testToIntFailing() throws Exception
     {
         for (int mode : ALL_STREAMING_MODES) {
             JsonParser p;
 
             // long -> error
             long big = 1L + Integer.MAX_VALUE;
             p = createParser(mode, String.valueOf(big));
             assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
             assertEquals(big, p.getLongValue());
             try {
                 p.getIntValue();
                 fail("Should not pass");
-            } catch (JsonParseException e) {
+            } catch (InputCoercionException e) {
                 verifyException(e, "out of range of int");
+                assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
+                assertEquals(Integer.TYPE, e.getTargetType());
             }
             long small = -1L + Integer.MIN_VALUE;
             p = createParser(mode, String.valueOf(small));
             assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
             assertEquals(Long.valueOf(small), p.getNumberValue());
             assertEquals(small, p.getLongValue());
             try {
                 p.getIntValue();
                 fail("Should not pass");
-            } catch (JsonParseException e) {
+            } catch (InputCoercionException e) {
                 verifyException(e, "out of range of int");
+                assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
+                assertEquals(Integer.TYPE, e.getTargetType());
             }
 
             // double -> error
             p = createParser(mode, String.valueOf(big)+".0");
             assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());
             assertEquals((double) big, p.getDoubleValue());
             try {
                 p.getIntValue();
                 fail("Should not pass");
-            } catch (JsonParseException e) {
+            } catch (InputCoercionException e) {
                 verifyException(e, "out of range of int");
+                assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
+                assertEquals(Integer.TYPE, e.getTargetType());
             }
             p = createParser(mode, String.valueOf(small)+".0");
             assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());
             assertEquals((double) small, p.getDoubleValue());
             try {
                 p.getIntValue();
                 fail("Should not pass");
-            } catch (JsonParseException e) {
+            } catch (InputCoercionException e) {
                 verifyException(e, "out of range of int");
+                assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
+                assertEquals(Integer.TYPE, e.getTargetType());
             }
 
             // BigInteger -> error
             p = createParser(mode, String.valueOf(big));
             assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
             assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());
             try {
                 p.getIntValue();
                 fail("Should not pass");
-            } catch (JsonParseException e) {
+            } catch (InputCoercionException e) {
                 verifyException(e, "out of range of int");
+                assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
+                assertEquals(Integer.TYPE, e.getTargetType());
             }
             p = createParser(mode, String.valueOf(small));
             assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
             assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());
             try {
                 p.getIntValue();
                 fail("Should not pass");
-            } catch (JsonParseException e) {
+            } catch (InputCoercionException e) {
                 verifyException(e, "out of range of int");
+                assertEquals(JsonToken.VALUE_NUMBER_INT, e.getInputType());
+                assertEquals(Integer.TYPE, e.getTargetType());
             }
         }
     }
 

commit 53704126c059701353df32403d49414a30df0dfb
Author: Tatu Saloranta <tatu.saloranta@iki.fi>
Date:   Sat Nov 5 01:10:07 2016

    Moar test coverage, now 74%/66%, similar to jackson-databind's

diff --git a/src/test/java/com/fasterxml/jackson/core/read/NumberCoercionTest.java b/src/test/java/com/fasterxml/jackson/core/read/NumberCoercionTest.java
--- /dev/null
+++ b/src/test/java/com/fasterxml/jackson/core/read/NumberCoercionTest.java
@@ -0,0 +56,70 @@
+    public void testToIntFailing() throws Exception
+    {
+        for (int mode : ALL_STREAMING_MODES) {
+            JsonParser p;
+
+            // long -> error
+            long big = 1L + Integer.MAX_VALUE;
+            p = createParser(mode, String.valueOf(big));
+            assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
+            assertEquals(big, p.getLongValue());
+            try {
+                p.getIntValue();
+                fail("Should not pass");
+            } catch (JsonParseException e) {
+                verifyException(e, "out of range of int");
+            }
+            long small = -1L + Integer.MIN_VALUE;
+            p = createParser(mode, String.valueOf(small));
+            assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
+            assertEquals(Long.valueOf(small), p.getNumberValue());
+            assertEquals(small, p.getLongValue());
+            try {
+                p.getIntValue();
+                fail("Should not pass");
+            } catch (JsonParseException e) {
+                verifyException(e, "out of range of int");
+            }
+
+            // double -> error
+            p = createParser(mode, String.valueOf(big)+".0");
+            assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());
+            assertEquals((double) big, p.getDoubleValue());
+            try {
+                p.getIntValue();
+                fail("Should not pass");
+            } catch (JsonParseException e) {
+                verifyException(e, "out of range of int");
+            }
+            p = createParser(mode, String.valueOf(small)+".0");
+            assertToken(JsonToken.VALUE_NUMBER_FLOAT, p.nextToken());
+            assertEquals((double) small, p.getDoubleValue());
+            try {
+                p.getIntValue();
+                fail("Should not pass");
+            } catch (JsonParseException e) {
+                verifyException(e, "out of range of int");
+            }
+
+            // BigInteger -> error
+            p = createParser(mode, String.valueOf(big));
+            assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
+            assertEquals(BigInteger.valueOf(big), p.getBigIntegerValue());
+            try {
+                p.getIntValue();
+                fail("Should not pass");
+            } catch (JsonParseException e) {
+                verifyException(e, "out of range of int");
+            }
+            p = createParser(mode, String.valueOf(small));
+            assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());
+            assertEquals(BigInteger.valueOf(small), p.getBigIntegerValue());
+            try {
+                p.getIntValue();
+                fail("Should not pass");
+            } catch (JsonParseException e) {
+                verifyException(e, "out of range of int");
+            }
+        }
+    }
+
