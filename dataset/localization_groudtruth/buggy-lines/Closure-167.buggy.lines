com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java#301#          left, leftIsRefineable, merged.typeA,
com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java#302#          right, rightIsRefineable, merged.typeB);
com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java#348#          left, leftIsRefineable, restrictedLeftType,
com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java#349#          right, rightIsRefineable, restrictedRightType);
com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java#394#    if (restrictedType != null && !restrictedType.equals(originalType)) {
com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java#407#      Node left, boolean leftIsRefineable, JSType restrictedLeftType,
com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java#408#      Node right, boolean rightIsRefineable, JSType restrictedRightType) {
com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java#410#        leftIsRefineable && restrictedLeftType != null;
com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java#412#        rightIsRefineable && restrictedRightType != null;
com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java#430#      JSType restrictedType =
com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java#431#          type.getRestrictedTypeGivenToBooleanOutcome(outcome);
com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java#432#      FlowScope informed = blindScope.createChildFlowScope();
com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java#433#      declareNameInScope(informed, name, restrictedType);
com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java#434#      return informed;
com/google/javascript/rhino/jstype/JSType.java#883#FAULT_OF_OMISSION
