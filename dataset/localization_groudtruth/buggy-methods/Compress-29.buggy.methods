org.apache.commons.compress.archivers.ArchiveStreamFactory.<init>()V,0
org.apache.commons.compress.archivers.ArchiveStreamFactory.<init>(Ljava/lang/String;)V,0
org.apache.commons.compress.archivers.ArchiveStreamFactory.getEntryEncoding()Ljava/lang/String;,0
org.apache.commons.compress.archivers.ArchiveStreamFactory.setEntryEncoding(Ljava/lang/String;)V,0
org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(Ljava/lang/String;Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;,0
org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveOutputStream(Ljava/lang/String;Ljava/io/OutputStream;)Lorg/apache/commons/compress/archivers/ArchiveOutputStream;,1
org.apache.commons.compress.archivers.ArchiveStreamFactory.createArchiveInputStream(Ljava/io/InputStream;)Lorg/apache/commons/compress/archivers/ArchiveInputStream;,1
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(Ljava/io/InputStream;)V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(Ljava/io/InputStream;Ljava/lang/String;)V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(Ljava/io/InputStream;I)V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.<init>(Ljava/io/InputStream;ILjava/lang/String;)V,1
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.available()I,0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.close()V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.closeEntry()V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.ensureOpen()V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextCPIOEntry()Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;,0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(I)V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.read([BII)I,0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readFully([BII)I,0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readBinaryLong(IZ)J,0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readAsciiLong(II)J,0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readNewEntry(Z)Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;,0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldAsciiEntry()Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;,0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readOldBinaryEntry(Z)Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;,0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.readCString(I)Ljava/lang/String;,0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skip(J)J,0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.getNextEntry()Lorg/apache/commons/compress/archivers/ArchiveEntry;,0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.skipRemainderOfLastBlock()V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream.matches([BI)Z,0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(Ljava/io/OutputStream;S)V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(Ljava/io/OutputStream;SI)V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(Ljava/io/OutputStream;SILjava/lang/String;)V,1
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(Ljava/io/OutputStream;)V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.<init>(Ljava/io/OutputStream;Ljava/lang/String;)V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.ensureOpen()V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeHeader(Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;)V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeNewEntry(Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;)V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldAsciiEntry(Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;)V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeOldBinaryEntry(Lorg/apache/commons/compress/archivers/cpio/CpioArchiveEntry;Z)V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.closeArchiveEntry()V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.write([BII)V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.finish()V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.close()V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.pad(I)V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeBinaryLong(JIZ)V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeAsciiLong(JII)V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.writeCString(Ljava/lang/String;)V,0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream.createArchiveEntry(Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/ArchiveEntry;,0
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.<init>(Ljava/io/InputStream;)V,0
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.<init>(Ljava/io/InputStream;Ljava/lang/String;)V,1
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getCount()I,0
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getBytesRead()J,0
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getSummary()Lorg/apache/commons/compress/archivers/dump/DumpArchiveSummary;,0
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readCLRI()V,0
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readBITS()V,0
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextDumpEntry()Lorg/apache/commons/compress/archivers/dump/DumpArchiveEntry;,0
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getNextEntry()Lorg/apache/commons/compress/archivers/dump/DumpArchiveEntry;,0
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.readDirectoryEntry(Lorg/apache/commons/compress/archivers/dump/DumpArchiveEntry;)V,0
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.getPath(Lorg/apache/commons/compress/archivers/dump/DumpArchiveEntry;)Ljava/lang/String;,0
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.read([BII)I,0
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.close()V,0
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream.matches([BI)Z,0
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream$1.<init>(Lorg/apache/commons/compress/archivers/dump/DumpArchiveInputStream;)V,0
org.apache.commons.compress.archivers.dump.DumpArchiveInputStream$1.compare(Lorg/apache/commons/compress/archivers/dump/DumpArchiveEntry;Lorg/apache/commons/compress/archivers/dump/DumpArchiveEntry;)I,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(Ljava/io/InputStream;)V,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(Ljava/io/InputStream;Ljava/lang/String;)V,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(Ljava/io/InputStream;I)V,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(Ljava/io/InputStream;ILjava/lang/String;)V,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(Ljava/io/InputStream;II)V,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.<init>(Ljava/io/InputStream;IILjava/lang/String;)V,1
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.close()V,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getRecordSize()I,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.available()I,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skip(J)J,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.markSupported()Z,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.mark(I)V,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.reset()V,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextTarEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.skipRecordPadding()V,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getLongNameData()[B,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getRecord()[B,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isEOFRecord([B)Z,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readRecord()[B,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.paxHeaders()V,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.parsePaxHeaders(Ljava/io/InputStream;)Ljava/util/Map;,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.applyPaxHeadersToCurrentEntry(Ljava/util/Map;)V,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.readGNUSparse()V,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getNextEntry()Lorg/apache/commons/compress/archivers/ArchiveEntry;,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.tryToConsumeSecondEOFRecord()V,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.read([BII)I,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.canReadEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.getCurrentEntry()Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.setCurrentEntry(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.isAtEOF()Z,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.setAtEOF(Z)V,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.consumeRemainderOfLastBlock()V,0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream.matches([BI)Z,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(Ljava/io/OutputStream;)V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(Ljava/io/OutputStream;Ljava/lang/String;)V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(Ljava/io/OutputStream;I)V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(Ljava/io/OutputStream;ILjava/lang/String;)V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(Ljava/io/OutputStream;II)V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<init>(Ljava/io/OutputStream;IILjava/lang/String;)V,1
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.<clinit>()V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setLongFileMode(I)V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setBigNumberMode(I)V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.setAddPaxHeadersForNonAsciiNames(Z)V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.getCount()I,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.getBytesWritten()J,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.finish()V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.close()V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.getRecordSize()I,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.putArchiveEntry(Lorg/apache/commons/compress/archivers/ArchiveEntry;)V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.closeArchiveEntry()V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.write([BII)V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writePaxHeaders(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;)V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.stripTo7Bits(Ljava/lang/String;)Ljava/lang/String;,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.shouldBeReplaced(C)Z,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeEOFRecord()V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.flush()V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.createArchiveEntry(Ljava/io/File;Ljava/lang/String;)Lorg/apache/commons/compress/archivers/ArchiveEntry;,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord([B)V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.writeRecord([BI)V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.padAsNeeded()V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeadersForBigNumbers(Ljava/util/Map;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.addPaxHeaderForBigNumber(Ljava/util/Map;Ljava/lang/String;JJ)V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumbers(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(Ljava/lang/String;JJ)V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumberWithPosixMessage(Ljava/lang/String;JJ)V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.failForBigNumber(Ljava/lang/String;JJLjava/lang/String;)V,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.handleLongName(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Ljava/lang/String;Ljava/util/Map;Ljava/lang/String;BLjava/lang/String;)Z,0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream.transferModTime(Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;Lorg/apache/commons/compress/archivers/tar/TarArchiveEntry;)V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(Ljava/io/InputStream;)V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(Ljava/io/InputStream;Ljava/lang/String;)V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(Ljava/io/InputStream;Ljava/lang/String;Z)V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V,1
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<clinit>()V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFirstLocalFileHeader([B)V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipLong;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextEntry()Lorg/apache/commons/compress/archivers/ArchiveEntry;,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.canReadEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read([BII)I,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored([BII)I,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDeflated([BII)I,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater([BII)I,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close()V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skip(J)J,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches([BI)Z,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.checksig([B[B)Z,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry()V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.drainCurrentEntryData()V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getBytesInflated()J,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.fill()I,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully([B)V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor()V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.supportsDataDescriptorFor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStoredEntry()V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(Ljava/io/ByteArrayOutputStream;III)Z,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.cacheBytesRead(Ljava/io/ByteArrayOutputStream;III)I,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushback([BII)V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive()V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.findEocdRecord()V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.realSkip(J)V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;Ljava/io/InputStream;J)V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream.read()I,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream.read([B)I,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream.read([BII)I,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream.skip(J)J,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream.available()I,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry.<init>()V,0
