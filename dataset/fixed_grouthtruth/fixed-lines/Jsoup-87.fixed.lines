org/jsoup/nodes/Element.java#140#    public String normalName() {
org/jsoup/nodes/Element.java#141#        return tag.normalName();
org/jsoup/nodes/Element.java#142#    }
org/jsoup/parser/HtmlTreeBuilder.java#315#            if (next.normalName().equals(elName)) {
org/jsoup/parser/HtmlTreeBuilder.java#337#            if (next.normalName().equals(elName))
org/jsoup/parser/HtmlTreeBuilder.java#347#            if (inSorted(next.normalName(), elNames))
org/jsoup/parser/HtmlTreeBuilder.java#355#            if (next.normalName().equals(elName)) {
org/jsoup/parser/HtmlTreeBuilder.java#378#            if (StringUtil.in(next.normalName(), nodeNames) || next.normalName().equals("html"))
org/jsoup/parser/HtmlTreeBuilder.java#420#            String name = node.normalName();
org/jsoup/parser/HtmlTreeBuilder.java#476#            final String elName = stack.get(pos).normalName();
org/jsoup/parser/HtmlTreeBuilder.java#517#            String elName = el.normalName();
org/jsoup/parser/HtmlTreeBuilder.java#569#        while ((excludeTag != null && !currentElement().normalName().equals(excludeTag)) &&
org/jsoup/parser/HtmlTreeBuilder.java#570#                inSorted(currentElement().normalName(), TagSearchEndTags))
org/jsoup/parser/HtmlTreeBuilder.java#581#        String name = el.normalName();
org/jsoup/parser/HtmlTreeBuilder.java#618#        return a.normalName().equals(b.normalName()) &&
org/jsoup/parser/HtmlTreeBuilder.java#649#            Element newEl = insertStartTag(entry.normalName()); // todo: avoid fostering here?
org/jsoup/parser/HtmlTreeBuilder.java#689#            else if (next.normalName().equals(nodeName))
org/jsoup/parser/HtmlTreeBuilderState.java#315#                            if (el.normalName().equals("li")) {
org/jsoup/parser/HtmlTreeBuilderState.java#319#                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.normalName(), Constants.InBodyStartLiBreakers))
org/jsoup/parser/HtmlTreeBuilderState.java#339#                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).normalName().equals("body"))) {
org/jsoup/parser/HtmlTreeBuilderState.java#353#                        if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).normalName().equals("body"))) {
org/jsoup/parser/HtmlTreeBuilderState.java#372#                        if (StringUtil.inSorted(tb.currentElement().normalName(), Constants.Headings)) {
org/jsoup/parser/HtmlTreeBuilderState.java#398#                            if (StringUtil.inSorted(el.normalName(), Constants.DdDt)) {
org/jsoup/parser/HtmlTreeBuilderState.java#399#                                tb.processEndTag(el.normalName());
org/jsoup/parser/HtmlTreeBuilderState.java#402#                            if (tb.isSpecial(el) && !StringUtil.inSorted(el.normalName(), Constants.InBodyStartLiBreakers))
org/jsoup/parser/HtmlTreeBuilderState.java#531#                        if (tb.currentElement().normalName().equals("option"))
org/jsoup/parser/HtmlTreeBuilderState.java#538#                            if (!tb.currentElement().normalName().equals("ruby")) {
org/jsoup/parser/HtmlTreeBuilderState.java#574#                            } else if (!tb.inScope(formatEl.normalName())) {
org/jsoup/parser/HtmlTreeBuilderState.java#598#                                tb.popStackToClose(formatEl.normalName());
org/jsoup/parser/HtmlTreeBuilderState.java#633#                            if (StringUtil.inSorted(commonAncestor.normalName(), Constants.InBodyEndTableFosters)) {
org/jsoup/parser/HtmlTreeBuilderState.java#662#                            if (!tb.currentElement().normalName().equals(name))
org/jsoup/parser/HtmlTreeBuilderState.java#675#                            if (!tb.currentElement().normalName().equals(name))
org/jsoup/parser/HtmlTreeBuilderState.java#699#                            if (!tb.currentElement().normalName().equals(name))
org/jsoup/parser/HtmlTreeBuilderState.java#711#                            if (!tb.currentElement().normalName().equals(name))
org/jsoup/parser/HtmlTreeBuilderState.java#721#                            if (!tb.currentElement().normalName().equals(name))
org/jsoup/parser/HtmlTreeBuilderState.java#731#                            if (!tb.currentElement().normalName().equals(name))
org/jsoup/parser/HtmlTreeBuilderState.java#745#                            if (!tb.currentElement().normalName().equals(name))
org/jsoup/parser/HtmlTreeBuilderState.java#768#            String name = t.asEndTag().normalName; // case insensitive search - goal is to preserve output case, not for the parse to be case sensitive
org/jsoup/parser/HtmlTreeBuilderState.java#772#                if (node.normalName().equals(name)) {
org/jsoup/parser/HtmlTreeBuilderState.java#774#                    if (!name.equals(tb.currentElement().normalName()))
org/jsoup/parser/HtmlTreeBuilderState.java#887#                if (tb.currentElement().normalName().equals("html"))
org/jsoup/parser/HtmlTreeBuilderState.java#897#            if (StringUtil.in(tb.currentElement().normalName(), "table", "tbody", "tfoot", "thead", "tr")) {
org/jsoup/parser/HtmlTreeBuilderState.java#926#                                if (StringUtil.in(tb.currentElement().normalName(), "table", "tbody", "tfoot", "thead", "tr")) {
org/jsoup/parser/HtmlTreeBuilderState.java#954#                    if (!tb.currentElement().normalName().equals("caption"))
org/jsoup/parser/HtmlTreeBuilderState.java#1007#                        if (tb.currentElement().normalName().equals("html")) { // frag case
org/jsoup/parser/HtmlTreeBuilderState.java#1018#                    if (tb.currentElement().normalName().equals("html"))
org/jsoup/parser/HtmlTreeBuilderState.java#1089#            tb.processEndTag(tb.currentElement().normalName()); // tbody, tfoot, thead
org/jsoup/parser/HtmlTreeBuilderState.java#1173#                    if (!tb.currentElement().normalName().equals(name))
org/jsoup/parser/HtmlTreeBuilderState.java#1240#                        if (tb.currentElement().normalName().equals("option"))
org/jsoup/parser/HtmlTreeBuilderState.java#1244#                        if (tb.currentElement().normalName().equals("option"))
org/jsoup/parser/HtmlTreeBuilderState.java#1246#                        else if (tb.currentElement().normalName().equals("optgroup"))
org/jsoup/parser/HtmlTreeBuilderState.java#1269#                            if (tb.currentElement().normalName().equals("option") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).normalName().equals("optgroup"))
org/jsoup/parser/HtmlTreeBuilderState.java#1271#                            if (tb.currentElement().normalName().equals("optgroup"))
org/jsoup/parser/HtmlTreeBuilderState.java#1277#                            if (tb.currentElement().normalName().equals("option"))
org/jsoup/parser/HtmlTreeBuilderState.java#1296#                    if (!tb.currentElement().normalName().equals("html"))
org/jsoup/parser/HtmlTreeBuilderState.java#1383#                if (tb.currentElement().normalName().equals("html")) { // frag
org/jsoup/parser/HtmlTreeBuilderState.java#1388#                    if (!tb.isFragmentParsing() && !tb.currentElement().normalName().equals("frameset")) {
org/jsoup/parser/HtmlTreeBuilderState.java#1393#                if (!tb.currentElement().normalName().equals("html")) {
org/jsoup/parser/Tag.java#4#import org.jsoup.internal.Normalizer;
org/jsoup/parser/Tag.java#18#    private String normalName; // always the lower case version of this tag, regardless of case preservation mode
org/jsoup/parser/Tag.java#30#        normalName = Normalizer.lowerCase(tagName);
org/jsoup/parser/Tag.java#46#    public String normalName() {
org/jsoup/parser/Tag.java#47#        return normalName;
org/jsoup/parser/Tag.java#48#    }
