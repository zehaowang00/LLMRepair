org/joda/time/chrono/ZonedChronology.java#436#               return iZone.convertLocalToUTC(localInstant, false, instant);
org/joda/time/chrono/ZonedChronology.java#448#               return iZone.convertLocalToUTC(localInstant, false, instant);
org/joda/time/chrono/ZonedChronology.java#460#                return iZone.convertLocalToUTC(localInstant, false, instant);
org/joda/time/chrono/ZonedChronology.java#467#            long result = iZone.convertLocalToUTC(localInstant, false, instant);
org/joda/time/chrono/ZonedChronology.java#481#            return iZone.convertLocalToUTC(localInstant, false, instant);
org/joda/time/chrono/ZonedChronology.java#528#                return iZone.convertLocalToUTC(localInstant, false, instant);
org/joda/time/chrono/ZonedChronology.java#540#                return iZone.convertLocalToUTC(localInstant, false, instant);
org/joda/time/DateTimeZone.java#936#    public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC) {
org/joda/time/DateTimeZone.java#937#        int offsetOriginal = getOffset(originalInstantUTC);
org/joda/time/DateTimeZone.java#938#        long instantUTC = instantLocal - offsetOriginal;
org/joda/time/DateTimeZone.java#939#        int offsetLocalFromOriginal = getOffset(instantUTC);
org/joda/time/DateTimeZone.java#940#        if (offsetLocalFromOriginal == offsetOriginal) {
org/joda/time/DateTimeZone.java#941#            return instantUTC;
org/joda/time/DateTimeZone.java#942#        }
org/joda/time/DateTimeZone.java#943#        return convertLocalToUTC(instantLocal, strict);
org/joda/time/DateTimeZone.java#944#    }
org/joda/time/field/LenientDateTimeField.java#75#        return iBase.getZone().convertLocalToUTC(localInstant, false, instant);
