org/jsoup/Jsoup.java#250#        return new Cleaner(whitelist).isValidBodyHtml(bodyHtml);
org/jsoup/parser/Parser.java#129#    public static List<Node> parseFragment(String fragmentHtml, Element context, String baseUri, ParseErrorList errorList) {
org/jsoup/parser/Parser.java#130#        HtmlTreeBuilder treeBuilder = new HtmlTreeBuilder();
org/jsoup/parser/Parser.java#131#        return treeBuilder.parseFragment(fragmentHtml, context, baseUri, errorList, treeBuilder.defaultSettings());
org/jsoup/parser/Parser.java#132#    }
org/jsoup/safety/Cleaner.java#17#import java.util.List;
org/jsoup/safety/Cleaner.java#79#        return numDiscarded == 0
org/jsoup/safety/Cleaner.java#80#            && dirtyDocument.head().childNodes().size() == 0; // because we only look at the body, but we start from a shell, make sure there's nothing in the head
org/jsoup/safety/Cleaner.java#83#    public boolean isValidBodyHtml(String bodyHtml) {
org/jsoup/safety/Cleaner.java#84#        Document clean = Document.createShell("");
org/jsoup/safety/Cleaner.java#85#        Document dirty = Document.createShell("");
org/jsoup/safety/Cleaner.java#86#        ParseErrorList errorList = ParseErrorList.tracking(1);
org/jsoup/safety/Cleaner.java#87#        List<Node> nodes = Parser.parseFragment(bodyHtml, dirty.body(), "", errorList);
org/jsoup/safety/Cleaner.java#88#        dirty.body().insertChildren(0, nodes);
org/jsoup/safety/Cleaner.java#89#        int numDiscarded = copySafeNodes(dirty.body(), clean.body());
org/jsoup/safety/Cleaner.java#90#        return numDiscarded == 0 && errorList.size() == 0;
org/jsoup/safety/Cleaner.java#91#    }
