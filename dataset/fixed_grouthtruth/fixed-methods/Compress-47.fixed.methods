org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(Ljava/io/InputStream;)V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(Ljava/io/InputStream;Ljava/lang/String;)V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(Ljava/io/InputStream;Ljava/lang/String;Z)V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<init>(Ljava/io/InputStream;Ljava/lang/String;ZZ)V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.<clinit>()V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextZipEntry()Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFirstLocalFileHeader([B)V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.processZip64Extra(Lorg/apache/commons/compress/archivers/zip/ZipLong;Lorg/apache/commons/compress/archivers/zip/ZipLong;)V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getNextEntry()Lorg/apache/commons/compress/archivers/ArchiveEntry;,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.canReadEntryData(Lorg/apache/commons/compress/archivers/ArchiveEntry;)Z,1
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.read([BII)I,1
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored([BII)I,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDeflated([BII)I,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFromInflater([BII)I,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.close()V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skip(J)J,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.matches([BI)Z,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.checksig([B[B)Z,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.closeEntry()V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.currentEntryHasOutstandingBytes()Z,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.drainCurrentEntryData()V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.getBytesInflated()J,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.fill()I,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readFully([B)V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readDataDescriptor()V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.supportsDataDescriptorFor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.supportsCompressedSizeFor(Lorg/apache/commons/compress/archivers/zip/ZipArchiveEntry;)Z,1
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStoredEntry()V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.bufferContainsSignature(Ljava/io/ByteArrayOutputStream;III)Z,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.cacheBytesRead(Ljava/io/ByteArrayOutputStream;III)I,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.pushback([BII)V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.skipRemainderOfArchive()V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.findEocdRecord()V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.realSkip(J)V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readOneByte()I,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.isFirstByteOfEocdSig(I)Z,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream.<init>(Lorg/apache/commons/compress/archivers/zip/ZipArchiveInputStream;Ljava/io/InputStream;J)V,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream.read()I,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream.read([B)I,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream.read([BII)I,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream.skip(J)J,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$BoundedInputStream.available()I,0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream$CurrentEntry.<init>()V,0
