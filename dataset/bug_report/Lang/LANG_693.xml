<!-- 
RSS generated by JIRA (8.20.10#820010-sha1:ace47f9899e9ee25d7157d59aa17ab06aee30d3d) at Sat Mar 23 19:30:34 UTC 2024

It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.
For example, to request only the issue key and summary append 'field=key&field=summary' to the URL of your request.
-->
<rss version="0.92" >
<channel>
    <title>ASF JIRA</title>
    <link>https://issues.apache.org/jira</link>
    <description>This file is an XML representation of an issue</description>
    <language>en-uk</language>    <build-info>
        <version>8.20.10</version>
        <build-number>820010</build-number>
        <build-date>22-06-2022</build-date>
    </build-info>


<item>
            <title>[LANG-693] Method createNumber from NumberUtils doesn&apos;t work for floating point numbers other than Float</title>
                <link>https://issues.apache.org/jira/browse/LANG-693</link>
                <project id="12310481" key="LANG">Commons Lang</project>
                    <description>&lt;p&gt;Method createNumber from NumberUtils is trying to parse a string with a floating point number always first as a Float, that will cause that if we send a string with a number that will need a Double or even a BigDecimal the number will be truncate to accommodate into the Float without an exception to be thrown, so in fact we will no be returning ever neither a Double nor a BigDecimal.&lt;/p&gt;</description>
                <environment></environment>
        <key id="12504149">LANG-693</key>
            <summary>Method createNumber from NumberUtils doesn&apos;t work for floating point numbers other than Float</summary>
                <type id="1" iconUrl="https://issues.apache.org/jira/secure/viewavatar?size=xsmall&amp;avatarId=21133&amp;avatarType=issuetype">Bug</type>
                                            <priority id="4" iconUrl="https://issues.apache.org/jira/images/icons/priorities/minor.svg">Minor</priority>
                        <status id="6" iconUrl="https://issues.apache.org/jira/images/icons/statuses/closed.png" description="The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.">Closed</status>
                    <statusCategory id="3" key="done" colorName="green"/>
                                    <resolution id="1">Fixed</resolution>
                                        <assignee username="-1">Unassigned</assignee>
                                    <reporter username="rego">Carlos Rego</reporter>
                        <labels>
                    </labels>
                <created>Wed, 13 Apr 2011 09:04:54 +0000</created>
                <updated>Tue, 15 Oct 2013 02:32:59 +0000</updated>
                            <resolved>Sun, 19 May 2013 10:37:07 +0000</resolved>
                                    <version>2.6</version>
                                    <fixVersion>3.2</fixVersion>
                                    <component>lang.math.*</component>
                        <due></due>
                            <votes>0</votes>
                                    <watches>3</watches>
                                                                                                                <comments>
                            <comment id="13021987" author="bayard" created="Wed, 20 Apr 2011 06:26:39 +0000"  >&lt;p&gt;Can you provide more data? If I run the following test it looks to happily be returning Doubles (and already had a test for BigDecimal):&lt;/p&gt;

&lt;p&gt;        // &lt;a href=&quot;https://issues.apache.org/jira/browse/LANG-693&quot; title=&quot;Method createNumber from NumberUtils doesn&amp;#39;t work for floating point numbers other than Float&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LANG-693&quot;&gt;&lt;del&gt;LANG-693&lt;/del&gt;&lt;/a&gt;&lt;br/&gt;
        assertEquals(&quot;createNumber(String) &lt;a href=&quot;https://issues.apache.org/jira/browse/LANG-693&quot; title=&quot;Method createNumber from NumberUtils doesn&amp;#39;t work for floating point numbers other than Float&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LANG-693&quot;&gt;&lt;del&gt;LANG-693&lt;/del&gt;&lt;/a&gt; failed&quot;, Double.MAX_VALUE, NumberUtils&lt;br/&gt;
                    .createNumber(&quot;&quot; + Double.MAX_VALUE));&lt;br/&gt;
        System.err.println( NumberUtils.createNumber(&quot;&quot;+Double.MAX_VALUE));&lt;br/&gt;
        System.err.println( NumberUtils.createNumber(&quot;&quot;+Double.MAX_VALUE).getClass());   // prints java.lang.Double&lt;/p&gt;</comment>
                            <comment id="13025113" author="rego" created="Tue, 26 Apr 2011 07:36:49 +0000"  >&lt;p&gt;We&apos;ve have tested it in a JUnit with the following string: &quot;0.9090909090909091&quot;, that debugging it returns a float with the value 0.90909094, which clearly is wrong. That&apos;s why we thought the approach for the conversion is wrong.&lt;br/&gt;
Did you tried to debug it just to be sure that the execution flow is going as you expect?&lt;/p&gt;</comment>
                            <comment id="13025161" author="sebb@apache.org" created="Tue, 26 Apr 2011 10:17:50 +0000"  >&lt;p&gt;I can confirm that &quot;0.9090909090909091&quot; is returned as a float 0.90909094.&lt;/p&gt;

&lt;p&gt;Whether this is wrong is a different matter. The Javadoc says:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Turns a string value into a java.lang.Number.&lt;/p&gt;

&lt;p&gt;First, the value is examined for a type qualifier on the end (&apos;f&apos;,&apos;F&apos;,&apos;d&apos;,&apos;D&apos;,&apos;l&apos;,&apos;L&apos;). If it is found, it starts trying to create successively larger types from the type specified until one is found that can represent the value.&lt;/p&gt;

&lt;p&gt;If a type specifier is not found, it will check for a decimal point and then try successively larger types from Integer to BigInteger and from Float to BigDecimal.&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The second paragraph does not specifically say that the code will return the &quot;best&quot; match, nor does the 3rd para. It&apos;s not clear to me whether the method was ever intended to return a &quot;best&quot; match (for some definintion of best). If such behaviour is intended, then the Javadoc needs to be clarified, and the code changed accordingly.&lt;/p&gt;

&lt;p&gt;Note that the test of Double.MAX_VALUE works because this is converted to Float.INFINITY.&lt;br/&gt;
Non-infinite values are rounded by Float.valueOf(String) to the nearest value, so are never checked as doubles.&lt;/p&gt;</comment>
                            <comment id="13025634" author="rego" created="Wed, 27 Apr 2011 06:30:29 +0000"  >&lt;p&gt;In an automatic conversion to string of a number you will not have the qualifier, so if you try to undo the conversion with this method it will fail, because the approach when you don&apos;t sent the qualifier is not working. Anyway, we are working with BigDecimal instances that don&apos;t have a qualifier.&lt;/p&gt;

&lt;p&gt;If you don&apos;t want a whole refactor of the method you could at least check if the resulted number has the same toString value than the parameter and if not try with a larger type, that should avoid this kind of problem (not very nice approach anyway).&lt;/p&gt;</comment>
                            <comment id="13026385" author="bayard" created="Thu, 28 Apr 2011 17:31:51 +0000"  >&lt;p&gt;Setting fix version to 3.x (i.e. post 3.0). Seems like a very fair issue to take a stab at fixing.&lt;/p&gt;</comment>
                            <comment id="13089318" author="bayard" created="Tue, 23 Aug 2011 07:10:46 +0000"  >&lt;p&gt;The toString may not be the nicest, but it definitely works &lt;img class=&quot;emoticon&quot; src=&quot;https://issues.apache.org/jira/images/icons/emoticons/smile.png&quot; height=&quot;16&quot; width=&quot;16&quot; align=&quot;absmiddle&quot; alt=&quot;&quot; border=&quot;0&quot;/&gt;&lt;/p&gt;

&lt;p&gt;The only test I get failing if I use it is the &lt;a href=&quot;https://issues.apache.org/jira/browse/LANG-521&quot; title=&quot;NumberUtils.isNumber() Should Return True for Valid Number with a Trailing Decimal Place&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LANG-521&quot;&gt;&lt;del&gt;LANG-521&lt;/del&gt;&lt;/a&gt; &quot;2.&quot; use case. That switches from being a Float to being a BigDecimal. I suspect there might be problems with exponents though.&lt;/p&gt;

&lt;p&gt;All the problems would seem to be creating BigDecimals unnecessarily, rather than creating Floats and losing data. So worst case the String test seems preferable. &lt;/p&gt;</comment>
                            <comment id="13102220" author="bayard" created="Sun, 11 Sep 2011 05:10:29 +0000"  >&lt;p&gt;Pushing back to 3.0.3; I don&apos;t think is ready yet as the toString approach is likely to lead to bugs and there&apos;s not another solution on the table.&lt;/p&gt;</comment>
                            <comment id="13494866" author="tn" created="Sun, 11 Nov 2012 12:17:29 +0000"  >&lt;p&gt;Why not trying to create a double first in the createNumber method:&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;                //Must be a float,double,BigDec
                boolean allZeros = isAllZeros(mant) &amp;amp;&amp;amp; isAllZeros(exp);
                try {
                    Float f = createFloat(str);
                    if (!(f.isInfinite() || (f.floatValue() == 0.0F &amp;amp;&amp;amp; !allZeros))) {
                        return f;
                    }
                } catch (NumberFormatException nfe) { // NOPMD
                    // ignore the bad number
                }
                try {
                    Double d = createDouble(str);
                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D &amp;amp;&amp;amp; !allZeros))) {
                        return d;
                    }
                } catch (NumberFormatException nfe) { // NOPMD
                    // ignore the bad number
                }
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Right now, we first try to convert it to a float, and if it does not fit, we try it with double.&lt;br/&gt;
But this way we will always lose the precision unless one specifies the &apos;d&apos; suffix.&lt;/p&gt;

&lt;p&gt;The default in java for decimal values is double anyway (without specifying a type qualifier), so it makes sense to use the same behavior in the createNumber method imho.&lt;/p&gt;

&lt;p&gt;If somebody really wants to have a float, he/she can specify the &apos;f&apos; type qualifier.&lt;/p&gt;</comment>
                            <comment id="13494894" author="garydgregory" created="Sun, 11 Nov 2012 14:57:13 +0000"  >&lt;p&gt;So this proposal is not b-compatible but it sounds like an improvement, or even a bug fix if you consider the loss of precision. +1.&lt;/p&gt;</comment>
                            <comment id="13495060" author="sebb@apache.org" created="Mon, 12 Nov 2012 02:05:15 +0000"  >&lt;blockquote&gt;&lt;p&gt;So this proposal is not b-compatible ...&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;I assume you must mean behaviour compatible rather than binary compatible.&lt;/p&gt;

&lt;p&gt;As far as I can tell, if the code is changed to try double and then float, the result will always be a double.&lt;br/&gt;
I&apos;m not sure that is much of an improvement.&lt;/p&gt;</comment>
                            <comment id="13495135" author="tn" created="Mon, 12 Nov 2012 07:30:26 +0000"  >&lt;p&gt;Maybe I was unclear, but the float part afterwards would not be needed anymore, as this would never succeed.&lt;/p&gt;

&lt;p&gt;Another idea would be to add something like this (pseudo-code)&lt;/p&gt;

&lt;div class=&quot;preformatted panel&quot; style=&quot;border-width: 1px;&quot;&gt;&lt;div class=&quot;preformattedContent panelContent&quot;&gt;
&lt;pre&gt;//Must be a float,double,BigDec
boolean allZeros = isAllZeros(mant) &amp;amp;&amp;amp; isAllZeros(exp);
try {
    Float f = createFloat(str);
    BigDecimal one = createBigDecimal(str);
    BigDecimal two = new BigDecimal(f);

    // check for loss of precision in the conversion
    if (one.compareTo(two) == 0) {
       ....

} catch (NumberFormatException nfe) { // NOPMD
    // ignore the bad number
}
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Maybe the getPrecision() method from BigDecimal could be used too.&lt;br/&gt;
It is also a problem of definition, as a floating-point number can not always precisely expressed in the related data types, so the question is how to define when a float will be returned, and when a double.&lt;/p&gt;

&lt;p&gt;That&apos;s why I put my original proposal to just assume a double in case of a missing type qualifier, as this is the default in java anyway.&lt;/p&gt;</comment>
                            <comment id="13495379" author="sebb@apache.org" created="Mon, 12 Nov 2012 16:21:19 +0000"  >&lt;p&gt;As pointed out in the original issue description, the same problem applies to double/BigDecimal.&lt;br/&gt;
If the code is changed to try double first, then the method will never create a BigDecimal unless it is larger than Double.MAX_VALUE, thus potentially losing precision again.&lt;/p&gt;

&lt;p&gt;As I see it, the problem is that the method currently only switches output type based on magnitude, not on precision.&lt;/p&gt;

&lt;p&gt;Would it make sense to check the precision of the input number and use that to choose the starting conversion?&lt;/p&gt;

&lt;p&gt;e.g. if more than 6 digits are present, use double; if more than 17 digits, use BigDecimal.&lt;/p&gt;

&lt;p&gt;This should be fairly cheap to do, and it would be easy to determine in advance what number type would be created.&lt;/p&gt;

&lt;p&gt;It would not always choose the minimal representation, but at least it would never lose precision.&lt;/p&gt;


&lt;p&gt;[AFAICT:&lt;/p&gt;

&lt;p&gt;6 is the max number of digits in a number guaranteed not to lose precision (some 7/8 digit numbers are also OK).&lt;br/&gt;
Similarly, double can support 15 digits guaranteed (to 17 max).]&lt;/p&gt;</comment>
                            <comment id="13495401" author="garydgregory" created="Mon, 12 Nov 2012 16:47:28 +0000"  >&lt;p&gt;I like preserving precision.&lt;/p&gt;</comment>
                            <comment id="13495412" author="tn" created="Mon, 12 Nov 2012 16:59:13 +0000"  >&lt;p&gt;sounds pretty reasonable.&lt;/p&gt;</comment>
                            <comment id="13495424" author="sebb@apache.org" created="Mon, 12 Nov 2012 17:11:48 +0000"  >&lt;p&gt;Examples of valid numbers that would trigger an upscale:&lt;/p&gt;

&lt;p&gt;Float.MAX_VALUE is 3.4028235e+38 - i.e. 8 digits; that would convert to Double&lt;br/&gt;
Double.MAX_VALUE is 1.7976931348623157e+308 - i.e. 17 digits; would convert to BigDecimal&lt;/p&gt;

&lt;p&gt;In theory one could do extra work to handle the boundary cases.&lt;br/&gt;
I&apos;ve not looked at what is involved.&lt;/p&gt;</comment>
                            <comment id="13661472" author="calvine" created="Sun, 19 May 2013 02:45:47 +0000"  >&lt;p&gt;This is a patch that resolves this bug. Any feedback would be greatly appreciated!&lt;/p&gt;</comment>
                            <comment id="13661473" author="calvine" created="Sun, 19 May 2013 02:46:22 +0000"  >&lt;p&gt;Hello All,&lt;/p&gt;

&lt;p&gt;I am new to the Apache Community. I have attached a patch that resolves this issue. I would love any feedback you can provide.&lt;/p&gt;

&lt;p&gt;Thank you,&lt;br/&gt;
Calvin&lt;/p&gt;</comment>
                            <comment id="13661476" author="calvine" created="Sun, 19 May 2013 02:50:58 +0000"  >&lt;p&gt;Fixed error in comments around bug fix.&lt;/p&gt;</comment>
                            <comment id="13661526" author="sebb@apache.org" created="Sun, 19 May 2013 10:37:07 +0000"  >&lt;p&gt;Thanks very much; neat fix. Applied here:&lt;/p&gt;

&lt;p&gt;URL: &lt;a href=&quot;http://svn.apache.org/r1484263&quot; class=&quot;external-link&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener&quot;&gt;http://svn.apache.org/r1484263&lt;/a&gt;&lt;br/&gt;
Log:&lt;br/&gt;
&lt;a href=&quot;https://issues.apache.org/jira/browse/LANG-693&quot; title=&quot;Method createNumber from NumberUtils doesn&amp;#39;t work for floating point numbers other than Float&quot; class=&quot;issue-link&quot; data-issue-key=&quot;LANG-693&quot;&gt;&lt;del&gt;LANG-693&lt;/del&gt;&lt;/a&gt; Method createNumber from NumberUtils doesn&apos;t work for floating point numbers other than Float&lt;/p&gt;

&lt;p&gt;Modified:&lt;br/&gt;
    commons/proper/lang/trunk/src/changes/changes.xml&lt;br/&gt;
    commons/proper/lang/trunk/src/main/java/org/apache/commons/lang3/math/NumberUtils.java&lt;br/&gt;
    commons/proper/lang/trunk/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java&lt;/p&gt;

&lt;p&gt;=====&lt;/p&gt;

&lt;p&gt;I made two very trivial style changes: moved the declaration of numDecimals closer to where it is first used, and changed less =&amp;gt; fewer in a comment (grammatical pedantry on my part!).&lt;/p&gt;

&lt;p&gt;Thanks again.&lt;/p&gt;</comment>
                            <comment id="13661600" author="calvine" created="Sun, 19 May 2013 17:05:56 +0000"  >&lt;p&gt;Thank you very much!&lt;/p&gt;</comment>
                            <comment id="13734070" author="jkoppel" created="Thu, 8 Aug 2013 22:03:33 +0000"  >&lt;p&gt;This still can fail if there are digits before the decimal point.&lt;/p&gt;

&lt;p&gt;&amp;gt; System.out.println(NumberUtils.createNumber(&quot;169000121.0&quot;));&lt;br/&gt;
1.69000128E8&lt;/p&gt;</comment>
                    </comments>
                    <attachments>
                            <attachment id="12583756" name="LANG-693(2).patch" size="3591" author="calvine" created="Sun, 19 May 2013 02:50:58 +0000"/>
                    </attachments>
                <subtasks>
                    </subtasks>
                <customfields>
                                                                            <customfield id="customfield_12310310" key="com.atlassian.jira.toolkit:attachments">
                        <customfieldname>Attachment count</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>1.0</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12314020" key="com.atlassian.jira.plugins.jira-development-integration-plugin:devsummary">
                        <customfieldname>Development</customfieldname>
                        <customfieldvalues>
                            
                        </customfieldvalues>
                    </customfield>
                                                                                                                        <customfield id="customfield_12313422" key="com.atlassian.jirafisheyeplugin:jobcheckbox">
                        <customfieldname>Enable Automatic Patch Review</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue><![CDATA[false]]></customfieldvalue>

                        </customfieldvalues>
                    </customfield>
customfield id="customfield_12310420" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Global Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>2999</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                        <customfield id="customfield_12312521" key="com.atlassian.jira.toolkit:LastCommentDate">
                        <customfieldname>Last public comment date</customfieldname>
                        <customfieldvalues>
                            10 years, 34 weeks, 1 day ago
                        </customfieldvalues>
                    </customfield>
                                                                                                                                                                                                                                                                                                <customfield id="customfield_12311820" key="com.pyxis.greenhopper.jira:gh-lexo-rank">
                        <customfieldname>Rank</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>0|i0b5ov:</customfieldvalue>

                        </customfieldvalues>
                    </customfield>
                                                                <customfield id="customfield_12310920" key="com.pyxis.greenhopper.jira:gh-global-rank">
                        <customfieldname>Rank (Obsolete)</customfieldname>
                        <customfieldvalues>
                            <customfieldvalue>63034</customfieldvalue>
                        </customfieldvalues>
                    </customfield>
customfields>
    </item>
</channel>
</rss>